
core_MSS_CM3_0_app:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d54  20000000  20000000  00008000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  20000d54  20000d54  00008d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000058  20000d70  20000d70  00008d70  2**2
                  ALLOC
  3 .stack        00003000  20000dc8  20000dc8  00008d70  2**0
                  ALLOC
  4 .comment      000000ac  00000000  00000000  00008d70  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000001d0  00000000  00000000  00008e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000003d6  00000000  00000000  00008fec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002c71  00000000  00000000  000093c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005e5  00000000  00000000  0000c033  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000e97  00000000  00000000  0000c618  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000005e0  00000000  00000000  0000d4b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001788  00000000  00000000  0000da90  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009a6  00000000  00000000  0000f218  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macinfo 00016787  00000000  00000000  0000fbbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .ARM.attributes 00000025  00000000  00000000  00026345  2**0
                  CONTENTS, READONLY
 15 .debug_ranges 000001b0  00000000  00000000  0002636a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

20000000 <__text_start>:
20000000:	20010000 	.word	0x20010000
20000004:	20000299 	.word	0x20000299
20000008:	20000309 	.word	0x20000309
2000000c:	2000030b 	.word	0x2000030b
20000010:	2000030d 	.word	0x2000030d
20000014:	2000030f 	.word	0x2000030f
20000018:	20000311 	.word	0x20000311
	...
2000002c:	20000313 	.word	0x20000313
20000030:	20000315 	.word	0x20000315
20000034:	00000000 	.word	0x00000000
20000038:	20000317 	.word	0x20000317
2000003c:	20000319 	.word	0x20000319
20000040:	2000031b 	.word	0x2000031b
20000044:	2000031d 	.word	0x2000031d
20000048:	2000031f 	.word	0x2000031f
2000004c:	20000321 	.word	0x20000321
20000050:	20000323 	.word	0x20000323
20000054:	20000325 	.word	0x20000325
20000058:	20000327 	.word	0x20000327
2000005c:	20000329 	.word	0x20000329
20000060:	2000032b 	.word	0x2000032b
20000064:	2000032d 	.word	0x2000032d
20000068:	20000a31 	.word	0x20000a31
2000006c:	20000a5d 	.word	0x20000a5d
20000070:	20000333 	.word	0x20000333
20000074:	20000335 	.word	0x20000335
20000078:	20000337 	.word	0x20000337
2000007c:	20000339 	.word	0x20000339
20000080:	2000033b 	.word	0x2000033b
20000084:	2000033d 	.word	0x2000033d
20000088:	2000033f 	.word	0x2000033f
2000008c:	20000341 	.word	0x20000341
20000090:	20000343 	.word	0x20000343
20000094:	20000345 	.word	0x20000345
20000098:	20000347 	.word	0x20000347
2000009c:	20000349 	.word	0x20000349
200000a0:	2000034b 	.word	0x2000034b
	...
200000bc:	2000034d 	.word	0x2000034d
200000c0:	2000034f 	.word	0x2000034f
200000c4:	20000351 	.word	0x20000351
200000c8:	20000353 	.word	0x20000353
200000cc:	20000355 	.word	0x20000355
200000d0:	20000357 	.word	0x20000357
200000d4:	20000359 	.word	0x20000359
200000d8:	2000035b 	.word	0x2000035b
200000dc:	2000035d 	.word	0x2000035d
200000e0:	2000035f 	.word	0x2000035f
200000e4:	20000361 	.word	0x20000361
200000e8:	20000363 	.word	0x20000363
200000ec:	20000365 	.word	0x20000365
200000f0:	20000367 	.word	0x20000367
200000f4:	20000369 	.word	0x20000369
200000f8:	2000036b 	.word	0x2000036b
200000fc:	2000036d 	.word	0x2000036d
20000100:	2000036f 	.word	0x2000036f
20000104:	20000371 	.word	0x20000371
20000108:	20000373 	.word	0x20000373
2000010c:	20000375 	.word	0x20000375
20000110:	20000377 	.word	0x20000377
20000114:	20000379 	.word	0x20000379
20000118:	2000037b 	.word	0x2000037b
2000011c:	2000037d 	.word	0x2000037d
20000120:	2000037f 	.word	0x2000037f
20000124:	20000381 	.word	0x20000381
20000128:	20000383 	.word	0x20000383
2000012c:	20000385 	.word	0x20000385
20000130:	20000387 	.word	0x20000387
20000134:	20000389 	.word	0x20000389
20000138:	2000038b 	.word	0x2000038b
2000013c:	2000038d 	.word	0x2000038d
20000140:	2000038f 	.word	0x2000038f
20000144:	20000391 	.word	0x20000391
20000148:	20000393 	.word	0x20000393
2000014c:	20000395 	.word	0x20000395
20000150:	20000397 	.word	0x20000397
20000154:	20000399 	.word	0x20000399
20000158:	2000039b 	.word	0x2000039b
2000015c:	2000039d 	.word	0x2000039d
20000160:	2000039f 	.word	0x2000039f
20000164:	200003a1 	.word	0x200003a1
20000168:	200003a3 	.word	0x200003a3
2000016c:	200003a5 	.word	0x200003a5
20000170:	200003a7 	.word	0x200003a7
20000174:	200003a9 	.word	0x200003a9
20000178:	200003ab 	.word	0x200003ab
2000017c:	200003ad 	.word	0x200003ad
20000180:	200003af 	.word	0x200003af
20000184:	200003b1 	.word	0x200003b1
20000188:	200003b3 	.word	0x200003b3
2000018c:	200003b5 	.word	0x200003b5
20000190:	200003b7 	.word	0x200003b7
20000194:	200003b9 	.word	0x200003b9
20000198:	200003bb 	.word	0x200003bb
2000019c:	200003bd 	.word	0x200003bd
200001a0:	200003bf 	.word	0x200003bf
200001a4:	200003c1 	.word	0x200003c1
200001a8:	200003c3 	.word	0x200003c3
200001ac:	200003c5 	.word	0x200003c5
200001b0:	200003c7 	.word	0x200003c7
200001b4:	200003c9 	.word	0x200003c9
200001b8:	200003cb 	.word	0x200003cb
200001bc:	200003cd 	.word	0x200003cd
200001c0:	200003cf 	.word	0x200003cf
200001c4:	200003d1 	.word	0x200003d1
200001c8:	200003d3 	.word	0x200003d3
200001cc:	200003d5 	.word	0x200003d5
200001d0:	200003d7 	.word	0x200003d7
200001d4:	200003d9 	.word	0x200003d9
200001d8:	200003db 	.word	0x200003db
200001dc:	200003dd 	.word	0x200003dd
200001e0:	200003df 	.word	0x200003df
200001e4:	200003e1 	.word	0x200003e1
200001e8:	200003e3 	.word	0x200003e3
200001ec:	200003e5 	.word	0x200003e5
200001f0:	200003e7 	.word	0x200003e7
200001f4:	200003e9 	.word	0x200003e9
200001f8:	200003eb 	.word	0x200003eb
200001fc:	200003ed 	.word	0x200003ed
20000200:	200003ef 	.word	0x200003ef
20000204:	200003f1 	.word	0x200003f1
20000208:	200003f3 	.word	0x200003f3
2000020c:	200003f5 	.word	0x200003f5
20000210:	200003f7 	.word	0x200003f7
20000214:	200003f9 	.word	0x200003f9
20000218:	200003fb 	.word	0x200003fb
2000021c:	200003fd 	.word	0x200003fd
20000220:	200003ff 	.word	0x200003ff
20000224:	20000401 	.word	0x20000401
20000228:	20000403 	.word	0x20000403
2000022c:	20000405 	.word	0x20000405
20000230:	20000407 	.word	0x20000407
20000234:	20000409 	.word	0x20000409
20000238:	2000040b 	.word	0x2000040b
2000023c:	2000040d 	.word	0x2000040d
20000240:	2000040f 	.word	0x2000040f
20000244:	20000411 	.word	0x20000411
20000248:	20000413 	.word	0x20000413
2000024c:	20000415 	.word	0x20000415
20000250:	20000417 	.word	0x20000417
20000254:	20000419 	.word	0x20000419
20000258:	2000041b 	.word	0x2000041b
2000025c:	2000041d 	.word	0x2000041d
20000260:	2000041f 	.word	0x2000041f
20000264:	20000421 	.word	0x20000421
20000268:	20000423 	.word	0x20000423
2000026c:	20000425 	.word	0x20000425
20000270:	20000427 	.word	0x20000427
20000274:	20000429 	.word	0x20000429
20000278:	2000042b 	.word	0x2000042b
2000027c:	2000042d 	.word	0x2000042d
20000280:	2000042f 	.word	0x2000042f
20000284:	20000431 	.word	0x20000431
20000288:	20000433 	.word	0x20000433
2000028c:	20000435 	.word	0x20000435
20000290:	20000437 	.word	0x20000437
20000294:	20000439 	.word	0x20000439

20000298 <Reset_Handler>:
20000298:	4868      	ldr	r0, [pc, #416]	; (2000043c <ACE_PPE_Flag31_IRQHandler+0x4>)
2000029a:	4780      	blx	r0
2000029c:	4868      	ldr	r0, [pc, #416]	; (20000440 <ACE_PPE_Flag31_IRQHandler+0x8>)
2000029e:	2800      	cmp	r0, #0
200002a0:	d10b      	bne.n	200002ba <copy_data>
200002a2:	4868      	ldr	r0, [pc, #416]	; (20000444 <ACE_PPE_Flag31_IRQHandler+0xc>)
200002a4:	4968      	ldr	r1, [pc, #416]	; (20000448 <ACE_PPE_Flag31_IRQHandler+0x10>)
200002a6:	4a69      	ldr	r2, [pc, #420]	; (2000044c <ACE_PPE_Flag31_IRQHandler+0x14>)
200002a8:	4288      	cmp	r0, r1
200002aa:	d006      	beq.n	200002ba <copy_data>

200002ac <copy_code_loop>:
200002ac:	4291      	cmp	r1, r2
200002ae:	bf1c      	itt	ne
200002b0:	f850 3b04 	ldrne.w	r3, [r0], #4
200002b4:	f841 3b04 	strne.w	r3, [r1], #4
200002b8:	d1f8      	bne.n	200002ac <copy_code_loop>

200002ba <copy_data>:
200002ba:	4865      	ldr	r0, [pc, #404]	; (20000450 <ACE_PPE_Flag31_IRQHandler+0x18>)
200002bc:	4965      	ldr	r1, [pc, #404]	; (20000454 <ACE_PPE_Flag31_IRQHandler+0x1c>)
200002be:	4a66      	ldr	r2, [pc, #408]	; (20000458 <ACE_PPE_Flag31_IRQHandler+0x20>)
200002c0:	4288      	cmp	r0, r1
200002c2:	d006      	beq.n	200002d2 <clear_bss>

200002c4 <copy_data_loop>:
200002c4:	4291      	cmp	r1, r2
200002c6:	bf1c      	itt	ne
200002c8:	f850 3b04 	ldrne.w	r3, [r0], #4
200002cc:	f841 3b04 	strne.w	r3, [r1], #4
200002d0:	d1f8      	bne.n	200002c4 <copy_data_loop>

200002d2 <clear_bss>:
200002d2:	4862      	ldr	r0, [pc, #392]	; (2000045c <ACE_PPE_Flag31_IRQHandler+0x24>)
200002d4:	4962      	ldr	r1, [pc, #392]	; (20000460 <ACE_PPE_Flag31_IRQHandler+0x28>)
200002d6:	4a63      	ldr	r2, [pc, #396]	; (20000464 <ACE_PPE_Flag31_IRQHandler+0x2c>)

200002d8 <clear_bss_loop>:
200002d8:	4291      	cmp	r1, r2
200002da:	bf18      	it	ne
200002dc:	f841 0b04 	strne.w	r0, [r1], #4
200002e0:	d1fa      	bne.n	200002d8 <clear_bss_loop>
	...

200002f0 <call_glob_ctor>:
200002f0:	f8df 0174 	ldr.w	r0, [pc, #372]	; 20000468 <ACE_PPE_Flag31_IRQHandler+0x30>
200002f4:	f20f 0e03 	addw	lr, pc, #3
200002f8:	4700      	bx	r0

200002fa <branch_to_main>:
200002fa:	f04f 0000 	mov.w	r0, #0
200002fe:	f04f 0100 	mov.w	r1, #0
20000302:	f8df f168 	ldr.w	pc, [pc, #360]	; 2000046c <ACE_PPE_Flag31_IRQHandler+0x34>

20000306 <ExitLoop>:
20000306:	e7fe      	b.n	20000306 <ExitLoop>

20000308 <NMI_Handler>:
20000308:	e7fe      	b.n	20000308 <NMI_Handler>

2000030a <HardFault_Handler>:
2000030a:	e7fe      	b.n	2000030a <HardFault_Handler>

2000030c <MemManage_Handler>:
2000030c:	e7fe      	b.n	2000030c <MemManage_Handler>

2000030e <BusFault_Handler>:
2000030e:	e7fe      	b.n	2000030e <BusFault_Handler>

20000310 <UsageFault_Handler>:
20000310:	e7fe      	b.n	20000310 <UsageFault_Handler>

20000312 <SVC_Handler>:
20000312:	e7fe      	b.n	20000312 <SVC_Handler>

20000314 <DebugMon_Handler>:
20000314:	e7fe      	b.n	20000314 <DebugMon_Handler>

20000316 <PendSV_Handler>:
20000316:	e7fe      	b.n	20000316 <PendSV_Handler>

20000318 <SysTick_Handler>:
20000318:	e7fe      	b.n	20000318 <SysTick_Handler>

2000031a <WdogWakeup_IRQHandler>:
2000031a:	e7fe      	b.n	2000031a <WdogWakeup_IRQHandler>

2000031c <BrownOut_1_5V_IRQHandler>:
2000031c:	e7fe      	b.n	2000031c <BrownOut_1_5V_IRQHandler>

2000031e <BrownOut_3_3V_IRQHandler>:
2000031e:	e7fe      	b.n	2000031e <BrownOut_3_3V_IRQHandler>

20000320 <RTC_Match_IRQHandler>:
20000320:	e7fe      	b.n	20000320 <RTC_Match_IRQHandler>

20000322 <RTCIF_Pub_IRQHandler>:
20000322:	e7fe      	b.n	20000322 <RTCIF_Pub_IRQHandler>

20000324 <EthernetMAC_IRQHandler>:
20000324:	e7fe      	b.n	20000324 <EthernetMAC_IRQHandler>

20000326 <IAP_IRQHandler>:
20000326:	e7fe      	b.n	20000326 <IAP_IRQHandler>

20000328 <ENVM0_IRQHandler>:
20000328:	e7fe      	b.n	20000328 <ENVM0_IRQHandler>

2000032a <ENVM1_IRQHandler>:
2000032a:	e7fe      	b.n	2000032a <ENVM1_IRQHandler>

2000032c <DMA_IRQHandler>:
2000032c:	e7fe      	b.n	2000032c <DMA_IRQHandler>
2000032e:	e7fe      	b.n	2000032e <DMA_IRQHandler+0x2>
20000330:	e7fe      	b.n	20000330 <DMA_IRQHandler+0x4>

20000332 <SPI0_IRQHandler>:
20000332:	e7fe      	b.n	20000332 <SPI0_IRQHandler>

20000334 <SPI1_IRQHandler>:
20000334:	e7fe      	b.n	20000334 <SPI1_IRQHandler>

20000336 <I2C0_IRQHandler>:
20000336:	e7fe      	b.n	20000336 <I2C0_IRQHandler>

20000338 <I2C0_SMBAlert_IRQHandler>:
20000338:	e7fe      	b.n	20000338 <I2C0_SMBAlert_IRQHandler>

2000033a <I2C0_SMBus_IRQHandler>:
2000033a:	e7fe      	b.n	2000033a <I2C0_SMBus_IRQHandler>

2000033c <I2C1_IRQHandler>:
2000033c:	e7fe      	b.n	2000033c <I2C1_IRQHandler>

2000033e <I2C1_SMBAlert_IRQHandler>:
2000033e:	e7fe      	b.n	2000033e <I2C1_SMBAlert_IRQHandler>

20000340 <I2C1_SMBus_IRQHandler>:
20000340:	e7fe      	b.n	20000340 <I2C1_SMBus_IRQHandler>

20000342 <Timer1_IRQHandler>:
20000342:	e7fe      	b.n	20000342 <Timer1_IRQHandler>

20000344 <Timer2_IRQHandler>:
20000344:	e7fe      	b.n	20000344 <Timer2_IRQHandler>

20000346 <PLL_Lock_IRQHandler>:
20000346:	e7fe      	b.n	20000346 <PLL_Lock_IRQHandler>

20000348 <PLL_LockLost_IRQHandler>:
20000348:	e7fe      	b.n	20000348 <PLL_LockLost_IRQHandler>

2000034a <CommError_IRQHandler>:
2000034a:	e7fe      	b.n	2000034a <CommError_IRQHandler>

2000034c <Fabric_IRQHandler>:
2000034c:	e7fe      	b.n	2000034c <Fabric_IRQHandler>

2000034e <GPIO0_IRQHandler>:
2000034e:	e7fe      	b.n	2000034e <GPIO0_IRQHandler>

20000350 <GPIO1_IRQHandler>:
20000350:	e7fe      	b.n	20000350 <GPIO1_IRQHandler>

20000352 <GPIO2_IRQHandler>:
20000352:	e7fe      	b.n	20000352 <GPIO2_IRQHandler>

20000354 <GPIO3_IRQHandler>:
20000354:	e7fe      	b.n	20000354 <GPIO3_IRQHandler>

20000356 <GPIO4_IRQHandler>:
20000356:	e7fe      	b.n	20000356 <GPIO4_IRQHandler>

20000358 <GPIO5_IRQHandler>:
20000358:	e7fe      	b.n	20000358 <GPIO5_IRQHandler>

2000035a <GPIO6_IRQHandler>:
2000035a:	e7fe      	b.n	2000035a <GPIO6_IRQHandler>

2000035c <GPIO7_IRQHandler>:
2000035c:	e7fe      	b.n	2000035c <GPIO7_IRQHandler>

2000035e <GPIO8_IRQHandler>:
2000035e:	e7fe      	b.n	2000035e <GPIO8_IRQHandler>

20000360 <GPIO9_IRQHandler>:
20000360:	e7fe      	b.n	20000360 <GPIO9_IRQHandler>

20000362 <GPIO10_IRQHandler>:
20000362:	e7fe      	b.n	20000362 <GPIO10_IRQHandler>

20000364 <GPIO11_IRQHandler>:
20000364:	e7fe      	b.n	20000364 <GPIO11_IRQHandler>

20000366 <GPIO12_IRQHandler>:
20000366:	e7fe      	b.n	20000366 <GPIO12_IRQHandler>

20000368 <GPIO13_IRQHandler>:
20000368:	e7fe      	b.n	20000368 <GPIO13_IRQHandler>

2000036a <GPIO14_IRQHandler>:
2000036a:	e7fe      	b.n	2000036a <GPIO14_IRQHandler>

2000036c <GPIO15_IRQHandler>:
2000036c:	e7fe      	b.n	2000036c <GPIO15_IRQHandler>

2000036e <GPIO16_IRQHandler>:
2000036e:	e7fe      	b.n	2000036e <GPIO16_IRQHandler>

20000370 <GPIO17_IRQHandler>:
20000370:	e7fe      	b.n	20000370 <GPIO17_IRQHandler>

20000372 <GPIO18_IRQHandler>:
20000372:	e7fe      	b.n	20000372 <GPIO18_IRQHandler>

20000374 <GPIO19_IRQHandler>:
20000374:	e7fe      	b.n	20000374 <GPIO19_IRQHandler>

20000376 <GPIO20_IRQHandler>:
20000376:	e7fe      	b.n	20000376 <GPIO20_IRQHandler>

20000378 <GPIO21_IRQHandler>:
20000378:	e7fe      	b.n	20000378 <GPIO21_IRQHandler>

2000037a <GPIO22_IRQHandler>:
2000037a:	e7fe      	b.n	2000037a <GPIO22_IRQHandler>

2000037c <GPIO23_IRQHandler>:
2000037c:	e7fe      	b.n	2000037c <GPIO23_IRQHandler>

2000037e <GPIO24_IRQHandler>:
2000037e:	e7fe      	b.n	2000037e <GPIO24_IRQHandler>

20000380 <GPIO25_IRQHandler>:
20000380:	e7fe      	b.n	20000380 <GPIO25_IRQHandler>

20000382 <GPIO26_IRQHandler>:
20000382:	e7fe      	b.n	20000382 <GPIO26_IRQHandler>

20000384 <GPIO27_IRQHandler>:
20000384:	e7fe      	b.n	20000384 <GPIO27_IRQHandler>

20000386 <GPIO28_IRQHandler>:
20000386:	e7fe      	b.n	20000386 <GPIO28_IRQHandler>

20000388 <GPIO29_IRQHandler>:
20000388:	e7fe      	b.n	20000388 <GPIO29_IRQHandler>

2000038a <GPIO30_IRQHandler>:
2000038a:	e7fe      	b.n	2000038a <GPIO30_IRQHandler>

2000038c <GPIO31_IRQHandler>:
2000038c:	e7fe      	b.n	2000038c <GPIO31_IRQHandler>

2000038e <ACE_PC0_Flag0_IRQHandler>:
2000038e:	e7fe      	b.n	2000038e <ACE_PC0_Flag0_IRQHandler>

20000390 <ACE_PC0_Flag1_IRQHandler>:
20000390:	e7fe      	b.n	20000390 <ACE_PC0_Flag1_IRQHandler>

20000392 <ACE_PC0_Flag2_IRQHandler>:
20000392:	e7fe      	b.n	20000392 <ACE_PC0_Flag2_IRQHandler>

20000394 <ACE_PC0_Flag3_IRQHandler>:
20000394:	e7fe      	b.n	20000394 <ACE_PC0_Flag3_IRQHandler>

20000396 <ACE_PC1_Flag0_IRQHandler>:
20000396:	e7fe      	b.n	20000396 <ACE_PC1_Flag0_IRQHandler>

20000398 <ACE_PC1_Flag1_IRQHandler>:
20000398:	e7fe      	b.n	20000398 <ACE_PC1_Flag1_IRQHandler>

2000039a <ACE_PC1_Flag2_IRQHandler>:
2000039a:	e7fe      	b.n	2000039a <ACE_PC1_Flag2_IRQHandler>

2000039c <ACE_PC1_Flag3_IRQHandler>:
2000039c:	e7fe      	b.n	2000039c <ACE_PC1_Flag3_IRQHandler>

2000039e <ACE_PC2_Flag0_IRQHandler>:
2000039e:	e7fe      	b.n	2000039e <ACE_PC2_Flag0_IRQHandler>

200003a0 <ACE_PC2_Flag1_IRQHandler>:
200003a0:	e7fe      	b.n	200003a0 <ACE_PC2_Flag1_IRQHandler>

200003a2 <ACE_PC2_Flag2_IRQHandler>:
200003a2:	e7fe      	b.n	200003a2 <ACE_PC2_Flag2_IRQHandler>

200003a4 <ACE_PC2_Flag3_IRQHandler>:
200003a4:	e7fe      	b.n	200003a4 <ACE_PC2_Flag3_IRQHandler>

200003a6 <ACE_ADC0_DataValid_IRQHandler>:
200003a6:	e7fe      	b.n	200003a6 <ACE_ADC0_DataValid_IRQHandler>

200003a8 <ACE_ADC1_DataValid_IRQHandler>:
200003a8:	e7fe      	b.n	200003a8 <ACE_ADC1_DataValid_IRQHandler>

200003aa <ACE_ADC2_DataValid_IRQHandler>:
200003aa:	e7fe      	b.n	200003aa <ACE_ADC2_DataValid_IRQHandler>

200003ac <ACE_ADC0_CalDone_IRQHandler>:
200003ac:	e7fe      	b.n	200003ac <ACE_ADC0_CalDone_IRQHandler>

200003ae <ACE_ADC1_CalDone_IRQHandler>:
200003ae:	e7fe      	b.n	200003ae <ACE_ADC1_CalDone_IRQHandler>

200003b0 <ACE_ADC2_CalDone_IRQHandler>:
200003b0:	e7fe      	b.n	200003b0 <ACE_ADC2_CalDone_IRQHandler>

200003b2 <ACE_ADC0_CalStart_IRQHandler>:
200003b2:	e7fe      	b.n	200003b2 <ACE_ADC0_CalStart_IRQHandler>

200003b4 <ACE_ADC1_CalStart_IRQHandler>:
200003b4:	e7fe      	b.n	200003b4 <ACE_ADC1_CalStart_IRQHandler>

200003b6 <ACE_ADC2_CalStart_IRQHandler>:
200003b6:	e7fe      	b.n	200003b6 <ACE_ADC2_CalStart_IRQHandler>

200003b8 <ACE_Comp0_Fall_IRQHandler>:
200003b8:	e7fe      	b.n	200003b8 <ACE_Comp0_Fall_IRQHandler>

200003ba <ACE_Comp1_Fall_IRQHandler>:
200003ba:	e7fe      	b.n	200003ba <ACE_Comp1_Fall_IRQHandler>

200003bc <ACE_Comp2_Fall_IRQHandler>:
200003bc:	e7fe      	b.n	200003bc <ACE_Comp2_Fall_IRQHandler>

200003be <ACE_Comp3_Fall_IRQHandler>:
200003be:	e7fe      	b.n	200003be <ACE_Comp3_Fall_IRQHandler>

200003c0 <ACE_Comp4_Fall_IRQHandler>:
200003c0:	e7fe      	b.n	200003c0 <ACE_Comp4_Fall_IRQHandler>

200003c2 <ACE_Comp5_Fall_IRQHandler>:
200003c2:	e7fe      	b.n	200003c2 <ACE_Comp5_Fall_IRQHandler>

200003c4 <ACE_Comp6_Fall_IRQHandler>:
200003c4:	e7fe      	b.n	200003c4 <ACE_Comp6_Fall_IRQHandler>

200003c6 <ACE_Comp7_Fall_IRQHandler>:
200003c6:	e7fe      	b.n	200003c6 <ACE_Comp7_Fall_IRQHandler>

200003c8 <ACE_Comp8_Fall_IRQHandler>:
200003c8:	e7fe      	b.n	200003c8 <ACE_Comp8_Fall_IRQHandler>

200003ca <ACE_Comp9_Fall_IRQHandler>:
200003ca:	e7fe      	b.n	200003ca <ACE_Comp9_Fall_IRQHandler>

200003cc <ACE_Comp10_Fall_IRQHandler>:
200003cc:	e7fe      	b.n	200003cc <ACE_Comp10_Fall_IRQHandler>

200003ce <ACE_Comp11_Fall_IRQHandler>:
200003ce:	e7fe      	b.n	200003ce <ACE_Comp11_Fall_IRQHandler>

200003d0 <ACE_Comp0_Rise_IRQHandler>:
200003d0:	e7fe      	b.n	200003d0 <ACE_Comp0_Rise_IRQHandler>

200003d2 <ACE_Comp1_Rise_IRQHandler>:
200003d2:	e7fe      	b.n	200003d2 <ACE_Comp1_Rise_IRQHandler>

200003d4 <ACE_Comp2_Rise_IRQHandler>:
200003d4:	e7fe      	b.n	200003d4 <ACE_Comp2_Rise_IRQHandler>

200003d6 <ACE_Comp3_Rise_IRQHandler>:
200003d6:	e7fe      	b.n	200003d6 <ACE_Comp3_Rise_IRQHandler>

200003d8 <ACE_Comp4_Rise_IRQHandler>:
200003d8:	e7fe      	b.n	200003d8 <ACE_Comp4_Rise_IRQHandler>

200003da <ACE_Comp5_Rise_IRQHandler>:
200003da:	e7fe      	b.n	200003da <ACE_Comp5_Rise_IRQHandler>

200003dc <ACE_Comp6_Rise_IRQHandler>:
200003dc:	e7fe      	b.n	200003dc <ACE_Comp6_Rise_IRQHandler>

200003de <ACE_Comp7_Rise_IRQHandler>:
200003de:	e7fe      	b.n	200003de <ACE_Comp7_Rise_IRQHandler>

200003e0 <ACE_Comp8_Rise_IRQHandler>:
200003e0:	e7fe      	b.n	200003e0 <ACE_Comp8_Rise_IRQHandler>

200003e2 <ACE_Comp9_Rise_IRQHandler>:
200003e2:	e7fe      	b.n	200003e2 <ACE_Comp9_Rise_IRQHandler>

200003e4 <ACE_Comp10_Rise_IRQHandler>:
200003e4:	e7fe      	b.n	200003e4 <ACE_Comp10_Rise_IRQHandler>

200003e6 <ACE_Comp11_Rise_IRQHandler>:
200003e6:	e7fe      	b.n	200003e6 <ACE_Comp11_Rise_IRQHandler>

200003e8 <ACE_ADC0_FifoFull_IRQHandler>:
200003e8:	e7fe      	b.n	200003e8 <ACE_ADC0_FifoFull_IRQHandler>

200003ea <ACE_ADC0_FifoAFull_IRQHandler>:
200003ea:	e7fe      	b.n	200003ea <ACE_ADC0_FifoAFull_IRQHandler>

200003ec <ACE_ADC0_FifoEmpty_IRQHandler>:
200003ec:	e7fe      	b.n	200003ec <ACE_ADC0_FifoEmpty_IRQHandler>

200003ee <ACE_ADC1_FifoFull_IRQHandler>:
200003ee:	e7fe      	b.n	200003ee <ACE_ADC1_FifoFull_IRQHandler>

200003f0 <ACE_ADC1_FifoAFull_IRQHandler>:
200003f0:	e7fe      	b.n	200003f0 <ACE_ADC1_FifoAFull_IRQHandler>

200003f2 <ACE_ADC1_FifoEmpty_IRQHandler>:
200003f2:	e7fe      	b.n	200003f2 <ACE_ADC1_FifoEmpty_IRQHandler>

200003f4 <ACE_ADC2_FifoFull_IRQHandler>:
200003f4:	e7fe      	b.n	200003f4 <ACE_ADC2_FifoFull_IRQHandler>

200003f6 <ACE_ADC2_FifoAFull_IRQHandler>:
200003f6:	e7fe      	b.n	200003f6 <ACE_ADC2_FifoAFull_IRQHandler>

200003f8 <ACE_ADC2_FifoEmpty_IRQHandler>:
200003f8:	e7fe      	b.n	200003f8 <ACE_ADC2_FifoEmpty_IRQHandler>

200003fa <ACE_PPE_Flag0_IRQHandler>:
200003fa:	e7fe      	b.n	200003fa <ACE_PPE_Flag0_IRQHandler>

200003fc <ACE_PPE_Flag1_IRQHandler>:
200003fc:	e7fe      	b.n	200003fc <ACE_PPE_Flag1_IRQHandler>

200003fe <ACE_PPE_Flag2_IRQHandler>:
200003fe:	e7fe      	b.n	200003fe <ACE_PPE_Flag2_IRQHandler>

20000400 <ACE_PPE_Flag3_IRQHandler>:
20000400:	e7fe      	b.n	20000400 <ACE_PPE_Flag3_IRQHandler>

20000402 <ACE_PPE_Flag4_IRQHandler>:
20000402:	e7fe      	b.n	20000402 <ACE_PPE_Flag4_IRQHandler>

20000404 <ACE_PPE_Flag5_IRQHandler>:
20000404:	e7fe      	b.n	20000404 <ACE_PPE_Flag5_IRQHandler>

20000406 <ACE_PPE_Flag6_IRQHandler>:
20000406:	e7fe      	b.n	20000406 <ACE_PPE_Flag6_IRQHandler>

20000408 <ACE_PPE_Flag7_IRQHandler>:
20000408:	e7fe      	b.n	20000408 <ACE_PPE_Flag7_IRQHandler>

2000040a <ACE_PPE_Flag8_IRQHandler>:
2000040a:	e7fe      	b.n	2000040a <ACE_PPE_Flag8_IRQHandler>

2000040c <ACE_PPE_Flag9_IRQHandler>:
2000040c:	e7fe      	b.n	2000040c <ACE_PPE_Flag9_IRQHandler>

2000040e <ACE_PPE_Flag10_IRQHandler>:
2000040e:	e7fe      	b.n	2000040e <ACE_PPE_Flag10_IRQHandler>

20000410 <ACE_PPE_Flag11_IRQHandler>:
20000410:	e7fe      	b.n	20000410 <ACE_PPE_Flag11_IRQHandler>

20000412 <ACE_PPE_Flag12_IRQHandler>:
20000412:	e7fe      	b.n	20000412 <ACE_PPE_Flag12_IRQHandler>

20000414 <ACE_PPE_Flag13_IRQHandler>:
20000414:	e7fe      	b.n	20000414 <ACE_PPE_Flag13_IRQHandler>

20000416 <ACE_PPE_Flag14_IRQHandler>:
20000416:	e7fe      	b.n	20000416 <ACE_PPE_Flag14_IRQHandler>

20000418 <ACE_PPE_Flag15_IRQHandler>:
20000418:	e7fe      	b.n	20000418 <ACE_PPE_Flag15_IRQHandler>

2000041a <ACE_PPE_Flag16_IRQHandler>:
2000041a:	e7fe      	b.n	2000041a <ACE_PPE_Flag16_IRQHandler>

2000041c <ACE_PPE_Flag17_IRQHandler>:
2000041c:	e7fe      	b.n	2000041c <ACE_PPE_Flag17_IRQHandler>

2000041e <ACE_PPE_Flag18_IRQHandler>:
2000041e:	e7fe      	b.n	2000041e <ACE_PPE_Flag18_IRQHandler>

20000420 <ACE_PPE_Flag19_IRQHandler>:
20000420:	e7fe      	b.n	20000420 <ACE_PPE_Flag19_IRQHandler>

20000422 <ACE_PPE_Flag20_IRQHandler>:
20000422:	e7fe      	b.n	20000422 <ACE_PPE_Flag20_IRQHandler>

20000424 <ACE_PPE_Flag21_IRQHandler>:
20000424:	e7fe      	b.n	20000424 <ACE_PPE_Flag21_IRQHandler>

20000426 <ACE_PPE_Flag22_IRQHandler>:
20000426:	e7fe      	b.n	20000426 <ACE_PPE_Flag22_IRQHandler>

20000428 <ACE_PPE_Flag23_IRQHandler>:
20000428:	e7fe      	b.n	20000428 <ACE_PPE_Flag23_IRQHandler>

2000042a <ACE_PPE_Flag24_IRQHandler>:
2000042a:	e7fe      	b.n	2000042a <ACE_PPE_Flag24_IRQHandler>

2000042c <ACE_PPE_Flag25_IRQHandler>:
2000042c:	e7fe      	b.n	2000042c <ACE_PPE_Flag25_IRQHandler>

2000042e <ACE_PPE_Flag26_IRQHandler>:
2000042e:	e7fe      	b.n	2000042e <ACE_PPE_Flag26_IRQHandler>

20000430 <ACE_PPE_Flag27_IRQHandler>:
20000430:	e7fe      	b.n	20000430 <ACE_PPE_Flag27_IRQHandler>

20000432 <ACE_PPE_Flag28_IRQHandler>:
20000432:	e7fe      	b.n	20000432 <ACE_PPE_Flag28_IRQHandler>

20000434 <ACE_PPE_Flag29_IRQHandler>:
20000434:	e7fe      	b.n	20000434 <ACE_PPE_Flag29_IRQHandler>

20000436 <ACE_PPE_Flag30_IRQHandler>:
20000436:	e7fe      	b.n	20000436 <ACE_PPE_Flag30_IRQHandler>

20000438 <ACE_PPE_Flag31_IRQHandler>:
20000438:	e7fe      	b.n	20000438 <ACE_PPE_Flag31_IRQHandler>
2000043a:	0000      	.short	0x0000
2000043c:	20000a89 	.word	0x20000a89
20000440:	00000000 	.word	0x00000000
20000444:	20000000 	.word	0x20000000
20000448:	20000000 	.word	0x20000000
2000044c:	20000d54 	.word	0x20000d54
20000450:	20000d54 	.word	0x20000d54
20000454:	20000d54 	.word	0x20000d54
20000458:	20000d70 	.word	0x20000d70
2000045c:	00000000 	.word	0x00000000
20000460:	20000d70 	.word	0x20000d70
20000464:	20000dc8 	.word	0x20000dc8
20000468:	20000ccd 	.word	0x20000ccd
2000046c:	200004a1 	.word	0x200004a1

20000470 <__do_global_dtors_aux>:
20000470:	f640 5370 	movw	r3, #3440	; 0xd70
20000474:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000478:	781a      	ldrb	r2, [r3, #0]
2000047a:	b90a      	cbnz	r2, 20000480 <__do_global_dtors_aux+0x10>
2000047c:	2001      	movs	r0, #1
2000047e:	7018      	strb	r0, [r3, #0]
20000480:	4770      	bx	lr
20000482:	bf00      	nop

20000484 <frame_dummy>:
20000484:	f640 5054 	movw	r0, #3412	; 0xd54
20000488:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000048c:	b508      	push	{r3, lr}
2000048e:	6803      	ldr	r3, [r0, #0]
20000490:	b12b      	cbz	r3, 2000049e <frame_dummy+0x1a>
20000492:	f240 0300 	movw	r3, #0
20000496:	f2c0 0300 	movt	r3, #0
2000049a:	b103      	cbz	r3, 2000049e <frame_dummy+0x1a>
2000049c:	4798      	blx	r3
2000049e:	bd08      	pop	{r3, pc}

200004a0 <main>:
#include "drivers/mss_uart/mss_uart.h"

#define TFMINI_ADDR 0x10

int main()
{
200004a0:	b580      	push	{r7, lr}
200004a2:	b082      	sub	sp, #8
200004a4:	af00      	add	r7, sp, #0
	MSS_UART_init
200004a6:	f640 5074 	movw	r0, #3444	; 0xd74
200004aa:	f2c2 0000 	movt	r0, #8192	; 0x2000
200004ae:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
200004b2:	f04f 0203 	mov.w	r2, #3
200004b6:	f000 f835 	bl	20000524 <MSS_UART_init>
	         &g_mss_uart1,
	         MSS_UART_115200_BAUD,
	         MSS_UART_DATA_8_BITS | MSS_UART_NO_PARITY | MSS_UART_ONE_STOP_BIT
	     );

    uint8_t setup_buffer[8] = {0x42, 0x57, 0x02, 0x00, 0x00, 0x00, 0x01, 0x06};
200004ba:	f640 531c 	movw	r3, #3356	; 0xd1c
200004be:	f2c2 0300 	movt	r3, #8192	; 0x2000
200004c2:	463a      	mov	r2, r7
200004c4:	e893 0003 	ldmia.w	r3, {r0, r1}
200004c8:	e882 0003 	stmia.w	r2, {r0, r1}

    MSS_UART_polled_tx( &g_mss_uart1, setup_buffer, sizeof(setup_buffer) );
200004cc:	463b      	mov	r3, r7
200004ce:	f640 5074 	movw	r0, #3444	; 0xd74
200004d2:	f2c2 0000 	movt	r0, #8192	; 0x2000
200004d6:	4619      	mov	r1, r3
200004d8:	f04f 0208 	mov.w	r2, #8
200004dc:	f000 f924 	bl	20000728 <MSS_UART_polled_tx>
}
200004e0:	f107 0708 	add.w	r7, r7, #8
200004e4:	46bd      	mov	sp, r7
200004e6:	bd80      	pop	{r7, pc}

200004e8 <NVIC_ClearPendingIRQ>:
 *
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
200004e8:	b480      	push	{r7}
200004ea:	b083      	sub	sp, #12
200004ec:	af00      	add	r7, sp, #0
200004ee:	4603      	mov	r3, r0
200004f0:	80fb      	strh	r3, [r7, #6]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
200004f2:	f24e 1300 	movw	r3, #57600	; 0xe100
200004f6:	f2ce 0300 	movt	r3, #57344	; 0xe000
200004fa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
200004fe:	ea4f 1252 	mov.w	r2, r2, lsr #5
20000502:	88f9      	ldrh	r1, [r7, #6]
20000504:	f001 011f 	and.w	r1, r1, #31
20000508:	f04f 0001 	mov.w	r0, #1
2000050c:	fa00 f101 	lsl.w	r1, r0, r1
20000510:	f102 0260 	add.w	r2, r2, #96	; 0x60
20000514:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20000518:	f107 070c 	add.w	r7, r7, #12
2000051c:	46bd      	mov	sp, r7
2000051e:	bc80      	pop	{r7}
20000520:	4770      	bx	lr
20000522:	bf00      	nop

20000524 <MSS_UART_init>:
(
    mss_uart_instance_t* this_uart,
    uint32_t baud_rate,
    uint8_t line_config
)
{
20000524:	b580      	push	{r7, lr}
20000526:	b088      	sub	sp, #32
20000528:	af00      	add	r7, sp, #0
2000052a:	60f8      	str	r0, [r7, #12]
2000052c:	60b9      	str	r1, [r7, #8]
2000052e:	4613      	mov	r3, r2
20000530:	71fb      	strb	r3, [r7, #7]
    uint16_t baud_value = 1U;
20000532:	f04f 0301 	mov.w	r3, #1
20000536:	82fb      	strh	r3, [r7, #22]
    uint32_t pclk_freq = 0U;
20000538:	f04f 0300 	mov.w	r3, #0
2000053c:	61bb      	str	r3, [r7, #24]
    uint32_t baud_value_l;

    /* The driver expects g_mss_uart0 and g_mss_uart1 to be the only
     * mss_uart_instance_t instances used to identify UART0 and UART1. */
    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
2000053e:	68fa      	ldr	r2, [r7, #12]
20000540:	f640 539c 	movw	r3, #3484	; 0xd9c
20000544:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000548:	429a      	cmp	r2, r3
2000054a:	d007      	beq.n	2000055c <MSS_UART_init+0x38>
2000054c:	68fa      	ldr	r2, [r7, #12]
2000054e:	f640 5374 	movw	r3, #3444	; 0xd74
20000552:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000556:	429a      	cmp	r2, r3
20000558:	d000      	beq.n	2000055c <MSS_UART_init+0x38>
2000055a:	be00      	bkpt	0x0000

    /* baud_rate should be greater than 0 */
    ASSERT( 0U < baud_rate );
2000055c:	68bb      	ldr	r3, [r7, #8]
2000055e:	2b00      	cmp	r3, #0
20000560:	d100      	bne.n	20000564 <MSS_UART_init+0x40>
20000562:	be00      	bkpt	0x0000

    /* Force the value of the CMSIS global variables holding the various system
     * clock frequencies to be updated. */
    SystemCoreClockUpdate();
20000564:	f000 fa96 	bl	20000a94 <SystemCoreClockUpdate>

    if ( this_uart == &g_mss_uart0 )
20000568:	68fa      	ldr	r2, [r7, #12]
2000056a:	f640 539c 	movw	r3, #3484	; 0xd9c
2000056e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000572:	429a      	cmp	r2, r3
20000574:	d12e      	bne.n	200005d4 <MSS_UART_init+0xb0>
    {
        this_uart->hw_reg = UART0;
20000576:	68fb      	ldr	r3, [r7, #12]
20000578:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
2000057c:	601a      	str	r2, [r3, #0]
        this_uart->hw_reg_bit = UART0_BITBAND;
2000057e:	68fb      	ldr	r3, [r7, #12]
20000580:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
20000584:	605a      	str	r2, [r3, #4]
        this_uart->irqn = UART0_IRQn;
20000586:	68fb      	ldr	r3, [r7, #12]
20000588:	f04f 020a 	mov.w	r2, #10
2000058c:	811a      	strh	r2, [r3, #8]

        pclk_freq = g_FrequencyPCLK0;
2000058e:	f640 5360 	movw	r3, #3424	; 0xd60
20000592:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000596:	681b      	ldr	r3, [r3, #0]
20000598:	61bb      	str	r3, [r7, #24]

        /* reset UART0 */
        SYSREG->SOFT_RST_CR |= SYSREG_UART0_SOFTRESET_MASK;
2000059a:	f242 0300 	movw	r3, #8192	; 0x2000
2000059e:	f2ce 0304 	movt	r3, #57348	; 0xe004
200005a2:	f242 0200 	movw	r2, #8192	; 0x2000
200005a6:	f2ce 0204 	movt	r2, #57348	; 0xe004
200005aa:	6b12      	ldr	r2, [r2, #48]	; 0x30
200005ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
200005b0:	631a      	str	r2, [r3, #48]	; 0x30
        /* Clear any previously pended UART0 interrupt */
        NVIC_ClearPendingIRQ( UART0_IRQn );
200005b2:	f04f 000a 	mov.w	r0, #10
200005b6:	f7ff ff97 	bl	200004e8 <NVIC_ClearPendingIRQ>
        /* Take UART0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_UART0_SOFTRESET_MASK;
200005ba:	f242 0300 	movw	r3, #8192	; 0x2000
200005be:	f2ce 0304 	movt	r3, #57348	; 0xe004
200005c2:	f242 0200 	movw	r2, #8192	; 0x2000
200005c6:	f2ce 0204 	movt	r2, #57348	; 0xe004
200005ca:	6b12      	ldr	r2, [r2, #48]	; 0x30
200005cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
200005d0:	631a      	str	r2, [r3, #48]	; 0x30
200005d2:	e031      	b.n	20000638 <MSS_UART_init+0x114>
    }
    else
    {
        this_uart->hw_reg = UART1;
200005d4:	68fa      	ldr	r2, [r7, #12]
200005d6:	f240 0300 	movw	r3, #0
200005da:	f2c4 0301 	movt	r3, #16385	; 0x4001
200005de:	6013      	str	r3, [r2, #0]
        this_uart->hw_reg_bit = UART1_BITBAND;
200005e0:	68fa      	ldr	r2, [r7, #12]
200005e2:	f240 0300 	movw	r3, #0
200005e6:	f2c4 2320 	movt	r3, #16928	; 0x4220
200005ea:	6053      	str	r3, [r2, #4]
        this_uart->irqn = UART1_IRQn;
200005ec:	68fb      	ldr	r3, [r7, #12]
200005ee:	f04f 020b 	mov.w	r2, #11
200005f2:	811a      	strh	r2, [r3, #8]

        pclk_freq = g_FrequencyPCLK1;
200005f4:	f640 5364 	movw	r3, #3428	; 0xd64
200005f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200005fc:	681b      	ldr	r3, [r3, #0]
200005fe:	61bb      	str	r3, [r7, #24]

        /* Reset UART1 */
        SYSREG->SOFT_RST_CR |= SYSREG_UART1_SOFTRESET_MASK;
20000600:	f242 0300 	movw	r3, #8192	; 0x2000
20000604:	f2ce 0304 	movt	r3, #57348	; 0xe004
20000608:	f242 0200 	movw	r2, #8192	; 0x2000
2000060c:	f2ce 0204 	movt	r2, #57348	; 0xe004
20000610:	6b12      	ldr	r2, [r2, #48]	; 0x30
20000612:	f442 7280 	orr.w	r2, r2, #256	; 0x100
20000616:	631a      	str	r2, [r3, #48]	; 0x30
        /* Clear any previously pended UART1 interrupt */
        NVIC_ClearPendingIRQ( UART1_IRQn );
20000618:	f04f 000b 	mov.w	r0, #11
2000061c:	f7ff ff64 	bl	200004e8 <NVIC_ClearPendingIRQ>
        /* Take UART1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_UART1_SOFTRESET_MASK;
20000620:	f242 0300 	movw	r3, #8192	; 0x2000
20000624:	f2ce 0304 	movt	r3, #57348	; 0xe004
20000628:	f242 0200 	movw	r2, #8192	; 0x2000
2000062c:	f2ce 0204 	movt	r2, #57348	; 0xe004
20000630:	6b12      	ldr	r2, [r2, #48]	; 0x30
20000632:	f422 7280 	bic.w	r2, r2, #256	; 0x100
20000636:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* disable interrupts */
    this_uart->hw_reg->IER = 0U;
20000638:	68fb      	ldr	r3, [r7, #12]
2000063a:	681b      	ldr	r3, [r3, #0]
2000063c:	f04f 0200 	mov.w	r2, #0
20000640:	711a      	strb	r2, [r3, #4]
     * The baud value is computed using the following equation:
     *      baud_value_l = PCLK_Frequency / (baud_rate * 16)
     * The baud value is rounded up or down depending on what would be the remainder
     * of the divide by 16 operation.
     */
    if( 0U < baud_rate )
20000642:	68bb      	ldr	r3, [r7, #8]
20000644:	2b00      	cmp	r3, #0
20000646:	d021      	beq.n	2000068c <MSS_UART_init+0x168>
    {
        baud_value_l = (uint32_t)(pclk_freq / baud_rate);
20000648:	69ba      	ldr	r2, [r7, #24]
2000064a:	68bb      	ldr	r3, [r7, #8]
2000064c:	fbb2 f3f3 	udiv	r3, r2, r3
20000650:	61fb      	str	r3, [r7, #28]
        if( baud_value_l & 0x00000008U )
20000652:	69fb      	ldr	r3, [r7, #28]
20000654:	f003 0308 	and.w	r3, r3, #8
20000658:	2b00      	cmp	r3, #0
2000065a:	d006      	beq.n	2000066a <MSS_UART_init+0x146>
        {
            /* remainder above 0.5 */
            baud_value_l = (baud_value_l >> 4U) + 1U;        
2000065c:	69fb      	ldr	r3, [r7, #28]
2000065e:	ea4f 1313 	mov.w	r3, r3, lsr #4
20000662:	f103 0301 	add.w	r3, r3, #1
20000666:	61fb      	str	r3, [r7, #28]
20000668:	e003      	b.n	20000672 <MSS_UART_init+0x14e>
        }
        else
        {
            /* remainder below 0.5 */
            baud_value_l = (baud_value_l >> 4U);
2000066a:	69fb      	ldr	r3, [r7, #28]
2000066c:	ea4f 1313 	mov.w	r3, r3, lsr #4
20000670:	61fb      	str	r3, [r7, #28]
        }
    
        /* Check if the baud rate is supported by the PCLK */
        ASSERT( baud_value_l <= UINT16_MAX);
20000672:	69fa      	ldr	r2, [r7, #28]
20000674:	f64f 73ff 	movw	r3, #65535	; 0xffff
20000678:	429a      	cmp	r2, r3
2000067a:	d900      	bls.n	2000067e <MSS_UART_init+0x15a>
2000067c:	be00      	bkpt	0x0000
        if( baud_value_l <= (uint32_t)UINT16_MAX)
2000067e:	69fa      	ldr	r2, [r7, #28]
20000680:	f64f 73ff 	movw	r3, #65535	; 0xffff
20000684:	429a      	cmp	r2, r3
20000686:	d801      	bhi.n	2000068c <MSS_UART_init+0x168>
        {
            baud_value = (uint16_t)baud_value_l;
20000688:	69fb      	ldr	r3, [r7, #28]
2000068a:	82fb      	strh	r3, [r7, #22]
        }
    }
    
    /* set divisor latch */
    this_uart->hw_reg_bit->LCR_DLAB = (uint32_t)1;
2000068c:	68fb      	ldr	r3, [r7, #12]
2000068e:	685b      	ldr	r3, [r3, #4]
20000690:	f04f 0201 	mov.w	r2, #1
20000694:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c

    /* msb of baud value */
    this_uart->hw_reg->DMR = (uint8_t)(baud_value >> 8);
20000698:	68fb      	ldr	r3, [r7, #12]
2000069a:	681b      	ldr	r3, [r3, #0]
2000069c:	8afa      	ldrh	r2, [r7, #22]
2000069e:	ea4f 2212 	mov.w	r2, r2, lsr #8
200006a2:	b292      	uxth	r2, r2
200006a4:	b2d2      	uxtb	r2, r2
200006a6:	711a      	strb	r2, [r3, #4]
    /* lsb of baud value */
    this_uart->hw_reg->DLR = (uint8_t)baud_value;
200006a8:	68fb      	ldr	r3, [r7, #12]
200006aa:	681b      	ldr	r3, [r3, #0]
200006ac:	8afa      	ldrh	r2, [r7, #22]
200006ae:	b2d2      	uxtb	r2, r2
200006b0:	701a      	strb	r2, [r3, #0]

    /* reset divisor latch */
    this_uart->hw_reg_bit->LCR_DLAB = (uint32_t)0;
200006b2:	68fb      	ldr	r3, [r7, #12]
200006b4:	685b      	ldr	r3, [r3, #4]
200006b6:	f04f 0200 	mov.w	r2, #0
200006ba:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c

    /* set the line control register (bit length, stop bits, parity) */
    this_uart->hw_reg->LCR = line_config;
200006be:	68fb      	ldr	r3, [r7, #12]
200006c0:	681b      	ldr	r3, [r3, #0]
200006c2:	79fa      	ldrb	r2, [r7, #7]
200006c4:	731a      	strb	r2, [r3, #12]

    /* FIFO configuration */
    /* RX FIFO length = 1 byte, clear receiver FIFO, 
       clear transmitter FIFO, enable RXRDYN and TXRDYN pins. */
    this_uart->hw_reg->FCR = (uint8_t)MSS_UART_FIFO_SINGLE_BYTE | 
200006c6:	68fb      	ldr	r3, [r7, #12]
200006c8:	681b      	ldr	r3, [r3, #0]
200006ca:	f04f 020e 	mov.w	r2, #14
200006ce:	721a      	strb	r2, [r3, #8]
                              FCR_CLEAR_RX_FIFO_MASK | FCR_CLEAR_TX_FIFO_MASK | 
                              FCR_ENABLE_TXRDY_RXRDY_MASK;
    /* disable loopback */
    this_uart->hw_reg_bit->MCR_LOOP = (uint32_t)0;
200006d0:	68fb      	ldr	r3, [r7, #12]
200006d2:	685b      	ldr	r3, [r3, #4]
200006d4:	f04f 0200 	mov.w	r2, #0
200006d8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

    /* Instance setup */
    this_uart->tx_buff_size = TX_COMPLETE;
200006dc:	68fb      	ldr	r3, [r7, #12]
200006de:	f04f 0200 	mov.w	r2, #0
200006e2:	611a      	str	r2, [r3, #16]
    this_uart->tx_buffer = (const uint8_t *)0;
200006e4:	68fb      	ldr	r3, [r7, #12]
200006e6:	f04f 0200 	mov.w	r2, #0
200006ea:	60da      	str	r2, [r3, #12]
    this_uart->tx_idx = 0U;
200006ec:	68fb      	ldr	r3, [r7, #12]
200006ee:	f04f 0200 	mov.w	r2, #0
200006f2:	615a      	str	r2, [r3, #20]

    /* Default handlers for MSS UART interrupts */
    this_uart->rx_handler       = NULL_HANDLER;
200006f4:	68fb      	ldr	r3, [r7, #12]
200006f6:	f04f 0200 	mov.w	r2, #0
200006fa:	61da      	str	r2, [r3, #28]
    this_uart->tx_handler       = default_tx_handler;
200006fc:	68fa      	ldr	r2, [r7, #12]
200006fe:	f640 1329 	movw	r3, #2345	; 0x929
20000702:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000706:	6213      	str	r3, [r2, #32]
    this_uart->linests_handler  = NULL_HANDLER;
20000708:	68fb      	ldr	r3, [r7, #12]
2000070a:	f04f 0200 	mov.w	r2, #0
2000070e:	619a      	str	r2, [r3, #24]
    this_uart->modemsts_handler = NULL_HANDLER;
20000710:	68fb      	ldr	r3, [r7, #12]
20000712:	f04f 0200 	mov.w	r2, #0
20000716:	625a      	str	r2, [r3, #36]	; 0x24

    /* Initialize the sticky status */
    this_uart->status = 0U;
20000718:	68fb      	ldr	r3, [r7, #12]
2000071a:	f04f 0200 	mov.w	r2, #0
2000071e:	729a      	strb	r2, [r3, #10]
}
20000720:	f107 0720 	add.w	r7, r7, #32
20000724:	46bd      	mov	sp, r7
20000726:	bd80      	pop	{r7, pc}

20000728 <MSS_UART_polled_tx>:
(
    mss_uart_instance_t * this_uart,
    const uint8_t * pbuff,
    uint32_t tx_size
)
{
20000728:	b480      	push	{r7}
2000072a:	b089      	sub	sp, #36	; 0x24
2000072c:	af00      	add	r7, sp, #0
2000072e:	60f8      	str	r0, [r7, #12]
20000730:	60b9      	str	r1, [r7, #8]
20000732:	607a      	str	r2, [r7, #4]
    uint32_t char_idx = 0U;
20000734:	f04f 0300 	mov.w	r3, #0
20000738:	613b      	str	r3, [r7, #16]
    uint32_t size_sent;
    uint8_t status;

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
2000073a:	68fa      	ldr	r2, [r7, #12]
2000073c:	f640 539c 	movw	r3, #3484	; 0xd9c
20000740:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000744:	429a      	cmp	r2, r3
20000746:	d007      	beq.n	20000758 <MSS_UART_polled_tx+0x30>
20000748:	68fa      	ldr	r2, [r7, #12]
2000074a:	f640 5374 	movw	r3, #3444	; 0xd74
2000074e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000752:	429a      	cmp	r2, r3
20000754:	d000      	beq.n	20000758 <MSS_UART_polled_tx+0x30>
20000756:	be00      	bkpt	0x0000
    ASSERT( pbuff != ( (uint8_t *)0 ) );
20000758:	68bb      	ldr	r3, [r7, #8]
2000075a:	2b00      	cmp	r3, #0
2000075c:	d100      	bne.n	20000760 <MSS_UART_polled_tx+0x38>
2000075e:	be00      	bkpt	0x0000
    ASSERT( tx_size > 0U );
20000760:	687b      	ldr	r3, [r7, #4]
20000762:	2b00      	cmp	r3, #0
20000764:	d100      	bne.n	20000768 <MSS_UART_polled_tx+0x40>
20000766:	be00      	bkpt	0x0000

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
20000768:	68fa      	ldr	r2, [r7, #12]
2000076a:	f640 539c 	movw	r3, #3484	; 0xd9c
2000076e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000772:	429a      	cmp	r2, r3
20000774:	d006      	beq.n	20000784 <MSS_UART_polled_tx+0x5c>
20000776:	68fa      	ldr	r2, [r7, #12]
20000778:	f640 5374 	movw	r3, #3444	; 0xd74
2000077c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000780:	429a      	cmp	r2, r3
20000782:	d13d      	bne.n	20000800 <MSS_UART_polled_tx+0xd8>
20000784:	68bb      	ldr	r3, [r7, #8]
20000786:	2b00      	cmp	r3, #0
20000788:	d03a      	beq.n	20000800 <MSS_UART_polled_tx+0xd8>
2000078a:	687b      	ldr	r3, [r7, #4]
2000078c:	2b00      	cmp	r3, #0
2000078e:	d037      	beq.n	20000800 <MSS_UART_polled_tx+0xd8>
         /* Remain in this loop until the entire input buffer
          * has been transferred to the UART.
          */
        do {
            /* Read the Line Status Register and update the sticky record */
            status = this_uart->hw_reg->LSR;
20000790:	68fb      	ldr	r3, [r7, #12]
20000792:	681b      	ldr	r3, [r3, #0]
20000794:	7d1b      	ldrb	r3, [r3, #20]
20000796:	76fb      	strb	r3, [r7, #27]
            this_uart->status |= status;
20000798:	68fb      	ldr	r3, [r7, #12]
2000079a:	7a9a      	ldrb	r2, [r3, #10]
2000079c:	7efb      	ldrb	r3, [r7, #27]
2000079e:	ea42 0303 	orr.w	r3, r2, r3
200007a2:	b2da      	uxtb	r2, r3
200007a4:	68fb      	ldr	r3, [r7, #12]
200007a6:	729a      	strb	r2, [r3, #10]

            /* Check if TX FIFO is empty. */
            if( status & MSS_UART_THRE )
200007a8:	7efb      	ldrb	r3, [r7, #27]
200007aa:	f003 0320 	and.w	r3, r3, #32
200007ae:	2b00      	cmp	r3, #0
200007b0:	d023      	beq.n	200007fa <MSS_UART_polled_tx+0xd2>
            {
                uint32_t fill_size = TX_FIFO_SIZE;
200007b2:	f04f 0310 	mov.w	r3, #16
200007b6:	61fb      	str	r3, [r7, #28]

                /* Calculate the number of bytes to transmit. */
                if ( tx_size < TX_FIFO_SIZE )
200007b8:	687b      	ldr	r3, [r7, #4]
200007ba:	2b0f      	cmp	r3, #15
200007bc:	d801      	bhi.n	200007c2 <MSS_UART_polled_tx+0x9a>
                {
                    fill_size = tx_size;
200007be:	687b      	ldr	r3, [r7, #4]
200007c0:	61fb      	str	r3, [r7, #28]
                }

                /* Fill the TX FIFO with the calculated the number of bytes. */
                for ( size_sent = 0U; size_sent < fill_size; ++size_sent )
200007c2:	f04f 0300 	mov.w	r3, #0
200007c6:	617b      	str	r3, [r7, #20]
200007c8:	e00e      	b.n	200007e8 <MSS_UART_polled_tx+0xc0>
                {
                    /* Send next character in the buffer. */
                    this_uart->hw_reg->THR = pbuff[char_idx++];
200007ca:	68fb      	ldr	r3, [r7, #12]
200007cc:	681b      	ldr	r3, [r3, #0]
200007ce:	68b9      	ldr	r1, [r7, #8]
200007d0:	693a      	ldr	r2, [r7, #16]
200007d2:	440a      	add	r2, r1
200007d4:	7812      	ldrb	r2, [r2, #0]
200007d6:	701a      	strb	r2, [r3, #0]
200007d8:	693b      	ldr	r3, [r7, #16]
200007da:	f103 0301 	add.w	r3, r3, #1
200007de:	613b      	str	r3, [r7, #16]
                {
                    fill_size = tx_size;
                }

                /* Fill the TX FIFO with the calculated the number of bytes. */
                for ( size_sent = 0U; size_sent < fill_size; ++size_sent )
200007e0:	697b      	ldr	r3, [r7, #20]
200007e2:	f103 0301 	add.w	r3, r3, #1
200007e6:	617b      	str	r3, [r7, #20]
200007e8:	697a      	ldr	r2, [r7, #20]
200007ea:	69fb      	ldr	r3, [r7, #28]
200007ec:	429a      	cmp	r2, r3
200007ee:	d3ec      	bcc.n	200007ca <MSS_UART_polled_tx+0xa2>
                    /* Send next character in the buffer. */
                    this_uart->hw_reg->THR = pbuff[char_idx++];
                }

                /* Calculate the number of untransmitted bytes remaining. */
                tx_size -= size_sent;
200007f0:	687a      	ldr	r2, [r7, #4]
200007f2:	697b      	ldr	r3, [r7, #20]
200007f4:	ebc3 0302 	rsb	r3, r3, r2
200007f8:	607b      	str	r3, [r7, #4]
            }
        }while( tx_size );
200007fa:	687b      	ldr	r3, [r7, #4]
200007fc:	2b00      	cmp	r3, #0
200007fe:	d1c7      	bne.n	20000790 <MSS_UART_polled_tx+0x68>
    }
}
20000800:	f107 0724 	add.w	r7, r7, #36	; 0x24
20000804:	46bd      	mov	sp, r7
20000806:	bc80      	pop	{r7}
20000808:	4770      	bx	lr
2000080a:	bf00      	nop

2000080c <MSS_UART_isr>:
static void
MSS_UART_isr
(
    mss_uart_instance_t * this_uart
)
{
2000080c:	b580      	push	{r7, lr}
2000080e:	b084      	sub	sp, #16
20000810:	af00      	add	r7, sp, #0
20000812:	6078      	str	r0, [r7, #4]
    uint8_t iirf;

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
20000814:	687a      	ldr	r2, [r7, #4]
20000816:	f640 539c 	movw	r3, #3484	; 0xd9c
2000081a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000081e:	429a      	cmp	r2, r3
20000820:	d007      	beq.n	20000832 <MSS_UART_isr+0x26>
20000822:	687a      	ldr	r2, [r7, #4]
20000824:	f640 5374 	movw	r3, #3444	; 0xd74
20000828:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000082c:	429a      	cmp	r2, r3
2000082e:	d000      	beq.n	20000832 <MSS_UART_isr+0x26>
20000830:	be00      	bkpt	0x0000

    if ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) )
20000832:	687a      	ldr	r2, [r7, #4]
20000834:	f640 539c 	movw	r3, #3484	; 0xd9c
20000838:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000083c:	429a      	cmp	r2, r3
2000083e:	d006      	beq.n	2000084e <MSS_UART_isr+0x42>
20000840:	687a      	ldr	r2, [r7, #4]
20000842:	f640 5374 	movw	r3, #3444	; 0xd74
20000846:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000084a:	429a      	cmp	r2, r3
2000084c:	d167      	bne.n	2000091e <MSS_UART_isr+0x112>
    {
        iirf = this_uart->hw_reg->IIR & IIRF_MASK;
2000084e:	687b      	ldr	r3, [r7, #4]
20000850:	681b      	ldr	r3, [r3, #0]
20000852:	7a1b      	ldrb	r3, [r3, #8]
20000854:	b2db      	uxtb	r3, r3
20000856:	f003 030f 	and.w	r3, r3, #15
2000085a:	73fb      	strb	r3, [r7, #15]

        switch ( iirf )
2000085c:	7bfb      	ldrb	r3, [r7, #15]
2000085e:	2b0c      	cmp	r3, #12
20000860:	d854      	bhi.n	2000090c <MSS_UART_isr+0x100>
20000862:	a201      	add	r2, pc, #4	; (adr r2, 20000868 <MSS_UART_isr+0x5c>)
20000864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20000868:	2000089d 	.word	0x2000089d
2000086c:	2000090d 	.word	0x2000090d
20000870:	200008b9 	.word	0x200008b9
20000874:	2000090d 	.word	0x2000090d
20000878:	200008d5 	.word	0x200008d5
2000087c:	2000090d 	.word	0x2000090d
20000880:	200008f1 	.word	0x200008f1
20000884:	2000090d 	.word	0x2000090d
20000888:	2000090d 	.word	0x2000090d
2000088c:	2000090d 	.word	0x2000090d
20000890:	2000090d 	.word	0x2000090d
20000894:	2000090d 	.word	0x2000090d
20000898:	200008d5 	.word	0x200008d5
        {
            case IIRF_MODEM_STATUS:  /* Modem status interrupt */
            {
                ASSERT( NULL_HANDLER != this_uart->modemsts_handler );
2000089c:	687b      	ldr	r3, [r7, #4]
2000089e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
200008a0:	2b00      	cmp	r3, #0
200008a2:	d100      	bne.n	200008a6 <MSS_UART_isr+0x9a>
200008a4:	be00      	bkpt	0x0000
                if( NULL_HANDLER != this_uart->modemsts_handler )
200008a6:	687b      	ldr	r3, [r7, #4]
200008a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
200008aa:	2b00      	cmp	r3, #0
200008ac:	d030      	beq.n	20000910 <MSS_UART_isr+0x104>
                {
                   (*(this_uart->modemsts_handler))( this_uart );
200008ae:	687b      	ldr	r3, [r7, #4]
200008b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
200008b2:	6878      	ldr	r0, [r7, #4]
200008b4:	4798      	blx	r3
                }
            }
            break;
200008b6:	e032      	b.n	2000091e <MSS_UART_isr+0x112>

            case IIRF_THRE: /* Transmitter Holding Register Empty */
            {
                ASSERT( NULL_HANDLER != this_uart->tx_handler );
200008b8:	687b      	ldr	r3, [r7, #4]
200008ba:	6a1b      	ldr	r3, [r3, #32]
200008bc:	2b00      	cmp	r3, #0
200008be:	d100      	bne.n	200008c2 <MSS_UART_isr+0xb6>
200008c0:	be00      	bkpt	0x0000
                if ( NULL_HANDLER != this_uart->tx_handler )
200008c2:	687b      	ldr	r3, [r7, #4]
200008c4:	6a1b      	ldr	r3, [r3, #32]
200008c6:	2b00      	cmp	r3, #0
200008c8:	d024      	beq.n	20000914 <MSS_UART_isr+0x108>
                {
                    (*(this_uart->tx_handler))( this_uart );
200008ca:	687b      	ldr	r3, [r7, #4]
200008cc:	6a1b      	ldr	r3, [r3, #32]
200008ce:	6878      	ldr	r0, [r7, #4]
200008d0:	4798      	blx	r3
                }
            }
            break;
200008d2:	e024      	b.n	2000091e <MSS_UART_isr+0x112>

            case IIRF_RX_DATA:      /* Received Data Available */
            case IIRF_DATA_TIMEOUT: /* Received Data Timed-out */
            {
                ASSERT( NULL_HANDLER != this_uart->rx_handler );
200008d4:	687b      	ldr	r3, [r7, #4]
200008d6:	69db      	ldr	r3, [r3, #28]
200008d8:	2b00      	cmp	r3, #0
200008da:	d100      	bne.n	200008de <MSS_UART_isr+0xd2>
200008dc:	be00      	bkpt	0x0000
                if ( NULL_HANDLER != this_uart->rx_handler )
200008de:	687b      	ldr	r3, [r7, #4]
200008e0:	69db      	ldr	r3, [r3, #28]
200008e2:	2b00      	cmp	r3, #0
200008e4:	d018      	beq.n	20000918 <MSS_UART_isr+0x10c>
                {
                    (*(this_uart->rx_handler))( this_uart );
200008e6:	687b      	ldr	r3, [r7, #4]
200008e8:	69db      	ldr	r3, [r3, #28]
200008ea:	6878      	ldr	r0, [r7, #4]
200008ec:	4798      	blx	r3
                }
            }
            break;
200008ee:	e016      	b.n	2000091e <MSS_UART_isr+0x112>

            case IIRF_RX_LINE_STATUS:  /* Line Status Interrupt */
            {
                ASSERT( NULL_HANDLER != this_uart->linests_handler );
200008f0:	687b      	ldr	r3, [r7, #4]
200008f2:	699b      	ldr	r3, [r3, #24]
200008f4:	2b00      	cmp	r3, #0
200008f6:	d100      	bne.n	200008fa <MSS_UART_isr+0xee>
200008f8:	be00      	bkpt	0x0000
                if ( NULL_HANDLER != this_uart->linests_handler )
200008fa:	687b      	ldr	r3, [r7, #4]
200008fc:	699b      	ldr	r3, [r3, #24]
200008fe:	2b00      	cmp	r3, #0
20000900:	d00c      	beq.n	2000091c <MSS_UART_isr+0x110>
                {
                   (*(this_uart->linests_handler))( this_uart );
20000902:	687b      	ldr	r3, [r7, #4]
20000904:	699b      	ldr	r3, [r3, #24]
20000906:	6878      	ldr	r0, [r7, #4]
20000908:	4798      	blx	r3
                }
            }
            break;
2000090a:	e008      	b.n	2000091e <MSS_UART_isr+0x112>

            default:
            {
                ASSERT( INVALID_INTERRUPT );
2000090c:	be00      	bkpt	0x0000
2000090e:	e006      	b.n	2000091e <MSS_UART_isr+0x112>
                if( NULL_HANDLER != this_uart->modemsts_handler )
                {
                   (*(this_uart->modemsts_handler))( this_uart );
                }
            }
            break;
20000910:	bf00      	nop
20000912:	e004      	b.n	2000091e <MSS_UART_isr+0x112>
                if ( NULL_HANDLER != this_uart->tx_handler )
                {
                    (*(this_uart->tx_handler))( this_uart );
                }
            }
            break;
20000914:	bf00      	nop
20000916:	e002      	b.n	2000091e <MSS_UART_isr+0x112>
                if ( NULL_HANDLER != this_uart->rx_handler )
                {
                    (*(this_uart->rx_handler))( this_uart );
                }
            }
            break;
20000918:	bf00      	nop
2000091a:	e000      	b.n	2000091e <MSS_UART_isr+0x112>
                if ( NULL_HANDLER != this_uart->linests_handler )
                {
                   (*(this_uart->linests_handler))( this_uart );
                }
            }
            break;
2000091c:	bf00      	nop
                ASSERT( INVALID_INTERRUPT );
            }
            break;
        }
    }
}
2000091e:	f107 0710 	add.w	r7, r7, #16
20000922:	46bd      	mov	sp, r7
20000924:	bd80      	pop	{r7, pc}
20000926:	bf00      	nop

20000928 <default_tx_handler>:
static void
default_tx_handler
(
    mss_uart_instance_t * this_uart
)
{
20000928:	b480      	push	{r7}
2000092a:	b087      	sub	sp, #28
2000092c:	af00      	add	r7, sp, #0
2000092e:	6078      	str	r0, [r7, #4]
    uint8_t status;

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
20000930:	687a      	ldr	r2, [r7, #4]
20000932:	f640 539c 	movw	r3, #3484	; 0xd9c
20000936:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000093a:	429a      	cmp	r2, r3
2000093c:	d007      	beq.n	2000094e <default_tx_handler+0x26>
2000093e:	687a      	ldr	r2, [r7, #4]
20000940:	f640 5374 	movw	r3, #3444	; 0xd74
20000944:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000948:	429a      	cmp	r2, r3
2000094a:	d000      	beq.n	2000094e <default_tx_handler+0x26>
2000094c:	be00      	bkpt	0x0000
    ASSERT( ( (uint8_t *)0 ) != this_uart->tx_buffer );
2000094e:	687b      	ldr	r3, [r7, #4]
20000950:	68db      	ldr	r3, [r3, #12]
20000952:	2b00      	cmp	r3, #0
20000954:	d100      	bne.n	20000958 <default_tx_handler+0x30>
20000956:	be00      	bkpt	0x0000
    ASSERT( 0U < this_uart->tx_buff_size );
20000958:	687b      	ldr	r3, [r7, #4]
2000095a:	691b      	ldr	r3, [r3, #16]
2000095c:	2b00      	cmp	r3, #0
2000095e:	d100      	bne.n	20000962 <default_tx_handler+0x3a>
20000960:	be00      	bkpt	0x0000

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
20000962:	687a      	ldr	r2, [r7, #4]
20000964:	f640 539c 	movw	r3, #3484	; 0xd9c
20000968:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000096c:	429a      	cmp	r2, r3
2000096e:	d006      	beq.n	2000097e <default_tx_handler+0x56>
20000970:	687a      	ldr	r2, [r7, #4]
20000972:	f640 5374 	movw	r3, #3444	; 0xd74
20000976:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000097a:	429a      	cmp	r2, r3
2000097c:	d152      	bne.n	20000a24 <default_tx_handler+0xfc>
        ( ( (uint8_t *)0 ) != this_uart->tx_buffer ) &&
2000097e:	687b      	ldr	r3, [r7, #4]
20000980:	68db      	ldr	r3, [r3, #12]

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
    ASSERT( ( (uint8_t *)0 ) != this_uart->tx_buffer );
    ASSERT( 0U < this_uart->tx_buff_size );

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
20000982:	2b00      	cmp	r3, #0
20000984:	d04e      	beq.n	20000a24 <default_tx_handler+0xfc>
        ( ( (uint8_t *)0 ) != this_uart->tx_buffer ) &&
        ( 0U < this_uart->tx_buff_size ) )
20000986:	687b      	ldr	r3, [r7, #4]
20000988:	691b      	ldr	r3, [r3, #16]

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
    ASSERT( ( (uint8_t *)0 ) != this_uart->tx_buffer );
    ASSERT( 0U < this_uart->tx_buff_size );

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
2000098a:	2b00      	cmp	r3, #0
2000098c:	d04a      	beq.n	20000a24 <default_tx_handler+0xfc>
        ( ( (uint8_t *)0 ) != this_uart->tx_buffer ) &&
        ( 0U < this_uart->tx_buff_size ) )
    {
        /* Read the Line Status Register and update the sticky record. */
        status = this_uart->hw_reg->LSR;
2000098e:	687b      	ldr	r3, [r7, #4]
20000990:	681b      	ldr	r3, [r3, #0]
20000992:	7d1b      	ldrb	r3, [r3, #20]
20000994:	72fb      	strb	r3, [r7, #11]
        this_uart->status |= status;
20000996:	687b      	ldr	r3, [r7, #4]
20000998:	7a9a      	ldrb	r2, [r3, #10]
2000099a:	7afb      	ldrb	r3, [r7, #11]
2000099c:	ea42 0303 	orr.w	r3, r2, r3
200009a0:	b2da      	uxtb	r2, r3
200009a2:	687b      	ldr	r3, [r7, #4]
200009a4:	729a      	strb	r2, [r3, #10]

        /*
         * This function should only be called as a result of a THRE interrupt.
         * Verify that this is true before proceeding to transmit data.
         */
        if ( status & MSS_UART_THRE )
200009a6:	7afb      	ldrb	r3, [r7, #11]
200009a8:	f003 0320 	and.w	r3, r3, #32
200009ac:	2b00      	cmp	r3, #0
200009ae:	d029      	beq.n	20000a04 <default_tx_handler+0xdc>
        {
            uint32_t i;
            uint32_t fill_size = TX_FIFO_SIZE;
200009b0:	f04f 0310 	mov.w	r3, #16
200009b4:	613b      	str	r3, [r7, #16]
            uint32_t tx_remain = this_uart->tx_buff_size - this_uart->tx_idx;
200009b6:	687b      	ldr	r3, [r7, #4]
200009b8:	691a      	ldr	r2, [r3, #16]
200009ba:	687b      	ldr	r3, [r7, #4]
200009bc:	695b      	ldr	r3, [r3, #20]
200009be:	ebc3 0302 	rsb	r3, r3, r2
200009c2:	617b      	str	r3, [r7, #20]

            /* Calculate the number of bytes to transmit. */
            if ( tx_remain < TX_FIFO_SIZE )
200009c4:	697b      	ldr	r3, [r7, #20]
200009c6:	2b0f      	cmp	r3, #15
200009c8:	d801      	bhi.n	200009ce <default_tx_handler+0xa6>
            {
                fill_size = tx_remain;
200009ca:	697b      	ldr	r3, [r7, #20]
200009cc:	613b      	str	r3, [r7, #16]
            }

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for ( i = 0U; i < fill_size; ++i )
200009ce:	f04f 0300 	mov.w	r3, #0
200009d2:	60fb      	str	r3, [r7, #12]
200009d4:	e012      	b.n	200009fc <default_tx_handler+0xd4>
            {
                /* Send next character in the buffer. */
                this_uart->hw_reg->THR = this_uart->tx_buffer[this_uart->tx_idx];
200009d6:	687b      	ldr	r3, [r7, #4]
200009d8:	681b      	ldr	r3, [r3, #0]
200009da:	687a      	ldr	r2, [r7, #4]
200009dc:	68d1      	ldr	r1, [r2, #12]
200009de:	687a      	ldr	r2, [r7, #4]
200009e0:	6952      	ldr	r2, [r2, #20]
200009e2:	440a      	add	r2, r1
200009e4:	7812      	ldrb	r2, [r2, #0]
200009e6:	701a      	strb	r2, [r3, #0]
                ++this_uart->tx_idx;
200009e8:	687b      	ldr	r3, [r7, #4]
200009ea:	695b      	ldr	r3, [r3, #20]
200009ec:	f103 0201 	add.w	r2, r3, #1
200009f0:	687b      	ldr	r3, [r7, #4]
200009f2:	615a      	str	r2, [r3, #20]
            {
                fill_size = tx_remain;
            }

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for ( i = 0U; i < fill_size; ++i )
200009f4:	68fb      	ldr	r3, [r7, #12]
200009f6:	f103 0301 	add.w	r3, r3, #1
200009fa:	60fb      	str	r3, [r7, #12]
200009fc:	68fa      	ldr	r2, [r7, #12]
200009fe:	693b      	ldr	r3, [r7, #16]
20000a00:	429a      	cmp	r2, r3
20000a02:	d3e8      	bcc.n	200009d6 <default_tx_handler+0xae>
                ++this_uart->tx_idx;
            }
        }

        /* Flag Tx as complete if all data has been pushed into the Tx FIFO. */
        if ( this_uart->tx_idx == this_uart->tx_buff_size )
20000a04:	687b      	ldr	r3, [r7, #4]
20000a06:	695a      	ldr	r2, [r3, #20]
20000a08:	687b      	ldr	r3, [r7, #4]
20000a0a:	691b      	ldr	r3, [r3, #16]
20000a0c:	429a      	cmp	r2, r3
20000a0e:	d109      	bne.n	20000a24 <default_tx_handler+0xfc>
        {
            this_uart->tx_buff_size = TX_COMPLETE;
20000a10:	687b      	ldr	r3, [r7, #4]
20000a12:	f04f 0200 	mov.w	r2, #0
20000a16:	611a      	str	r2, [r3, #16]
            /* disables TX interrupt */
            this_uart->hw_reg_bit->IER_ETBEI = 0U;
20000a18:	687b      	ldr	r3, [r7, #4]
20000a1a:	685b      	ldr	r3, [r3, #4]
20000a1c:	f04f 0200 	mov.w	r2, #0
20000a20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        }
    }
}
20000a24:	f107 071c 	add.w	r7, r7, #28
20000a28:	46bd      	mov	sp, r7
20000a2a:	bc80      	pop	{r7}
20000a2c:	4770      	bx	lr
20000a2e:	bf00      	nop

20000a30 <UART0_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void UART0_IRQHandler( void )
#else
void UART0_IRQHandler( void )
#endif
{
20000a30:	4668      	mov	r0, sp
20000a32:	f020 0107 	bic.w	r1, r0, #7
20000a36:	468d      	mov	sp, r1
20000a38:	b589      	push	{r0, r3, r7, lr}
20000a3a:	af00      	add	r7, sp, #0
    MSS_UART_isr( &g_mss_uart0 );
20000a3c:	f640 509c 	movw	r0, #3484	; 0xd9c
20000a40:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000a44:	f7ff fee2 	bl	2000080c <MSS_UART_isr>
    NVIC_ClearPendingIRQ( UART0_IRQn );
20000a48:	f04f 000a 	mov.w	r0, #10
20000a4c:	f7ff fd4c 	bl	200004e8 <NVIC_ClearPendingIRQ>
}
20000a50:	46bd      	mov	sp, r7
20000a52:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20000a56:	4685      	mov	sp, r0
20000a58:	4770      	bx	lr
20000a5a:	bf00      	nop

20000a5c <UART1_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void UART1_IRQHandler( void )
#else
void UART1_IRQHandler( void )
#endif
{
20000a5c:	4668      	mov	r0, sp
20000a5e:	f020 0107 	bic.w	r1, r0, #7
20000a62:	468d      	mov	sp, r1
20000a64:	b589      	push	{r0, r3, r7, lr}
20000a66:	af00      	add	r7, sp, #0
    MSS_UART_isr( &g_mss_uart1 );
20000a68:	f640 5074 	movw	r0, #3444	; 0xd74
20000a6c:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000a70:	f7ff fecc 	bl	2000080c <MSS_UART_isr>
    NVIC_ClearPendingIRQ( UART1_IRQn );
20000a74:	f04f 000b 	mov.w	r0, #11
20000a78:	f7ff fd36 	bl	200004e8 <NVIC_ClearPendingIRQ>
}
20000a7c:	46bd      	mov	sp, r7
20000a7e:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20000a82:	4685      	mov	sp, r0
20000a84:	4770      	bx	lr
20000a86:	bf00      	nop

20000a88 <SystemInit>:

/***************************************************************************//**
 * See system_a2fxxxm3f.h for details.
 */
void SystemInit(void)
{
20000a88:	b480      	push	{r7}
20000a8a:	af00      	add	r7, sp, #0
    /*
     * Do not make use of global variables or make any asumptions regarding
     * memory content if modifying this function. The memory content has not been
     * initialised by the time this function is called by the start-up code.
     */
}
20000a8c:	46bd      	mov	sp, r7
20000a8e:	bc80      	pop	{r7}
20000a90:	4770      	bx	lr
20000a92:	bf00      	nop

20000a94 <SystemCoreClockUpdate>:

/***************************************************************************//**
 *
 */
void SystemCoreClockUpdate (void)
{
20000a94:	b580      	push	{r7, lr}
20000a96:	b08a      	sub	sp, #40	; 0x28
20000a98:	af00      	add	r7, sp, #0
    uint32_t PclkDiv0;
    uint32_t PclkDiv1;
    uint32_t AceDiv;
    uint32_t FabDiv;

    const uint32_t pclk_div_lut[4] = { 1uL, 2uL, 4uL, 1uL };
20000a9a:	f640 5324 	movw	r3, #3364	; 0xd24
20000a9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000aa2:	46bc      	mov	ip, r7
20000aa4:	cb0f      	ldmia	r3!, {r0, r1, r2, r3}
20000aa6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

    /* Read PCLK dividers from system registers. Multiply the value read from
     * system register by two to get actual divider value. */
    PclkDiv0 = pclk_div_lut[((SYSREG->MSS_CLK_CR >> PCLK0_DIV_SHIFT) & PCLK_DIV_MASK)];
20000aaa:	f242 0300 	movw	r3, #8192	; 0x2000
20000aae:	f2ce 0304 	movt	r3, #57348	; 0xe004
20000ab2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20000ab4:	ea4f 0393 	mov.w	r3, r3, lsr #2
20000ab8:	f003 0303 	and.w	r3, r3, #3
20000abc:	ea4f 0383 	mov.w	r3, r3, lsl #2
20000ac0:	f107 0228 	add.w	r2, r7, #40	; 0x28
20000ac4:	4413      	add	r3, r2
20000ac6:	f853 3c28 	ldr.w	r3, [r3, #-40]
20000aca:	613b      	str	r3, [r7, #16]
    PclkDiv1 = pclk_div_lut[((SYSREG->MSS_CLK_CR >> PCLK1_DIV_SHIFT) & PCLK_DIV_MASK)];
20000acc:	f242 0300 	movw	r3, #8192	; 0x2000
20000ad0:	f2ce 0304 	movt	r3, #57348	; 0xe004
20000ad4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20000ad6:	ea4f 1313 	mov.w	r3, r3, lsr #4
20000ada:	f003 0303 	and.w	r3, r3, #3
20000ade:	ea4f 0383 	mov.w	r3, r3, lsl #2
20000ae2:	f107 0228 	add.w	r2, r7, #40	; 0x28
20000ae6:	4413      	add	r3, r2
20000ae8:	f853 3c28 	ldr.w	r3, [r3, #-40]
20000aec:	617b      	str	r3, [r7, #20]
    AceDiv = pclk_div_lut[((SYSREG->MSS_CLK_CR >> ACE_DIV_SHIFT) & PCLK_DIV_MASK)];
20000aee:	f242 0300 	movw	r3, #8192	; 0x2000
20000af2:	f2ce 0304 	movt	r3, #57348	; 0xe004
20000af6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20000af8:	ea4f 1393 	mov.w	r3, r3, lsr #6
20000afc:	f003 0303 	and.w	r3, r3, #3
20000b00:	ea4f 0383 	mov.w	r3, r3, lsl #2
20000b04:	f107 0228 	add.w	r2, r7, #40	; 0x28
20000b08:	4413      	add	r3, r2
20000b0a:	f853 3c28 	ldr.w	r3, [r3, #-40]
20000b0e:	61bb      	str	r3, [r7, #24]
    {
        /* Compute the FPGA fabric frequency divider. */
        uint32_t obdiv;
        uint32_t obdivhalf;
        
        obdiv = (SYSREG->MSS_CCC_DIV_CR >> OBDIV_SHIFT) & OBDIV_MASK;
20000b10:	f242 0300 	movw	r3, #8192	; 0x2000
20000b14:	f2ce 0304 	movt	r3, #57348	; 0xe004
20000b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20000b1a:	ea4f 2313 	mov.w	r3, r3, lsr #8
20000b1e:	f003 031f 	and.w	r3, r3, #31
20000b22:	623b      	str	r3, [r7, #32]
        obdivhalf = (SYSREG->MSS_CCC_DIV_CR >> OBDIVHALF_SHIFT) & OBDIVHALF_MASK;
20000b24:	f242 0300 	movw	r3, #8192	; 0x2000
20000b28:	f2ce 0304 	movt	r3, #57348	; 0xe004
20000b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20000b2e:	ea4f 3353 	mov.w	r3, r3, lsr #13
20000b32:	f003 0301 	and.w	r3, r3, #1
20000b36:	627b      	str	r3, [r7, #36]	; 0x24
        FabDiv = obdiv + 1uL;
20000b38:	6a3b      	ldr	r3, [r7, #32]
20000b3a:	f103 0301 	add.w	r3, r3, #1
20000b3e:	61fb      	str	r3, [r7, #28]
        if ( obdivhalf != 0uL )
20000b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000b42:	2b00      	cmp	r3, #0
20000b44:	d003      	beq.n	20000b4e <SystemCoreClockUpdate+0xba>
        {
            FabDiv = FabDiv * 2uL;
20000b46:	69fb      	ldr	r3, [r7, #28]
20000b48:	ea4f 0343 	mov.w	r3, r3, lsl #1
20000b4c:	61fb      	str	r3, [r7, #28]
    }
    
    /* Retrieve FCLK from eNVM spare pages if Actel system boot programmed as part of the system. */
    
    /* Read system clock from eNVM spare pages. */
    SystemCoreClock = GetSystemClock();
20000b4e:	f000 f849 	bl	20000be4 <GetSystemClock>
20000b52:	4602      	mov	r2, r0
20000b54:	f640 535c 	movw	r3, #3420	; 0xd5c
20000b58:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000b5c:	601a      	str	r2, [r3, #0]
    g_FrequencyPCLK0 = SystemCoreClock / PclkDiv0;
20000b5e:	f640 535c 	movw	r3, #3420	; 0xd5c
20000b62:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000b66:	681a      	ldr	r2, [r3, #0]
20000b68:	693b      	ldr	r3, [r7, #16]
20000b6a:	fbb2 f2f3 	udiv	r2, r2, r3
20000b6e:	f640 5360 	movw	r3, #3424	; 0xd60
20000b72:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000b76:	601a      	str	r2, [r3, #0]
    g_FrequencyPCLK1 = SystemCoreClock / PclkDiv1;
20000b78:	f640 535c 	movw	r3, #3420	; 0xd5c
20000b7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000b80:	681a      	ldr	r2, [r3, #0]
20000b82:	697b      	ldr	r3, [r7, #20]
20000b84:	fbb2 f2f3 	udiv	r2, r2, r3
20000b88:	f640 5364 	movw	r3, #3428	; 0xd64
20000b8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000b90:	601a      	str	r2, [r3, #0]
    g_FrequencyACE = SystemCoreClock / AceDiv;
20000b92:	f640 535c 	movw	r3, #3420	; 0xd5c
20000b96:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000b9a:	681a      	ldr	r2, [r3, #0]
20000b9c:	69bb      	ldr	r3, [r7, #24]
20000b9e:	fbb2 f2f3 	udiv	r2, r2, r3
20000ba2:	f640 5368 	movw	r3, #3432	; 0xd68
20000ba6:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000baa:	601a      	str	r2, [r3, #0]
    g_FrequencyFPGA = SystemCoreClock / FabDiv;
20000bac:	f640 535c 	movw	r3, #3420	; 0xd5c
20000bb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000bb4:	681a      	ldr	r2, [r3, #0]
20000bb6:	69fb      	ldr	r3, [r7, #28]
20000bb8:	fbb2 f2f3 	udiv	r2, r2, r3
20000bbc:	f640 536c 	movw	r3, #3436	; 0xd6c
20000bc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000bc4:	601a      	str	r2, [r3, #0]
    
    /* Keep SystemFrequency as well as SystemCoreClock for legacy reasons. */
    SystemFrequency = SystemCoreClock;
20000bc6:	f640 535c 	movw	r3, #3420	; 0xd5c
20000bca:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000bce:	681a      	ldr	r2, [r3, #0]
20000bd0:	f640 5358 	movw	r3, #3416	; 0xd58
20000bd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000bd8:	601a      	str	r2, [r3, #0]
}
20000bda:	f107 0728 	add.w	r7, r7, #40	; 0x28
20000bde:	46bd      	mov	sp, r7
20000be0:	bd80      	pop	{r7, pc}
20000be2:	bf00      	nop

20000be4 <GetSystemClock>:
 * retrieved from eNVM spare pages.
 * The FCLK frequency value selected in the MSS Configurator software tool is
 * stored in eNVM spare pages as part of the Actel system boot configuration data.
 */
uint32_t GetSystemClock( void )
{
20000be4:	b480      	push	{r7}
20000be6:	b08b      	sub	sp, #44	; 0x2c
20000be8:	af00      	add	r7, sp, #0
    uint32_t fclk = 0uL;
20000bea:	f04f 0300 	mov.w	r3, #0
20000bee:	607b      	str	r3, [r7, #4]
    
    uint32_t * p_sysboot_key = SYSBOOT_KEY_ADDR;
20000bf0:	f640 031c 	movw	r3, #2076	; 0x81c
20000bf4:	f2c6 0308 	movt	r3, #24584	; 0x6008
20000bf8:	60bb      	str	r3, [r7, #8]
    uint32_t * p_idcode = IDCODE_LOCATION;
20000bfa:	f240 2330 	movw	r3, #560	; 0x230
20000bfe:	f2c6 0308 	movt	r3, #24584	; 0x6008
20000c02:	60fb      	str	r3, [r7, #12]
    uint32_t idcode;
	
    idcode = *p_idcode & ~IDCODE_DEV_REV_MASK;
20000c04:	68fb      	ldr	r3, [r7, #12]
20000c06:	681b      	ldr	r3, [r3, #0]
20000c08:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
20000c0c:	613b      	str	r3, [r7, #16]
	
    if ( A2F060IFX_ID == idcode )
20000c0e:	693a      	ldr	r2, [r7, #16]
20000c10:	f241 13cf 	movw	r3, #4559	; 0x11cf
20000c14:	f2c0 53a1 	movt	r3, #1441	; 0x5a1
20000c18:	429a      	cmp	r2, r3
20000c1a:	d108      	bne.n	20000c2e <GetSystemClock+0x4a>
    {
        uint32_t *p_fclk = SYSBOOT_A2F060_FCLK_ADDR;
20000c1c:	f64e 732c 	movw	r3, #61228	; 0xef2c
20000c20:	f2c6 0301 	movt	r3, #24577	; 0x6001
20000c24:	617b      	str	r3, [r7, #20]
        fclk = *p_fclk;
20000c26:	697b      	ldr	r3, [r7, #20]
20000c28:	681b      	ldr	r3, [r3, #0]
20000c2a:	607b      	str	r3, [r7, #4]
20000c2c:	e03d      	b.n	20000caa <GetSystemClock+0xc6>
    }
    else if ( SYSBOOT_KEY_VALUE == *p_sysboot_key )
20000c2e:	68bb      	ldr	r3, [r7, #8]
20000c30:	681a      	ldr	r2, [r3, #0]
20000c32:	f244 3341 	movw	r3, #17217	; 0x4341
20000c36:	f6c4 4354 	movt	r3, #19540	; 0x4c54
20000c3a:	429a      	cmp	r2, r3
20000c3c:	d135      	bne.n	20000caa <GetSystemClock+0xc6>
    {
        /* Actel system boot programmed, check if it has the FCLK value stored. */
        uint32_t *p_sysboot_version = SYSBOOT_VERSION_ADDR;
20000c3e:	f640 0340 	movw	r3, #2112	; 0x840
20000c42:	f2c6 0308 	movt	r3, #24584	; 0x6008
20000c46:	61bb      	str	r3, [r7, #24]
        uint32_t sysboot_version = *p_sysboot_version;
20000c48:	69bb      	ldr	r3, [r7, #24]
20000c4a:	681b      	ldr	r3, [r3, #0]
20000c4c:	61fb      	str	r3, [r7, #28]
        
        sysboot_version &= SYSBOOT_VERSION_MASK;
20000c4e:	69fb      	ldr	r3, [r7, #28]
20000c50:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
20000c54:	61fb      	str	r3, [r7, #28]
        
        if ( sysboot_version >= MIN_SYSBOOT_VERSION )
20000c56:	69fa      	ldr	r2, [r7, #28]
20000c58:	f240 3300 	movw	r3, #768	; 0x300
20000c5c:	f2c0 0301 	movt	r3, #1
20000c60:	429a      	cmp	r2, r3
20000c62:	d922      	bls.n	20000caa <GetSystemClock+0xc6>
        {
            /* Handle change of eNVM location of FCLK between 1.3.x and 2.x.x versions of the system boot. */
            if ( sysboot_version < SYSBOOT_VERSION_2_X )
20000c64:	69fa      	ldr	r2, [r7, #28]
20000c66:	f64f 73ff 	movw	r3, #65535	; 0xffff
20000c6a:	f2c0 0301 	movt	r3, #1
20000c6e:	429a      	cmp	r2, r3
20000c70:	d808      	bhi.n	20000c84 <GetSystemClock+0xa0>
            {
                /* Read FCLK value from MSS configurator generated configuration
                 * data stored in eNVM spare pages as part of system boot version 1.3.x
                 * configuration tables. */
                uint32_t *p_fclk = SYSBOOT_1_3_FCLK_ADDR;
20000c72:	f241 632c 	movw	r3, #5676	; 0x162c
20000c76:	f2c6 0308 	movt	r3, #24584	; 0x6008
20000c7a:	623b      	str	r3, [r7, #32]
                fclk = *p_fclk;
20000c7c:	6a3b      	ldr	r3, [r7, #32]
20000c7e:	681b      	ldr	r3, [r3, #0]
20000c80:	607b      	str	r3, [r7, #4]
20000c82:	e012      	b.n	20000caa <GetSystemClock+0xc6>
            }
            else if ( sysboot_version < MAX_SYSBOOT_VERSION )
20000c84:	69fa      	ldr	r2, [r7, #28]
20000c86:	f64f 73ff 	movw	r3, #65535	; 0xffff
20000c8a:	f2c0 0302 	movt	r3, #2
20000c8e:	429a      	cmp	r2, r3
20000c90:	d808      	bhi.n	20000ca4 <GetSystemClock+0xc0>
            {
                /* Read FCLK value from MSS configurator generated configuration
                 * data stored in eNVM spare pages as part of system boot version 2.x.x
                 * configuration tables. */
                uint32_t *p_fclk = SYSBOOT_2_x_FCLK_ADDR;
20000c92:	f641 63ac 	movw	r3, #7852	; 0x1eac
20000c96:	f2c6 0308 	movt	r3, #24584	; 0x6008
20000c9a:	627b      	str	r3, [r7, #36]	; 0x24
                fclk = *p_fclk;
20000c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000c9e:	681b      	ldr	r3, [r3, #0]
20000ca0:	607b      	str	r3, [r7, #4]
20000ca2:	e002      	b.n	20000caa <GetSystemClock+0xc6>
            }
            else
            {
                fclk = 0uL;
20000ca4:	f04f 0300 	mov.w	r3, #0
20000ca8:	607b      	str	r3, [r7, #4]
            }
        }
    }
    
    if ( 0uL == fclk )
20000caa:	687b      	ldr	r3, [r7, #4]
20000cac:	2b00      	cmp	r3, #0
20000cae:	d105      	bne.n	20000cbc <GetSystemClock+0xd8>
        /* 
         * Could not retrieve FCLK from system boot configuration data. Fall back
         * to using SMARTFUSION_FCLK_FREQ which must then be defined as part of
         * project settings.
         */
        ASSERT( SMARTFUSION_FCLK_FREQ_DEFINED );
20000cb0:	be00      	bkpt	0x0000
        fclk = SMARTFUSION_FCLK_FREQ;
20000cb2:	f647 0340 	movw	r3, #30784	; 0x7840
20000cb6:	f2c0 137d 	movt	r3, #381	; 0x17d
20000cba:	607b      	str	r3, [r7, #4]
    }
    
    return fclk;
20000cbc:	687b      	ldr	r3, [r7, #4]
}
20000cbe:	4618      	mov	r0, r3
20000cc0:	f107 072c 	add.w	r7, r7, #44	; 0x2c
20000cc4:	46bd      	mov	sp, r7
20000cc6:	bc80      	pop	{r7}
20000cc8:	4770      	bx	lr
20000cca:	bf00      	nop

20000ccc <__libc_init_array>:
20000ccc:	b570      	push	{r4, r5, r6, lr}
20000cce:	f640 564c 	movw	r6, #3404	; 0xd4c
20000cd2:	f640 554c 	movw	r5, #3404	; 0xd4c
20000cd6:	f2c2 0600 	movt	r6, #8192	; 0x2000
20000cda:	f2c2 0500 	movt	r5, #8192	; 0x2000
20000cde:	1b76      	subs	r6, r6, r5
20000ce0:	10b6      	asrs	r6, r6, #2
20000ce2:	d006      	beq.n	20000cf2 <__libc_init_array+0x26>
20000ce4:	2400      	movs	r4, #0
20000ce6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
20000cea:	3401      	adds	r4, #1
20000cec:	4798      	blx	r3
20000cee:	42a6      	cmp	r6, r4
20000cf0:	d8f9      	bhi.n	20000ce6 <__libc_init_array+0x1a>
20000cf2:	f640 554c 	movw	r5, #3404	; 0xd4c
20000cf6:	f640 5650 	movw	r6, #3408	; 0xd50
20000cfa:	f2c2 0500 	movt	r5, #8192	; 0x2000
20000cfe:	f2c2 0600 	movt	r6, #8192	; 0x2000
20000d02:	1b76      	subs	r6, r6, r5
20000d04:	f000 f816 	bl	20000d34 <_init>
20000d08:	10b6      	asrs	r6, r6, #2
20000d0a:	d006      	beq.n	20000d1a <__libc_init_array+0x4e>
20000d0c:	2400      	movs	r4, #0
20000d0e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
20000d12:	3401      	adds	r4, #1
20000d14:	4798      	blx	r3
20000d16:	42a6      	cmp	r6, r4
20000d18:	d8f9      	bhi.n	20000d0e <__libc_init_array+0x42>
20000d1a:	bd70      	pop	{r4, r5, r6, pc}

20000d1c <C.18.2633>:
20000d1c:	5742 0002 0000 0601                         BW......

20000d24 <C.18.2576>:
20000d24:	0001 0000 0002 0000 0004 0000 0001 0000     ................

20000d34 <_init>:
20000d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20000d36:	bf00      	nop
20000d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
20000d3a:	bc08      	pop	{r3}
20000d3c:	469e      	mov	lr, r3
20000d3e:	4770      	bx	lr

20000d40 <_fini>:
20000d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20000d42:	bf00      	nop
20000d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
20000d46:	bc08      	pop	{r3}
20000d48:	469e      	mov	lr, r3
20000d4a:	4770      	bx	lr

20000d4c <__frame_dummy_init_array_entry>:
20000d4c:	0485 2000                                   ... 

20000d50 <__do_global_dtors_aux_fini_array_entry>:
20000d50:	0471 2000                                   q.. 
