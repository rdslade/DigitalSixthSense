
core_MSS_CM3_0_app:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000168c  20000000  20000000  00008000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  2000168c  2000168c  0000968c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000f0  20001690  20001690  00009690  2**2
                  ALLOC
  3 .stack        00003000  20001780  20001780  00009690  2**0
                  ALLOC
  4 .comment      000000d7  00000000  00000000  00009690  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000340  00000000  00000000  00009767  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000695  00000000  00000000  00009aa7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000034b5  00000000  00000000  0000a13c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000006fe  00000000  00000000  0000d5f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001540  00000000  00000000  0000dcef  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000ac0  00000000  00000000  0000f230  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001ba4  00000000  00000000  0000fcf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000011bf  00000000  00000000  00011894  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macinfo 0001b3fd  00000000  00000000  00012a53  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .ARM.attributes 00000025  00000000  00000000  0002de50  2**0
                  CONTENTS, READONLY
 15 .debug_ranges 00000330  00000000  00000000  0002de75  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

20000000 <__text_start>:
20000000:	20010000 	.word	0x20010000
20000004:	20000299 	.word	0x20000299
20000008:	20000309 	.word	0x20000309
2000000c:	2000030b 	.word	0x2000030b
20000010:	2000030d 	.word	0x2000030d
20000014:	2000030f 	.word	0x2000030f
20000018:	20000311 	.word	0x20000311
	...
2000002c:	20000313 	.word	0x20000313
20000030:	20000315 	.word	0x20000315
20000034:	00000000 	.word	0x00000000
20000038:	20000317 	.word	0x20000317
2000003c:	20000319 	.word	0x20000319
20000040:	2000031b 	.word	0x2000031b
20000044:	2000031d 	.word	0x2000031d
20000048:	2000031f 	.word	0x2000031f
2000004c:	20000321 	.word	0x20000321
20000050:	20000323 	.word	0x20000323
20000054:	20000325 	.word	0x20000325
20000058:	20000327 	.word	0x20000327
2000005c:	20000329 	.word	0x20000329
20000060:	2000032b 	.word	0x2000032b
20000064:	2000032d 	.word	0x2000032d
20000068:	2000032f 	.word	0x2000032f
2000006c:	20000331 	.word	0x20000331
20000070:	20000333 	.word	0x20000333
20000074:	20000335 	.word	0x20000335
20000078:	200014ad 	.word	0x200014ad
2000007c:	20000339 	.word	0x20000339
20000080:	2000033b 	.word	0x2000033b
20000084:	200014d9 	.word	0x200014d9
20000088:	2000033f 	.word	0x2000033f
2000008c:	20000341 	.word	0x20000341
20000090:	20000343 	.word	0x20000343
20000094:	20000345 	.word	0x20000345
20000098:	20000347 	.word	0x20000347
2000009c:	20000349 	.word	0x20000349
200000a0:	2000034b 	.word	0x2000034b
	...
200000bc:	2000034d 	.word	0x2000034d
200000c0:	2000034f 	.word	0x2000034f
200000c4:	20000351 	.word	0x20000351
200000c8:	20000353 	.word	0x20000353
200000cc:	20000355 	.word	0x20000355
200000d0:	20000357 	.word	0x20000357
200000d4:	20000359 	.word	0x20000359
200000d8:	2000035b 	.word	0x2000035b
200000dc:	2000035d 	.word	0x2000035d
200000e0:	2000035f 	.word	0x2000035f
200000e4:	20000361 	.word	0x20000361
200000e8:	20000363 	.word	0x20000363
200000ec:	20000365 	.word	0x20000365
200000f0:	20000367 	.word	0x20000367
200000f4:	20000369 	.word	0x20000369
200000f8:	2000036b 	.word	0x2000036b
200000fc:	2000036d 	.word	0x2000036d
20000100:	2000036f 	.word	0x2000036f
20000104:	20000371 	.word	0x20000371
20000108:	20000373 	.word	0x20000373
2000010c:	20000375 	.word	0x20000375
20000110:	20000377 	.word	0x20000377
20000114:	20000379 	.word	0x20000379
20000118:	2000037b 	.word	0x2000037b
2000011c:	2000037d 	.word	0x2000037d
20000120:	2000037f 	.word	0x2000037f
20000124:	20000381 	.word	0x20000381
20000128:	20000383 	.word	0x20000383
2000012c:	20000385 	.word	0x20000385
20000130:	20000387 	.word	0x20000387
20000134:	20000389 	.word	0x20000389
20000138:	2000038b 	.word	0x2000038b
2000013c:	2000038d 	.word	0x2000038d
20000140:	2000038f 	.word	0x2000038f
20000144:	20000391 	.word	0x20000391
20000148:	20000393 	.word	0x20000393
2000014c:	20000395 	.word	0x20000395
20000150:	20000397 	.word	0x20000397
20000154:	20000399 	.word	0x20000399
20000158:	2000039b 	.word	0x2000039b
2000015c:	2000039d 	.word	0x2000039d
20000160:	2000039f 	.word	0x2000039f
20000164:	200003a1 	.word	0x200003a1
20000168:	200003a3 	.word	0x200003a3
2000016c:	200003a5 	.word	0x200003a5
20000170:	200003a7 	.word	0x200003a7
20000174:	200003a9 	.word	0x200003a9
20000178:	200003ab 	.word	0x200003ab
2000017c:	200003ad 	.word	0x200003ad
20000180:	200003af 	.word	0x200003af
20000184:	200003b1 	.word	0x200003b1
20000188:	200003b3 	.word	0x200003b3
2000018c:	200003b5 	.word	0x200003b5
20000190:	200003b7 	.word	0x200003b7
20000194:	200003b9 	.word	0x200003b9
20000198:	200003bb 	.word	0x200003bb
2000019c:	200003bd 	.word	0x200003bd
200001a0:	200003bf 	.word	0x200003bf
200001a4:	200003c1 	.word	0x200003c1
200001a8:	200003c3 	.word	0x200003c3
200001ac:	200003c5 	.word	0x200003c5
200001b0:	200003c7 	.word	0x200003c7
200001b4:	200003c9 	.word	0x200003c9
200001b8:	200003cb 	.word	0x200003cb
200001bc:	200003cd 	.word	0x200003cd
200001c0:	200003cf 	.word	0x200003cf
200001c4:	200003d1 	.word	0x200003d1
200001c8:	200003d3 	.word	0x200003d3
200001cc:	200003d5 	.word	0x200003d5
200001d0:	200003d7 	.word	0x200003d7
200001d4:	200003d9 	.word	0x200003d9
200001d8:	200003db 	.word	0x200003db
200001dc:	200003dd 	.word	0x200003dd
200001e0:	200003df 	.word	0x200003df
200001e4:	200003e1 	.word	0x200003e1
200001e8:	200003e3 	.word	0x200003e3
200001ec:	200003e5 	.word	0x200003e5
200001f0:	200003e7 	.word	0x200003e7
200001f4:	200003e9 	.word	0x200003e9
200001f8:	200003eb 	.word	0x200003eb
200001fc:	200003ed 	.word	0x200003ed
20000200:	200003ef 	.word	0x200003ef
20000204:	200003f1 	.word	0x200003f1
20000208:	200003f3 	.word	0x200003f3
2000020c:	200003f5 	.word	0x200003f5
20000210:	200003f7 	.word	0x200003f7
20000214:	200003f9 	.word	0x200003f9
20000218:	200003fb 	.word	0x200003fb
2000021c:	200003fd 	.word	0x200003fd
20000220:	200003ff 	.word	0x200003ff
20000224:	20000401 	.word	0x20000401
20000228:	20000403 	.word	0x20000403
2000022c:	20000405 	.word	0x20000405
20000230:	20000407 	.word	0x20000407
20000234:	20000409 	.word	0x20000409
20000238:	2000040b 	.word	0x2000040b
2000023c:	2000040d 	.word	0x2000040d
20000240:	2000040f 	.word	0x2000040f
20000244:	20000411 	.word	0x20000411
20000248:	20000413 	.word	0x20000413
2000024c:	20000415 	.word	0x20000415
20000250:	20000417 	.word	0x20000417
20000254:	20000419 	.word	0x20000419
20000258:	2000041b 	.word	0x2000041b
2000025c:	2000041d 	.word	0x2000041d
20000260:	2000041f 	.word	0x2000041f
20000264:	20000421 	.word	0x20000421
20000268:	20000423 	.word	0x20000423
2000026c:	20000425 	.word	0x20000425
20000270:	20000427 	.word	0x20000427
20000274:	20000429 	.word	0x20000429
20000278:	2000042b 	.word	0x2000042b
2000027c:	2000042d 	.word	0x2000042d
20000280:	2000042f 	.word	0x2000042f
20000284:	20000431 	.word	0x20000431
20000288:	20000433 	.word	0x20000433
2000028c:	20000435 	.word	0x20000435
20000290:	20000437 	.word	0x20000437
20000294:	20000439 	.word	0x20000439

20000298 <Reset_Handler>:
20000298:	4868      	ldr	r0, [pc, #416]	; (2000043c <ACE_PPE_Flag31_IRQHandler+0x4>)
2000029a:	4780      	blx	r0
2000029c:	4868      	ldr	r0, [pc, #416]	; (20000440 <ACE_PPE_Flag31_IRQHandler+0x8>)
2000029e:	2800      	cmp	r0, #0
200002a0:	d10b      	bne.n	200002ba <copy_data>
200002a2:	4868      	ldr	r0, [pc, #416]	; (20000444 <ACE_PPE_Flag31_IRQHandler+0xc>)
200002a4:	4968      	ldr	r1, [pc, #416]	; (20000448 <ACE_PPE_Flag31_IRQHandler+0x10>)
200002a6:	4a69      	ldr	r2, [pc, #420]	; (2000044c <ACE_PPE_Flag31_IRQHandler+0x14>)
200002a8:	4288      	cmp	r0, r1
200002aa:	d006      	beq.n	200002ba <copy_data>

200002ac <copy_code_loop>:
200002ac:	4291      	cmp	r1, r2
200002ae:	bf1c      	itt	ne
200002b0:	f850 3b04 	ldrne.w	r3, [r0], #4
200002b4:	f841 3b04 	strne.w	r3, [r1], #4
200002b8:	d1f8      	bne.n	200002ac <copy_code_loop>

200002ba <copy_data>:
200002ba:	4865      	ldr	r0, [pc, #404]	; (20000450 <ACE_PPE_Flag31_IRQHandler+0x18>)
200002bc:	4965      	ldr	r1, [pc, #404]	; (20000454 <ACE_PPE_Flag31_IRQHandler+0x1c>)
200002be:	4a66      	ldr	r2, [pc, #408]	; (20000458 <ACE_PPE_Flag31_IRQHandler+0x20>)
200002c0:	4288      	cmp	r0, r1
200002c2:	d006      	beq.n	200002d2 <clear_bss>

200002c4 <copy_data_loop>:
200002c4:	4291      	cmp	r1, r2
200002c6:	bf1c      	itt	ne
200002c8:	f850 3b04 	ldrne.w	r3, [r0], #4
200002cc:	f841 3b04 	strne.w	r3, [r1], #4
200002d0:	d1f8      	bne.n	200002c4 <copy_data_loop>

200002d2 <clear_bss>:
200002d2:	4862      	ldr	r0, [pc, #392]	; (2000045c <ACE_PPE_Flag31_IRQHandler+0x24>)
200002d4:	4962      	ldr	r1, [pc, #392]	; (20000460 <ACE_PPE_Flag31_IRQHandler+0x28>)
200002d6:	4a63      	ldr	r2, [pc, #396]	; (20000464 <ACE_PPE_Flag31_IRQHandler+0x2c>)

200002d8 <clear_bss_loop>:
200002d8:	4291      	cmp	r1, r2
200002da:	bf18      	it	ne
200002dc:	f841 0b04 	strne.w	r0, [r1], #4
200002e0:	d1fa      	bne.n	200002d8 <clear_bss_loop>
	...

200002f0 <call_glob_ctor>:
200002f0:	f8df 0174 	ldr.w	r0, [pc, #372]	; 20000468 <ACE_PPE_Flag31_IRQHandler+0x30>
200002f4:	f20f 0e03 	addw	lr, pc, #3
200002f8:	4700      	bx	r0

200002fa <branch_to_main>:
200002fa:	f04f 0000 	mov.w	r0, #0
200002fe:	f04f 0100 	mov.w	r1, #0
20000302:	f8df f168 	ldr.w	pc, [pc, #360]	; 2000046c <ACE_PPE_Flag31_IRQHandler+0x34>

20000306 <ExitLoop>:
20000306:	e7fe      	b.n	20000306 <ExitLoop>

20000308 <NMI_Handler>:
20000308:	e7fe      	b.n	20000308 <NMI_Handler>

2000030a <HardFault_Handler>:
2000030a:	e7fe      	b.n	2000030a <HardFault_Handler>

2000030c <MemManage_Handler>:
2000030c:	e7fe      	b.n	2000030c <MemManage_Handler>

2000030e <BusFault_Handler>:
2000030e:	e7fe      	b.n	2000030e <BusFault_Handler>

20000310 <UsageFault_Handler>:
20000310:	e7fe      	b.n	20000310 <UsageFault_Handler>

20000312 <SVC_Handler>:
20000312:	e7fe      	b.n	20000312 <SVC_Handler>

20000314 <DebugMon_Handler>:
20000314:	e7fe      	b.n	20000314 <DebugMon_Handler>

20000316 <PendSV_Handler>:
20000316:	e7fe      	b.n	20000316 <PendSV_Handler>

20000318 <SysTick_Handler>:
20000318:	e7fe      	b.n	20000318 <SysTick_Handler>

2000031a <WdogWakeup_IRQHandler>:
2000031a:	e7fe      	b.n	2000031a <WdogWakeup_IRQHandler>

2000031c <BrownOut_1_5V_IRQHandler>:
2000031c:	e7fe      	b.n	2000031c <BrownOut_1_5V_IRQHandler>

2000031e <BrownOut_3_3V_IRQHandler>:
2000031e:	e7fe      	b.n	2000031e <BrownOut_3_3V_IRQHandler>

20000320 <RTC_Match_IRQHandler>:
20000320:	e7fe      	b.n	20000320 <RTC_Match_IRQHandler>

20000322 <RTCIF_Pub_IRQHandler>:
20000322:	e7fe      	b.n	20000322 <RTCIF_Pub_IRQHandler>

20000324 <EthernetMAC_IRQHandler>:
20000324:	e7fe      	b.n	20000324 <EthernetMAC_IRQHandler>

20000326 <IAP_IRQHandler>:
20000326:	e7fe      	b.n	20000326 <IAP_IRQHandler>

20000328 <ENVM0_IRQHandler>:
20000328:	e7fe      	b.n	20000328 <ENVM0_IRQHandler>

2000032a <ENVM1_IRQHandler>:
2000032a:	e7fe      	b.n	2000032a <ENVM1_IRQHandler>

2000032c <DMA_IRQHandler>:
2000032c:	e7fe      	b.n	2000032c <DMA_IRQHandler>

2000032e <UART0_IRQHandler>:
2000032e:	e7fe      	b.n	2000032e <UART0_IRQHandler>

20000330 <UART1_IRQHandler>:
20000330:	e7fe      	b.n	20000330 <UART1_IRQHandler>

20000332 <SPI0_IRQHandler>:
20000332:	e7fe      	b.n	20000332 <SPI0_IRQHandler>

20000334 <SPI1_IRQHandler>:
20000334:	e7fe      	b.n	20000334 <SPI1_IRQHandler>
20000336:	e7fe      	b.n	20000336 <SPI1_IRQHandler+0x2>

20000338 <I2C0_SMBAlert_IRQHandler>:
20000338:	e7fe      	b.n	20000338 <I2C0_SMBAlert_IRQHandler>

2000033a <I2C0_SMBus_IRQHandler>:
2000033a:	e7fe      	b.n	2000033a <I2C0_SMBus_IRQHandler>
2000033c:	e7fe      	b.n	2000033c <I2C0_SMBus_IRQHandler+0x2>

2000033e <I2C1_SMBAlert_IRQHandler>:
2000033e:	e7fe      	b.n	2000033e <I2C1_SMBAlert_IRQHandler>

20000340 <I2C1_SMBus_IRQHandler>:
20000340:	e7fe      	b.n	20000340 <I2C1_SMBus_IRQHandler>

20000342 <Timer1_IRQHandler>:
20000342:	e7fe      	b.n	20000342 <Timer1_IRQHandler>

20000344 <Timer2_IRQHandler>:
20000344:	e7fe      	b.n	20000344 <Timer2_IRQHandler>

20000346 <PLL_Lock_IRQHandler>:
20000346:	e7fe      	b.n	20000346 <PLL_Lock_IRQHandler>

20000348 <PLL_LockLost_IRQHandler>:
20000348:	e7fe      	b.n	20000348 <PLL_LockLost_IRQHandler>

2000034a <CommError_IRQHandler>:
2000034a:	e7fe      	b.n	2000034a <CommError_IRQHandler>

2000034c <Fabric_IRQHandler>:
2000034c:	e7fe      	b.n	2000034c <Fabric_IRQHandler>

2000034e <GPIO0_IRQHandler>:
2000034e:	e7fe      	b.n	2000034e <GPIO0_IRQHandler>

20000350 <GPIO1_IRQHandler>:
20000350:	e7fe      	b.n	20000350 <GPIO1_IRQHandler>

20000352 <GPIO2_IRQHandler>:
20000352:	e7fe      	b.n	20000352 <GPIO2_IRQHandler>

20000354 <GPIO3_IRQHandler>:
20000354:	e7fe      	b.n	20000354 <GPIO3_IRQHandler>

20000356 <GPIO4_IRQHandler>:
20000356:	e7fe      	b.n	20000356 <GPIO4_IRQHandler>

20000358 <GPIO5_IRQHandler>:
20000358:	e7fe      	b.n	20000358 <GPIO5_IRQHandler>

2000035a <GPIO6_IRQHandler>:
2000035a:	e7fe      	b.n	2000035a <GPIO6_IRQHandler>

2000035c <GPIO7_IRQHandler>:
2000035c:	e7fe      	b.n	2000035c <GPIO7_IRQHandler>

2000035e <GPIO8_IRQHandler>:
2000035e:	e7fe      	b.n	2000035e <GPIO8_IRQHandler>

20000360 <GPIO9_IRQHandler>:
20000360:	e7fe      	b.n	20000360 <GPIO9_IRQHandler>

20000362 <GPIO10_IRQHandler>:
20000362:	e7fe      	b.n	20000362 <GPIO10_IRQHandler>

20000364 <GPIO11_IRQHandler>:
20000364:	e7fe      	b.n	20000364 <GPIO11_IRQHandler>

20000366 <GPIO12_IRQHandler>:
20000366:	e7fe      	b.n	20000366 <GPIO12_IRQHandler>

20000368 <GPIO13_IRQHandler>:
20000368:	e7fe      	b.n	20000368 <GPIO13_IRQHandler>

2000036a <GPIO14_IRQHandler>:
2000036a:	e7fe      	b.n	2000036a <GPIO14_IRQHandler>

2000036c <GPIO15_IRQHandler>:
2000036c:	e7fe      	b.n	2000036c <GPIO15_IRQHandler>

2000036e <GPIO16_IRQHandler>:
2000036e:	e7fe      	b.n	2000036e <GPIO16_IRQHandler>

20000370 <GPIO17_IRQHandler>:
20000370:	e7fe      	b.n	20000370 <GPIO17_IRQHandler>

20000372 <GPIO18_IRQHandler>:
20000372:	e7fe      	b.n	20000372 <GPIO18_IRQHandler>

20000374 <GPIO19_IRQHandler>:
20000374:	e7fe      	b.n	20000374 <GPIO19_IRQHandler>

20000376 <GPIO20_IRQHandler>:
20000376:	e7fe      	b.n	20000376 <GPIO20_IRQHandler>

20000378 <GPIO21_IRQHandler>:
20000378:	e7fe      	b.n	20000378 <GPIO21_IRQHandler>

2000037a <GPIO22_IRQHandler>:
2000037a:	e7fe      	b.n	2000037a <GPIO22_IRQHandler>

2000037c <GPIO23_IRQHandler>:
2000037c:	e7fe      	b.n	2000037c <GPIO23_IRQHandler>

2000037e <GPIO24_IRQHandler>:
2000037e:	e7fe      	b.n	2000037e <GPIO24_IRQHandler>

20000380 <GPIO25_IRQHandler>:
20000380:	e7fe      	b.n	20000380 <GPIO25_IRQHandler>

20000382 <GPIO26_IRQHandler>:
20000382:	e7fe      	b.n	20000382 <GPIO26_IRQHandler>

20000384 <GPIO27_IRQHandler>:
20000384:	e7fe      	b.n	20000384 <GPIO27_IRQHandler>

20000386 <GPIO28_IRQHandler>:
20000386:	e7fe      	b.n	20000386 <GPIO28_IRQHandler>

20000388 <GPIO29_IRQHandler>:
20000388:	e7fe      	b.n	20000388 <GPIO29_IRQHandler>

2000038a <GPIO30_IRQHandler>:
2000038a:	e7fe      	b.n	2000038a <GPIO30_IRQHandler>

2000038c <GPIO31_IRQHandler>:
2000038c:	e7fe      	b.n	2000038c <GPIO31_IRQHandler>

2000038e <ACE_PC0_Flag0_IRQHandler>:
2000038e:	e7fe      	b.n	2000038e <ACE_PC0_Flag0_IRQHandler>

20000390 <ACE_PC0_Flag1_IRQHandler>:
20000390:	e7fe      	b.n	20000390 <ACE_PC0_Flag1_IRQHandler>

20000392 <ACE_PC0_Flag2_IRQHandler>:
20000392:	e7fe      	b.n	20000392 <ACE_PC0_Flag2_IRQHandler>

20000394 <ACE_PC0_Flag3_IRQHandler>:
20000394:	e7fe      	b.n	20000394 <ACE_PC0_Flag3_IRQHandler>

20000396 <ACE_PC1_Flag0_IRQHandler>:
20000396:	e7fe      	b.n	20000396 <ACE_PC1_Flag0_IRQHandler>

20000398 <ACE_PC1_Flag1_IRQHandler>:
20000398:	e7fe      	b.n	20000398 <ACE_PC1_Flag1_IRQHandler>

2000039a <ACE_PC1_Flag2_IRQHandler>:
2000039a:	e7fe      	b.n	2000039a <ACE_PC1_Flag2_IRQHandler>

2000039c <ACE_PC1_Flag3_IRQHandler>:
2000039c:	e7fe      	b.n	2000039c <ACE_PC1_Flag3_IRQHandler>

2000039e <ACE_PC2_Flag0_IRQHandler>:
2000039e:	e7fe      	b.n	2000039e <ACE_PC2_Flag0_IRQHandler>

200003a0 <ACE_PC2_Flag1_IRQHandler>:
200003a0:	e7fe      	b.n	200003a0 <ACE_PC2_Flag1_IRQHandler>

200003a2 <ACE_PC2_Flag2_IRQHandler>:
200003a2:	e7fe      	b.n	200003a2 <ACE_PC2_Flag2_IRQHandler>

200003a4 <ACE_PC2_Flag3_IRQHandler>:
200003a4:	e7fe      	b.n	200003a4 <ACE_PC2_Flag3_IRQHandler>

200003a6 <ACE_ADC0_DataValid_IRQHandler>:
200003a6:	e7fe      	b.n	200003a6 <ACE_ADC0_DataValid_IRQHandler>

200003a8 <ACE_ADC1_DataValid_IRQHandler>:
200003a8:	e7fe      	b.n	200003a8 <ACE_ADC1_DataValid_IRQHandler>

200003aa <ACE_ADC2_DataValid_IRQHandler>:
200003aa:	e7fe      	b.n	200003aa <ACE_ADC2_DataValid_IRQHandler>

200003ac <ACE_ADC0_CalDone_IRQHandler>:
200003ac:	e7fe      	b.n	200003ac <ACE_ADC0_CalDone_IRQHandler>

200003ae <ACE_ADC1_CalDone_IRQHandler>:
200003ae:	e7fe      	b.n	200003ae <ACE_ADC1_CalDone_IRQHandler>

200003b0 <ACE_ADC2_CalDone_IRQHandler>:
200003b0:	e7fe      	b.n	200003b0 <ACE_ADC2_CalDone_IRQHandler>

200003b2 <ACE_ADC0_CalStart_IRQHandler>:
200003b2:	e7fe      	b.n	200003b2 <ACE_ADC0_CalStart_IRQHandler>

200003b4 <ACE_ADC1_CalStart_IRQHandler>:
200003b4:	e7fe      	b.n	200003b4 <ACE_ADC1_CalStart_IRQHandler>

200003b6 <ACE_ADC2_CalStart_IRQHandler>:
200003b6:	e7fe      	b.n	200003b6 <ACE_ADC2_CalStart_IRQHandler>

200003b8 <ACE_Comp0_Fall_IRQHandler>:
200003b8:	e7fe      	b.n	200003b8 <ACE_Comp0_Fall_IRQHandler>

200003ba <ACE_Comp1_Fall_IRQHandler>:
200003ba:	e7fe      	b.n	200003ba <ACE_Comp1_Fall_IRQHandler>

200003bc <ACE_Comp2_Fall_IRQHandler>:
200003bc:	e7fe      	b.n	200003bc <ACE_Comp2_Fall_IRQHandler>

200003be <ACE_Comp3_Fall_IRQHandler>:
200003be:	e7fe      	b.n	200003be <ACE_Comp3_Fall_IRQHandler>

200003c0 <ACE_Comp4_Fall_IRQHandler>:
200003c0:	e7fe      	b.n	200003c0 <ACE_Comp4_Fall_IRQHandler>

200003c2 <ACE_Comp5_Fall_IRQHandler>:
200003c2:	e7fe      	b.n	200003c2 <ACE_Comp5_Fall_IRQHandler>

200003c4 <ACE_Comp6_Fall_IRQHandler>:
200003c4:	e7fe      	b.n	200003c4 <ACE_Comp6_Fall_IRQHandler>

200003c6 <ACE_Comp7_Fall_IRQHandler>:
200003c6:	e7fe      	b.n	200003c6 <ACE_Comp7_Fall_IRQHandler>

200003c8 <ACE_Comp8_Fall_IRQHandler>:
200003c8:	e7fe      	b.n	200003c8 <ACE_Comp8_Fall_IRQHandler>

200003ca <ACE_Comp9_Fall_IRQHandler>:
200003ca:	e7fe      	b.n	200003ca <ACE_Comp9_Fall_IRQHandler>

200003cc <ACE_Comp10_Fall_IRQHandler>:
200003cc:	e7fe      	b.n	200003cc <ACE_Comp10_Fall_IRQHandler>

200003ce <ACE_Comp11_Fall_IRQHandler>:
200003ce:	e7fe      	b.n	200003ce <ACE_Comp11_Fall_IRQHandler>

200003d0 <ACE_Comp0_Rise_IRQHandler>:
200003d0:	e7fe      	b.n	200003d0 <ACE_Comp0_Rise_IRQHandler>

200003d2 <ACE_Comp1_Rise_IRQHandler>:
200003d2:	e7fe      	b.n	200003d2 <ACE_Comp1_Rise_IRQHandler>

200003d4 <ACE_Comp2_Rise_IRQHandler>:
200003d4:	e7fe      	b.n	200003d4 <ACE_Comp2_Rise_IRQHandler>

200003d6 <ACE_Comp3_Rise_IRQHandler>:
200003d6:	e7fe      	b.n	200003d6 <ACE_Comp3_Rise_IRQHandler>

200003d8 <ACE_Comp4_Rise_IRQHandler>:
200003d8:	e7fe      	b.n	200003d8 <ACE_Comp4_Rise_IRQHandler>

200003da <ACE_Comp5_Rise_IRQHandler>:
200003da:	e7fe      	b.n	200003da <ACE_Comp5_Rise_IRQHandler>

200003dc <ACE_Comp6_Rise_IRQHandler>:
200003dc:	e7fe      	b.n	200003dc <ACE_Comp6_Rise_IRQHandler>

200003de <ACE_Comp7_Rise_IRQHandler>:
200003de:	e7fe      	b.n	200003de <ACE_Comp7_Rise_IRQHandler>

200003e0 <ACE_Comp8_Rise_IRQHandler>:
200003e0:	e7fe      	b.n	200003e0 <ACE_Comp8_Rise_IRQHandler>

200003e2 <ACE_Comp9_Rise_IRQHandler>:
200003e2:	e7fe      	b.n	200003e2 <ACE_Comp9_Rise_IRQHandler>

200003e4 <ACE_Comp10_Rise_IRQHandler>:
200003e4:	e7fe      	b.n	200003e4 <ACE_Comp10_Rise_IRQHandler>

200003e6 <ACE_Comp11_Rise_IRQHandler>:
200003e6:	e7fe      	b.n	200003e6 <ACE_Comp11_Rise_IRQHandler>

200003e8 <ACE_ADC0_FifoFull_IRQHandler>:
200003e8:	e7fe      	b.n	200003e8 <ACE_ADC0_FifoFull_IRQHandler>

200003ea <ACE_ADC0_FifoAFull_IRQHandler>:
200003ea:	e7fe      	b.n	200003ea <ACE_ADC0_FifoAFull_IRQHandler>

200003ec <ACE_ADC0_FifoEmpty_IRQHandler>:
200003ec:	e7fe      	b.n	200003ec <ACE_ADC0_FifoEmpty_IRQHandler>

200003ee <ACE_ADC1_FifoFull_IRQHandler>:
200003ee:	e7fe      	b.n	200003ee <ACE_ADC1_FifoFull_IRQHandler>

200003f0 <ACE_ADC1_FifoAFull_IRQHandler>:
200003f0:	e7fe      	b.n	200003f0 <ACE_ADC1_FifoAFull_IRQHandler>

200003f2 <ACE_ADC1_FifoEmpty_IRQHandler>:
200003f2:	e7fe      	b.n	200003f2 <ACE_ADC1_FifoEmpty_IRQHandler>

200003f4 <ACE_ADC2_FifoFull_IRQHandler>:
200003f4:	e7fe      	b.n	200003f4 <ACE_ADC2_FifoFull_IRQHandler>

200003f6 <ACE_ADC2_FifoAFull_IRQHandler>:
200003f6:	e7fe      	b.n	200003f6 <ACE_ADC2_FifoAFull_IRQHandler>

200003f8 <ACE_ADC2_FifoEmpty_IRQHandler>:
200003f8:	e7fe      	b.n	200003f8 <ACE_ADC2_FifoEmpty_IRQHandler>

200003fa <ACE_PPE_Flag0_IRQHandler>:
200003fa:	e7fe      	b.n	200003fa <ACE_PPE_Flag0_IRQHandler>

200003fc <ACE_PPE_Flag1_IRQHandler>:
200003fc:	e7fe      	b.n	200003fc <ACE_PPE_Flag1_IRQHandler>

200003fe <ACE_PPE_Flag2_IRQHandler>:
200003fe:	e7fe      	b.n	200003fe <ACE_PPE_Flag2_IRQHandler>

20000400 <ACE_PPE_Flag3_IRQHandler>:
20000400:	e7fe      	b.n	20000400 <ACE_PPE_Flag3_IRQHandler>

20000402 <ACE_PPE_Flag4_IRQHandler>:
20000402:	e7fe      	b.n	20000402 <ACE_PPE_Flag4_IRQHandler>

20000404 <ACE_PPE_Flag5_IRQHandler>:
20000404:	e7fe      	b.n	20000404 <ACE_PPE_Flag5_IRQHandler>

20000406 <ACE_PPE_Flag6_IRQHandler>:
20000406:	e7fe      	b.n	20000406 <ACE_PPE_Flag6_IRQHandler>

20000408 <ACE_PPE_Flag7_IRQHandler>:
20000408:	e7fe      	b.n	20000408 <ACE_PPE_Flag7_IRQHandler>

2000040a <ACE_PPE_Flag8_IRQHandler>:
2000040a:	e7fe      	b.n	2000040a <ACE_PPE_Flag8_IRQHandler>

2000040c <ACE_PPE_Flag9_IRQHandler>:
2000040c:	e7fe      	b.n	2000040c <ACE_PPE_Flag9_IRQHandler>

2000040e <ACE_PPE_Flag10_IRQHandler>:
2000040e:	e7fe      	b.n	2000040e <ACE_PPE_Flag10_IRQHandler>

20000410 <ACE_PPE_Flag11_IRQHandler>:
20000410:	e7fe      	b.n	20000410 <ACE_PPE_Flag11_IRQHandler>

20000412 <ACE_PPE_Flag12_IRQHandler>:
20000412:	e7fe      	b.n	20000412 <ACE_PPE_Flag12_IRQHandler>

20000414 <ACE_PPE_Flag13_IRQHandler>:
20000414:	e7fe      	b.n	20000414 <ACE_PPE_Flag13_IRQHandler>

20000416 <ACE_PPE_Flag14_IRQHandler>:
20000416:	e7fe      	b.n	20000416 <ACE_PPE_Flag14_IRQHandler>

20000418 <ACE_PPE_Flag15_IRQHandler>:
20000418:	e7fe      	b.n	20000418 <ACE_PPE_Flag15_IRQHandler>

2000041a <ACE_PPE_Flag16_IRQHandler>:
2000041a:	e7fe      	b.n	2000041a <ACE_PPE_Flag16_IRQHandler>

2000041c <ACE_PPE_Flag17_IRQHandler>:
2000041c:	e7fe      	b.n	2000041c <ACE_PPE_Flag17_IRQHandler>

2000041e <ACE_PPE_Flag18_IRQHandler>:
2000041e:	e7fe      	b.n	2000041e <ACE_PPE_Flag18_IRQHandler>

20000420 <ACE_PPE_Flag19_IRQHandler>:
20000420:	e7fe      	b.n	20000420 <ACE_PPE_Flag19_IRQHandler>

20000422 <ACE_PPE_Flag20_IRQHandler>:
20000422:	e7fe      	b.n	20000422 <ACE_PPE_Flag20_IRQHandler>

20000424 <ACE_PPE_Flag21_IRQHandler>:
20000424:	e7fe      	b.n	20000424 <ACE_PPE_Flag21_IRQHandler>

20000426 <ACE_PPE_Flag22_IRQHandler>:
20000426:	e7fe      	b.n	20000426 <ACE_PPE_Flag22_IRQHandler>

20000428 <ACE_PPE_Flag23_IRQHandler>:
20000428:	e7fe      	b.n	20000428 <ACE_PPE_Flag23_IRQHandler>

2000042a <ACE_PPE_Flag24_IRQHandler>:
2000042a:	e7fe      	b.n	2000042a <ACE_PPE_Flag24_IRQHandler>

2000042c <ACE_PPE_Flag25_IRQHandler>:
2000042c:	e7fe      	b.n	2000042c <ACE_PPE_Flag25_IRQHandler>

2000042e <ACE_PPE_Flag26_IRQHandler>:
2000042e:	e7fe      	b.n	2000042e <ACE_PPE_Flag26_IRQHandler>

20000430 <ACE_PPE_Flag27_IRQHandler>:
20000430:	e7fe      	b.n	20000430 <ACE_PPE_Flag27_IRQHandler>

20000432 <ACE_PPE_Flag28_IRQHandler>:
20000432:	e7fe      	b.n	20000432 <ACE_PPE_Flag28_IRQHandler>

20000434 <ACE_PPE_Flag29_IRQHandler>:
20000434:	e7fe      	b.n	20000434 <ACE_PPE_Flag29_IRQHandler>

20000436 <ACE_PPE_Flag30_IRQHandler>:
20000436:	e7fe      	b.n	20000436 <ACE_PPE_Flag30_IRQHandler>

20000438 <ACE_PPE_Flag31_IRQHandler>:
20000438:	e7fe      	b.n	20000438 <ACE_PPE_Flag31_IRQHandler>
2000043a:	0000      	.short	0x0000
2000043c:	2000153d 	.word	0x2000153d
20000440:	00000000 	.word	0x00000000
20000444:	20000000 	.word	0x20000000
20000448:	20000000 	.word	0x20000000
2000044c:	2000168c 	.word	0x2000168c
20000450:	2000168c 	.word	0x2000168c
20000454:	2000168c 	.word	0x2000168c
20000458:	20001690 	.word	0x20001690
2000045c:	00000000 	.word	0x00000000
20000460:	20001690 	.word	0x20001690
20000464:	20001780 	.word	0x20001780
20000468:	20001549 	.word	0x20001549
2000046c:	200006a9 	.word	0x200006a9

20000470 <__do_global_dtors_aux>:
20000470:	f241 6390 	movw	r3, #5776	; 0x1690
20000474:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000478:	781a      	ldrb	r2, [r3, #0]
2000047a:	b90a      	cbnz	r2, 20000480 <__do_global_dtors_aux+0x10>
2000047c:	2001      	movs	r0, #1
2000047e:	7018      	strb	r0, [r3, #0]
20000480:	4770      	bx	lr
20000482:	bf00      	nop

20000484 <frame_dummy>:
20000484:	f241 608c 	movw	r0, #5772	; 0x168c
20000488:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000048c:	b508      	push	{r3, lr}
2000048e:	6803      	ldr	r3, [r0, #0]
20000490:	b12b      	cbz	r3, 2000049e <frame_dummy+0x1a>
20000492:	f240 0300 	movw	r3, #0
20000496:	f2c0 0300 	movt	r3, #0
2000049a:	b103      	cbz	r3, 2000049e <frame_dummy+0x1a>
2000049c:	4798      	blx	r3
2000049e:	bd08      	pop	{r3, pc}

200004a0 <readRegister8>:
//
//
//    printf("d", status);
//}

uint8_t readRegister8(uint8_t reg){
200004a0:	b580      	push	{r7, lr}
200004a2:	b086      	sub	sp, #24
200004a4:	af02      	add	r7, sp, #8
200004a6:	4603      	mov	r3, r0
200004a8:	71fb      	strb	r3, [r7, #7]
	MSS_I2C_write( &g_mss_i2c1, DRV2605_ADDR, &reg, 1,
200004aa:	f107 0307 	add.w	r3, r7, #7
200004ae:	f04f 0200 	mov.w	r2, #0
200004b2:	9200      	str	r2, [sp, #0]
200004b4:	f241 7008 	movw	r0, #5896	; 0x1708
200004b8:	f2c2 0000 	movt	r0, #8192	; 0x2000
200004bc:	f04f 015a 	mov.w	r1, #90	; 0x5a
200004c0:	461a      	mov	r2, r3
200004c2:	f04f 0301 	mov.w	r3, #1
200004c6:	f000 fa2b 	bl	20000920 <MSS_I2C_write>
	                      MSS_I2C_RELEASE_BUS );
	MSS_I2C_wait_complete( &g_mss_i2c1, MSS_I2C_NO_TIMEOUT );
200004ca:	f241 7008 	movw	r0, #5896	; 0x1708
200004ce:	f2c2 0000 	movt	r0, #8192	; 0x2000
200004d2:	f04f 0100 	mov.w	r1, #0
200004d6:	f000 fb17 	bl	20000b08 <MSS_I2C_wait_complete>
	uint8_t * ret = 0;
200004da:	f04f 0300 	mov.w	r3, #0
200004de:	60fb      	str	r3, [r7, #12]
	MSS_I2C_read( &g_mss_i2c1, DRV2605_ADDR, ret, 1,
200004e0:	f04f 0300 	mov.w	r3, #0
200004e4:	9300      	str	r3, [sp, #0]
200004e6:	f241 7008 	movw	r0, #5896	; 0x1708
200004ea:	f2c2 0000 	movt	r0, #8192	; 0x2000
200004ee:	f04f 015a 	mov.w	r1, #90	; 0x5a
200004f2:	68fa      	ldr	r2, [r7, #12]
200004f4:	f04f 0301 	mov.w	r3, #1
200004f8:	f000 fa8c 	bl	20000a14 <MSS_I2C_read>
		                      MSS_I2C_RELEASE_BUS );
	return *ret;
200004fc:	68fb      	ldr	r3, [r7, #12]
200004fe:	781b      	ldrb	r3, [r3, #0]
}
20000500:	4618      	mov	r0, r3
20000502:	f107 0710 	add.w	r7, r7, #16
20000506:	46bd      	mov	sp, r7
20000508:	bd80      	pop	{r7, pc}
2000050a:	bf00      	nop

2000050c <writeRegister8>:


void writeRegister8(uint8_t reg, uint8_t val){
2000050c:	b580      	push	{r7, lr}
2000050e:	b086      	sub	sp, #24
20000510:	af02      	add	r7, sp, #8
20000512:	4602      	mov	r2, r0
20000514:	460b      	mov	r3, r1
20000516:	71fa      	strb	r2, [r7, #7]
20000518:	71bb      	strb	r3, [r7, #6]
	uint8_t status;
	uint8_t buffer[2] = {reg, val};
2000051a:	79fb      	ldrb	r3, [r7, #7]
2000051c:	733b      	strb	r3, [r7, #12]
2000051e:	79bb      	ldrb	r3, [r7, #6]
20000520:	737b      	strb	r3, [r7, #13]
	MSS_I2C_write( &g_mss_i2c1, DRV2605_ADDR, buffer, 2, MSS_I2C_RELEASE_BUS );
20000522:	f107 030c 	add.w	r3, r7, #12
20000526:	f04f 0200 	mov.w	r2, #0
2000052a:	9200      	str	r2, [sp, #0]
2000052c:	f241 7008 	movw	r0, #5896	; 0x1708
20000530:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000534:	f04f 015a 	mov.w	r1, #90	; 0x5a
20000538:	461a      	mov	r2, r3
2000053a:	f04f 0302 	mov.w	r3, #2
2000053e:	f000 f9ef 	bl	20000920 <MSS_I2C_write>
	status = MSS_I2C_wait_complete( &g_mss_i2c1, MSS_I2C_NO_TIMEOUT );
20000542:	f241 7008 	movw	r0, #5896	; 0x1708
20000546:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000054a:	f04f 0100 	mov.w	r1, #0
2000054e:	f000 fadb 	bl	20000b08 <MSS_I2C_wait_complete>
20000552:	4603      	mov	r3, r0
20000554:	73fb      	strb	r3, [r7, #15]
}
20000556:	f107 0710 	add.w	r7, r7, #16
2000055a:	46bd      	mov	sp, r7
2000055c:	bd80      	pop	{r7, pc}
2000055e:	bf00      	nop

20000560 <init>:

int init() {
20000560:	b580      	push	{r7, lr}
20000562:	af00      	add	r7, sp, #0
  //uint8_t id = readRegister8(DRV2605_REG_STATUS);
  //Serial.print("Status 0x"); Serial.println(id, HEX);

  writeRegister8(DRV2605_REG_MODE, 0x00); // out of standby
20000564:	f04f 0001 	mov.w	r0, #1
20000568:	f04f 0100 	mov.w	r1, #0
2000056c:	f7ff ffce 	bl	2000050c <writeRegister8>

  writeRegister8(DRV2605_REG_RTPIN, 0x00); // no real-time-playback
20000570:	f04f 0002 	mov.w	r0, #2
20000574:	f04f 0100 	mov.w	r1, #0
20000578:	f7ff ffc8 	bl	2000050c <writeRegister8>

  writeRegister8(DRV2605_REG_WAVESEQ1, 1); // strong click
2000057c:	f04f 0004 	mov.w	r0, #4
20000580:	f04f 0101 	mov.w	r1, #1
20000584:	f7ff ffc2 	bl	2000050c <writeRegister8>
  writeRegister8(DRV2605_REG_WAVESEQ2, 0); // end sequence
20000588:	f04f 0005 	mov.w	r0, #5
2000058c:	f04f 0100 	mov.w	r1, #0
20000590:	f7ff ffbc 	bl	2000050c <writeRegister8>

  writeRegister8(DRV2605_REG_OVERDRIVE, 0); // no overdrive
20000594:	f04f 000d 	mov.w	r0, #13
20000598:	f04f 0100 	mov.w	r1, #0
2000059c:	f7ff ffb6 	bl	2000050c <writeRegister8>

  writeRegister8(DRV2605_REG_SUSTAINPOS, 0);
200005a0:	f04f 000e 	mov.w	r0, #14
200005a4:	f04f 0100 	mov.w	r1, #0
200005a8:	f7ff ffb0 	bl	2000050c <writeRegister8>
  writeRegister8(DRV2605_REG_SUSTAINNEG, 0);
200005ac:	f04f 000f 	mov.w	r0, #15
200005b0:	f04f 0100 	mov.w	r1, #0
200005b4:	f7ff ffaa 	bl	2000050c <writeRegister8>
  writeRegister8(DRV2605_REG_BREAK, 0);
200005b8:	f04f 0010 	mov.w	r0, #16
200005bc:	f04f 0100 	mov.w	r1, #0
200005c0:	f7ff ffa4 	bl	2000050c <writeRegister8>
  writeRegister8(DRV2605_REG_AUDIOMAX, 0x64);
200005c4:	f04f 0013 	mov.w	r0, #19
200005c8:	f04f 0164 	mov.w	r1, #100	; 0x64
200005cc:	f7ff ff9e 	bl	2000050c <writeRegister8>

  // ERM open loop

  // turn off N_ERM_LRA
  writeRegister8(DRV2605_REG_FEEDBACK, readRegister8(DRV2605_REG_FEEDBACK) & 0x7F);
200005d0:	f04f 001a 	mov.w	r0, #26
200005d4:	f7ff ff64 	bl	200004a0 <readRegister8>
200005d8:	4603      	mov	r3, r0
200005da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
200005de:	f04f 001a 	mov.w	r0, #26
200005e2:	4619      	mov	r1, r3
200005e4:	f7ff ff92 	bl	2000050c <writeRegister8>
  // turn on ERM_OPEN_LOOP
  writeRegister8(DRV2605_REG_CONTROL3, readRegister8(DRV2605_REG_CONTROL3) | 0x20);
200005e8:	f04f 001d 	mov.w	r0, #29
200005ec:	f7ff ff58 	bl	200004a0 <readRegister8>
200005f0:	4603      	mov	r3, r0
200005f2:	f043 0320 	orr.w	r3, r3, #32
200005f6:	b2db      	uxtb	r3, r3
200005f8:	f04f 001d 	mov.w	r0, #29
200005fc:	4619      	mov	r1, r3
200005fe:	f7ff ff85 	bl	2000050c <writeRegister8>

  return 1;
20000602:	f04f 0301 	mov.w	r3, #1
}
20000606:	4618      	mov	r0, r3
20000608:	bd80      	pop	{r7, pc}
2000060a:	bf00      	nop

2000060c <setWaveform>:

void setWaveform(uint8_t slot, uint8_t w) {
2000060c:	b580      	push	{r7, lr}
2000060e:	b082      	sub	sp, #8
20000610:	af00      	add	r7, sp, #0
20000612:	4602      	mov	r2, r0
20000614:	460b      	mov	r3, r1
20000616:	71fa      	strb	r2, [r7, #7]
20000618:	71bb      	strb	r3, [r7, #6]
  writeRegister8(DRV2605_REG_WAVESEQ1+slot, w);
2000061a:	79fb      	ldrb	r3, [r7, #7]
2000061c:	f103 0304 	add.w	r3, r3, #4
20000620:	b2da      	uxtb	r2, r3
20000622:	79bb      	ldrb	r3, [r7, #6]
20000624:	4610      	mov	r0, r2
20000626:	4619      	mov	r1, r3
20000628:	f7ff ff70 	bl	2000050c <writeRegister8>
}
2000062c:	f107 0708 	add.w	r7, r7, #8
20000630:	46bd      	mov	sp, r7
20000632:	bd80      	pop	{r7, pc}

20000634 <selectLibrary>:

void selectLibrary(uint8_t lib) {
20000634:	b580      	push	{r7, lr}
20000636:	b082      	sub	sp, #8
20000638:	af00      	add	r7, sp, #0
2000063a:	4603      	mov	r3, r0
2000063c:	71fb      	strb	r3, [r7, #7]
  writeRegister8(DRV2605_REG_LIBRARY, lib);
2000063e:	79fb      	ldrb	r3, [r7, #7]
20000640:	f04f 0003 	mov.w	r0, #3
20000644:	4619      	mov	r1, r3
20000646:	f7ff ff61 	bl	2000050c <writeRegister8>
}
2000064a:	f107 0708 	add.w	r7, r7, #8
2000064e:	46bd      	mov	sp, r7
20000650:	bd80      	pop	{r7, pc}
20000652:	bf00      	nop

20000654 <go>:
/**************************************************************************/
/*!
  @brief Start playback of the waveforms (start moving!).
*/
/**************************************************************************/
void go() {
20000654:	b580      	push	{r7, lr}
20000656:	af00      	add	r7, sp, #0
  writeRegister8(DRV2605_REG_GO, 1);
20000658:	f04f 000c 	mov.w	r0, #12
2000065c:	f04f 0101 	mov.w	r1, #1
20000660:	f7ff ff54 	bl	2000050c <writeRegister8>
}
20000664:	bd80      	pop	{r7, pc}
20000666:	bf00      	nop

20000668 <setMode>:
    5: Real-time playback\n
    6: Diagnostics\n
    7: Auto calibration
*/
/**************************************************************************/
void setMode(uint8_t mode) {
20000668:	b580      	push	{r7, lr}
2000066a:	b082      	sub	sp, #8
2000066c:	af00      	add	r7, sp, #0
2000066e:	4603      	mov	r3, r0
20000670:	71fb      	strb	r3, [r7, #7]
  writeRegister8(DRV2605_REG_MODE, mode);
20000672:	79fb      	ldrb	r3, [r7, #7]
20000674:	f04f 0001 	mov.w	r0, #1
20000678:	4619      	mov	r1, r3
2000067a:	f7ff ff47 	bl	2000050c <writeRegister8>
}
2000067e:	f107 0708 	add.w	r7, r7, #8
20000682:	46bd      	mov	sp, r7
20000684:	bd80      	pop	{r7, pc}
20000686:	bf00      	nop

20000688 <useERM>:
/**************************************************************************/
/*!
  @brief Use ERM (Eccentric Rotating Mass) mode.
*/
/**************************************************************************/
void useERM () {
20000688:	b580      	push	{r7, lr}
2000068a:	af00      	add	r7, sp, #0
  writeRegister8(DRV2605_REG_FEEDBACK, readRegister8(DRV2605_REG_FEEDBACK) & 0x7F);
2000068c:	f04f 001a 	mov.w	r0, #26
20000690:	f7ff ff06 	bl	200004a0 <readRegister8>
20000694:	4603      	mov	r3, r0
20000696:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2000069a:	f04f 001a 	mov.w	r0, #26
2000069e:	4619      	mov	r1, r3
200006a0:	f7ff ff34 	bl	2000050c <writeRegister8>
}
200006a4:	bd80      	pop	{r7, pc}
200006a6:	bf00      	nop

200006a8 <main>:
/**************************************************************************/
void useLRA () {
  writeRegister8(DRV2605_REG_FEEDBACK, readRegister8(DRV2605_REG_FEEDBACK) | 0x80);
}

int main(){
200006a8:	b580      	push	{r7, lr}
200006aa:	af00      	add	r7, sp, #0
	// set the effect to play
	  MSS_I2C_init( &g_mss_i2c1, DRV2605_ADDR, MSS_I2C_PCLK_DIV_256 );
200006ac:	f241 7008 	movw	r0, #5896	; 0x1708
200006b0:	f2c2 0000 	movt	r0, #8192	; 0x2000
200006b4:	f04f 015a 	mov.w	r1, #90	; 0x5a
200006b8:	f04f 0200 	mov.w	r2, #0
200006bc:	f000 f87a 	bl	200007b4 <MSS_I2C_init>

	  init();
200006c0:	f7ff ff4e 	bl	20000560 <init>
	  useERM();
200006c4:	f7ff ffe0 	bl	20000688 <useERM>
	  selectLibrary(5);
200006c8:	f04f 0005 	mov.w	r0, #5
200006cc:	f7ff ffb2 	bl	20000634 <selectLibrary>

	  // I2C trigger by sending 'go' command
	  // default, internal trigger when sending GO command
	  setMode(DRV2605_MODE_INTTRIG);
200006d0:	f04f 0000 	mov.w	r0, #0
200006d4:	f7ff ffc8 	bl	20000668 <setMode>

	  setWaveform(0, 84);
200006d8:	f04f 0000 	mov.w	r0, #0
200006dc:	f04f 0154 	mov.w	r1, #84	; 0x54
200006e0:	f7ff ff94 	bl	2000060c <setWaveform>
	  setWaveform(1, 1);  // play effect
200006e4:	f04f 0001 	mov.w	r0, #1
200006e8:	f04f 0101 	mov.w	r1, #1
200006ec:	f7ff ff8e 	bl	2000060c <setWaveform>
	  setWaveform(2, 0);       // end waveform
200006f0:	f04f 0002 	mov.w	r0, #2
200006f4:	f04f 0100 	mov.w	r1, #0
200006f8:	f7ff ff88 	bl	2000060c <setWaveform>

	  // play the effect!
	  while(1){
		  go();
200006fc:	f7ff ffaa 	bl	20000654 <go>
		  //delay(1000);
	  }
20000700:	e7fc      	b.n	200006fc <main+0x54>
20000702:	bf00      	nop

20000704 <NVIC_EnableIRQ>:
 *
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
20000704:	b480      	push	{r7}
20000706:	b083      	sub	sp, #12
20000708:	af00      	add	r7, sp, #0
2000070a:	4603      	mov	r3, r0
2000070c:	80fb      	strh	r3, [r7, #6]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
2000070e:	f24e 1300 	movw	r3, #57600	; 0xe100
20000712:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000716:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
2000071a:	ea4f 1252 	mov.w	r2, r2, lsr #5
2000071e:	88f9      	ldrh	r1, [r7, #6]
20000720:	f001 011f 	and.w	r1, r1, #31
20000724:	f04f 0001 	mov.w	r0, #1
20000728:	fa00 f101 	lsl.w	r1, r0, r1
2000072c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20000730:	f107 070c 	add.w	r7, r7, #12
20000734:	46bd      	mov	sp, r7
20000736:	bc80      	pop	{r7}
20000738:	4770      	bx	lr
2000073a:	bf00      	nop

2000073c <NVIC_DisableIRQ>:
 * 
 * Disable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
2000073c:	b480      	push	{r7}
2000073e:	b083      	sub	sp, #12
20000740:	af00      	add	r7, sp, #0
20000742:	4603      	mov	r3, r0
20000744:	80fb      	strh	r3, [r7, #6]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
20000746:	f24e 1300 	movw	r3, #57600	; 0xe100
2000074a:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000074e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
20000752:	ea4f 1252 	mov.w	r2, r2, lsr #5
20000756:	88f9      	ldrh	r1, [r7, #6]
20000758:	f001 011f 	and.w	r1, r1, #31
2000075c:	f04f 0001 	mov.w	r0, #1
20000760:	fa00 f101 	lsl.w	r1, r0, r1
20000764:	f102 0220 	add.w	r2, r2, #32
20000768:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
2000076c:	f107 070c 	add.w	r7, r7, #12
20000770:	46bd      	mov	sp, r7
20000772:	bc80      	pop	{r7}
20000774:	4770      	bx	lr
20000776:	bf00      	nop

20000778 <NVIC_ClearPendingIRQ>:
 *
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
20000778:	b480      	push	{r7}
2000077a:	b083      	sub	sp, #12
2000077c:	af00      	add	r7, sp, #0
2000077e:	4603      	mov	r3, r0
20000780:	80fb      	strh	r3, [r7, #6]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
20000782:	f24e 1300 	movw	r3, #57600	; 0xe100
20000786:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000078a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
2000078e:	ea4f 1252 	mov.w	r2, r2, lsr #5
20000792:	88f9      	ldrh	r1, [r7, #6]
20000794:	f001 011f 	and.w	r1, r1, #31
20000798:	f04f 0001 	mov.w	r0, #1
2000079c:	fa00 f101 	lsl.w	r1, r0, r1
200007a0:	f102 0260 	add.w	r2, r2, #96	; 0x60
200007a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
200007a8:	f107 070c 	add.w	r7, r7, #12
200007ac:	46bd      	mov	sp, r7
200007ae:	bc80      	pop	{r7}
200007b0:	4770      	bx	lr
200007b2:	bf00      	nop

200007b4 <MSS_I2C_init>:
(
    mss_i2c_instance_t * this_i2c,
    uint8_t ser_address,
    mss_i2c_clock_divider_t ser_clock_speed
)
{
200007b4:	b580      	push	{r7, lr}
200007b6:	b084      	sub	sp, #16
200007b8:	af00      	add	r7, sp, #0
200007ba:	6078      	str	r0, [r7, #4]
200007bc:	4613      	mov	r3, r2
200007be:	460a      	mov	r2, r1
200007c0:	70fa      	strb	r2, [r7, #3]
200007c2:	70bb      	strb	r3, [r7, #2]
    uint32_t primask;
    uint_fast16_t clock_speed = (uint_fast16_t)ser_clock_speed;
200007c4:	78bb      	ldrb	r3, [r7, #2]
200007c6:	60fb      	str	r3, [r7, #12]
    
    ASSERT( (this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1) );
200007c8:	687a      	ldr	r2, [r7, #4]
200007ca:	f241 6394 	movw	r3, #5780	; 0x1694
200007ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
200007d2:	429a      	cmp	r2, r3
200007d4:	d007      	beq.n	200007e6 <MSS_I2C_init+0x32>
200007d6:	687a      	ldr	r2, [r7, #4]
200007d8:	f241 7308 	movw	r3, #5896	; 0x1708
200007dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200007e0:	429a      	cmp	r2, r3
200007e2:	d000      	beq.n	200007e6 <MSS_I2C_init+0x32>
200007e4:	be00      	bkpt	0x0000
     * Initialize all items of the this_i2c data structure to zero. This
     * initializes all state variables to their init value. It relies on
     * the fact that NO_TRANSACTION, I2C_SUCCESS and I2C_RELEASE_BUS all
     * have an actual value of zero.
     */
    primask = disable_interrupts();
200007e6:	f000 fe43 	bl	20001470 <disable_interrupts>
200007ea:	4603      	mov	r3, r0
200007ec:	60bb      	str	r3, [r7, #8]
    memset(this_i2c, 0, sizeof(mss_i2c_instance_t));
200007ee:	6878      	ldr	r0, [r7, #4]
200007f0:	f04f 0100 	mov.w	r1, #0
200007f4:	f04f 0274 	mov.w	r2, #116	; 0x74
200007f8:	f000 fece 	bl	20001598 <memset>
    
    if ( this_i2c == &g_mss_i2c0 )
200007fc:	687a      	ldr	r2, [r7, #4]
200007fe:	f241 6394 	movw	r3, #5780	; 0x1694
20000802:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000806:	429a      	cmp	r2, r3
20000808:	d12c      	bne.n	20000864 <MSS_I2C_init+0xb0>
    {
        this_i2c->irqn = I2C0_IRQn;
2000080a:	687b      	ldr	r3, [r7, #4]
2000080c:	f04f 020e 	mov.w	r2, #14
20000810:	825a      	strh	r2, [r3, #18]
        this_i2c->hw_reg = I2C0;
20000812:	687a      	ldr	r2, [r7, #4]
20000814:	f242 0300 	movw	r3, #8192	; 0x2000
20000818:	f2c4 0300 	movt	r3, #16384	; 0x4000
2000081c:	6153      	str	r3, [r2, #20]
        this_i2c->hw_reg_bit = I2C0_BITBAND;
2000081e:	687a      	ldr	r2, [r7, #4]
20000820:	f240 0300 	movw	r3, #0
20000824:	f2c4 2304 	movt	r3, #16900	; 0x4204
20000828:	6193      	str	r3, [r2, #24]
        
        /* reset I2C0 */
        SYSREG->SOFT_RST_CR |= SYSREG_I2C0_SOFTRESET_MASK;
2000082a:	f242 0300 	movw	r3, #8192	; 0x2000
2000082e:	f2ce 0304 	movt	r3, #57348	; 0xe004
20000832:	f242 0200 	movw	r2, #8192	; 0x2000
20000836:	f2ce 0204 	movt	r2, #57348	; 0xe004
2000083a:	6b12      	ldr	r2, [r2, #48]	; 0x30
2000083c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
20000840:	631a      	str	r2, [r3, #48]	; 0x30
        /* Clear any previously pended I2C0 interrupt */
        NVIC_ClearPendingIRQ( I2C0_IRQn );
20000842:	f04f 000e 	mov.w	r0, #14
20000846:	f7ff ff97 	bl	20000778 <NVIC_ClearPendingIRQ>
        /* Take I2C0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_I2C0_SOFTRESET_MASK;
2000084a:	f242 0300 	movw	r3, #8192	; 0x2000
2000084e:	f2ce 0304 	movt	r3, #57348	; 0xe004
20000852:	f242 0200 	movw	r2, #8192	; 0x2000
20000856:	f2ce 0204 	movt	r2, #57348	; 0xe004
2000085a:	6b12      	ldr	r2, [r2, #48]	; 0x30
2000085c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
20000860:	631a      	str	r2, [r3, #48]	; 0x30
20000862:	e02b      	b.n	200008bc <MSS_I2C_init+0x108>
    }
    else
    {
        this_i2c->irqn = I2C1_IRQn;
20000864:	687b      	ldr	r3, [r7, #4]
20000866:	f04f 0211 	mov.w	r2, #17
2000086a:	825a      	strh	r2, [r3, #18]
        this_i2c->hw_reg = I2C1;
2000086c:	687a      	ldr	r2, [r7, #4]
2000086e:	f242 0300 	movw	r3, #8192	; 0x2000
20000872:	f2c4 0301 	movt	r3, #16385	; 0x4001
20000876:	6153      	str	r3, [r2, #20]
        this_i2c->hw_reg_bit = I2C1_BITBAND;
20000878:	687a      	ldr	r2, [r7, #4]
2000087a:	f240 0300 	movw	r3, #0
2000087e:	f2c4 2324 	movt	r3, #16932	; 0x4224
20000882:	6193      	str	r3, [r2, #24]
        
        /* reset I2C1 */
        SYSREG->SOFT_RST_CR |= SYSREG_I2C1_SOFTRESET_MASK;
20000884:	f242 0300 	movw	r3, #8192	; 0x2000
20000888:	f2ce 0304 	movt	r3, #57348	; 0xe004
2000088c:	f242 0200 	movw	r2, #8192	; 0x2000
20000890:	f2ce 0204 	movt	r2, #57348	; 0xe004
20000894:	6b12      	ldr	r2, [r2, #48]	; 0x30
20000896:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
2000089a:	631a      	str	r2, [r3, #48]	; 0x30
        /* Clear any previously pended I2C1 interrupt */
        NVIC_ClearPendingIRQ( I2C1_IRQn );
2000089c:	f04f 0011 	mov.w	r0, #17
200008a0:	f7ff ff6a 	bl	20000778 <NVIC_ClearPendingIRQ>
        /* Take I2C1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_I2C1_SOFTRESET_MASK;
200008a4:	f242 0300 	movw	r3, #8192	; 0x2000
200008a8:	f2ce 0304 	movt	r3, #57348	; 0xe004
200008ac:	f242 0200 	movw	r2, #8192	; 0x2000
200008b0:	f2ce 0204 	movt	r2, #57348	; 0xe004
200008b4:	6b12      	ldr	r2, [r2, #48]	; 0x30
200008b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
200008ba:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Use same base address for SMBus bitband access */
    this_i2c->hw_smb_reg_bit = (I2C_SMBus_BitBand_TypeDef *)this_i2c->hw_reg_bit;
200008bc:	687b      	ldr	r3, [r7, #4]
200008be:	699b      	ldr	r3, [r3, #24]
200008c0:	461a      	mov	r2, r3
200008c2:	687b      	ldr	r3, [r7, #4]
200008c4:	61da      	str	r2, [r3, #28]

    /* Update Serial address of the device */
    this_i2c->ser_address = (uint_fast8_t)ser_address << 1u;
200008c6:	78fb      	ldrb	r3, [r7, #3]
200008c8:	ea4f 0243 	mov.w	r2, r3, lsl #1
200008cc:	687b      	ldr	r3, [r7, #4]
200008ce:	601a      	str	r2, [r3, #0]

    this_i2c->hw_reg_bit->CTRL_CR2 = (uint32_t)((clock_speed >> 2u) & 0x01u);
200008d0:	687b      	ldr	r3, [r7, #4]
200008d2:	699b      	ldr	r3, [r3, #24]
200008d4:	68fa      	ldr	r2, [r7, #12]
200008d6:	ea4f 0292 	mov.w	r2, r2, lsr #2
200008da:	f002 0201 	and.w	r2, r2, #1
200008de:	61da      	str	r2, [r3, #28]
    this_i2c->hw_reg_bit->CTRL_CR1 = (uint32_t)((clock_speed >> 1u) & 0x01u);
200008e0:	687b      	ldr	r3, [r7, #4]
200008e2:	699b      	ldr	r3, [r3, #24]
200008e4:	68fa      	ldr	r2, [r7, #12]
200008e6:	ea4f 0252 	mov.w	r2, r2, lsr #1
200008ea:	f002 0201 	and.w	r2, r2, #1
200008ee:	605a      	str	r2, [r3, #4]
    this_i2c->hw_reg_bit->CTRL_CR0 = (uint32_t)(clock_speed & 0x01u);
200008f0:	687b      	ldr	r3, [r7, #4]
200008f2:	699b      	ldr	r3, [r3, #24]
200008f4:	68fa      	ldr	r2, [r7, #12]
200008f6:	f002 0201 	and.w	r2, r2, #1
200008fa:	601a      	str	r2, [r3, #0]
    this_i2c->hw_reg->ADDR = (uint8_t)this_i2c->ser_address;
200008fc:	687b      	ldr	r3, [r7, #4]
200008fe:	695b      	ldr	r3, [r3, #20]
20000900:	687a      	ldr	r2, [r7, #4]
20000902:	6812      	ldr	r2, [r2, #0]
20000904:	b2d2      	uxtb	r2, r2
20000906:	731a      	strb	r2, [r3, #12]
    this_i2c->hw_reg_bit->CTRL_ENS1 = 0x01u; /* set enable bit */
20000908:	687b      	ldr	r3, [r7, #4]
2000090a:	699b      	ldr	r3, [r3, #24]
2000090c:	f04f 0201 	mov.w	r2, #1
20000910:	619a      	str	r2, [r3, #24]
    restore_interrupts( primask );
20000912:	68b8      	ldr	r0, [r7, #8]
20000914:	f000 fdbe 	bl	20001494 <restore_interrupts>
}
20000918:	f107 0710 	add.w	r7, r7, #16
2000091c:	46bd      	mov	sp, r7
2000091e:	bd80      	pop	{r7, pc}

20000920 <MSS_I2C_write>:
    uint8_t serial_addr,
    const uint8_t * write_buffer,
    uint16_t write_size,
    uint8_t options
)
{
20000920:	b580      	push	{r7, lr}
20000922:	b086      	sub	sp, #24
20000924:	af00      	add	r7, sp, #0
20000926:	60f8      	str	r0, [r7, #12]
20000928:	607a      	str	r2, [r7, #4]
2000092a:	460a      	mov	r2, r1
2000092c:	72fa      	strb	r2, [r7, #11]
2000092e:	807b      	strh	r3, [r7, #2]
    uint32_t primask;
    volatile uint8_t stat_ctrl;

    ASSERT((this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1));
20000930:	68fa      	ldr	r2, [r7, #12]
20000932:	f241 6394 	movw	r3, #5780	; 0x1694
20000936:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000093a:	429a      	cmp	r2, r3
2000093c:	d007      	beq.n	2000094e <MSS_I2C_write+0x2e>
2000093e:	68fa      	ldr	r2, [r7, #12]
20000940:	f241 7308 	movw	r3, #5896	; 0x1708
20000944:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000948:	429a      	cmp	r2, r3
2000094a:	d000      	beq.n	2000094e <MSS_I2C_write+0x2e>
2000094c:	be00      	bkpt	0x0000

    primask = disable_interrupts();
2000094e:	f000 fd8f 	bl	20001470 <disable_interrupts>
20000952:	4603      	mov	r3, r0
20000954:	617b      	str	r3, [r7, #20]

    /* Update the transaction only when there is no transaction going on I2C */
    if( this_i2c->transaction == NO_TRANSACTION)
20000956:	68fb      	ldr	r3, [r7, #12]
20000958:	7a1b      	ldrb	r3, [r3, #8]
2000095a:	2b00      	cmp	r3, #0
2000095c:	d103      	bne.n	20000966 <MSS_I2C_write+0x46>
    {
      this_i2c->transaction = MASTER_WRITE_TRANSACTION;
2000095e:	68fb      	ldr	r3, [r7, #12]
20000960:	f04f 0201 	mov.w	r2, #1
20000964:	721a      	strb	r2, [r3, #8]
    }

    /* Update the Pending transaction information so that transaction can restarted */
    this_i2c->pending_transaction = MASTER_WRITE_TRANSACTION ;
20000966:	68fb      	ldr	r3, [r7, #12]
20000968:	f04f 0201 	mov.w	r2, #1
2000096c:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

    /* Update target address */
    this_i2c->target_addr = (uint_fast8_t)serial_addr << 1u;
20000970:	7afb      	ldrb	r3, [r7, #11]
20000972:	ea4f 0243 	mov.w	r2, r3, lsl #1
20000976:	68fb      	ldr	r3, [r7, #12]
20000978:	605a      	str	r2, [r3, #4]

    this_i2c->dir = WRITE_DIR;
2000097a:	68fb      	ldr	r3, [r7, #12]
2000097c:	f04f 0200 	mov.w	r2, #0
20000980:	62da      	str	r2, [r3, #44]	; 0x2c

    this_i2c->master_tx_buffer = write_buffer;
20000982:	68fb      	ldr	r3, [r7, #12]
20000984:	687a      	ldr	r2, [r7, #4]
20000986:	621a      	str	r2, [r3, #32]
    this_i2c->master_tx_size = write_size;
20000988:	887a      	ldrh	r2, [r7, #2]
2000098a:	68fb      	ldr	r3, [r7, #12]
2000098c:	625a      	str	r2, [r3, #36]	; 0x24
    this_i2c->master_tx_idx = 0u;
2000098e:	68fb      	ldr	r3, [r7, #12]
20000990:	f04f 0200 	mov.w	r2, #0
20000994:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set I2C status in progress */
    this_i2c->master_status = MSS_I2C_IN_PROGRESS;
20000996:	68fb      	ldr	r3, [r7, #12]
20000998:	f04f 0201 	mov.w	r2, #1
2000099c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    this_i2c->options = options;
200009a0:	68fb      	ldr	r3, [r7, #12]
200009a2:	f897 2020 	ldrb.w	r2, [r7, #32]
200009a6:	741a      	strb	r2, [r3, #16]

    if(MSS_I2C_IN_PROGRESS == this_i2c->slave_status)
200009a8:	68fb      	ldr	r3, [r7, #12]
200009aa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
200009ae:	b2db      	uxtb	r3, r3
200009b0:	2b01      	cmp	r3, #1
200009b2:	d105      	bne.n	200009c0 <MSS_I2C_write+0xa0>
    {
        this_i2c->is_transaction_pending = 1u;
200009b4:	68fb      	ldr	r3, [r7, #12]
200009b6:	f04f 0201 	mov.w	r2, #1
200009ba:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
200009be:	e004      	b.n	200009ca <MSS_I2C_write+0xaa>
    }
    else
    {
        this_i2c->hw_reg_bit->CTRL_STA = 0x01u;
200009c0:	68fb      	ldr	r3, [r7, #12]
200009c2:	699b      	ldr	r3, [r3, #24]
200009c4:	f04f 0201 	mov.w	r2, #1
200009c8:	615a      	str	r2, [r3, #20]
    /*
     * Clear interrupts if required (depends on repeated starts).
     * Since the Bus is on hold, only then prior status needs to
     * be cleared.
     */
    if ( MSS_I2C_HOLD_BUS == this_i2c->bus_status )
200009ca:	68fb      	ldr	r3, [r7, #12]
200009cc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
200009d0:	2b01      	cmp	r3, #1
200009d2:	d111      	bne.n	200009f8 <MSS_I2C_write+0xd8>
    {
        this_i2c->hw_reg_bit->CTRL_SI = 0u;
200009d4:	68fb      	ldr	r3, [r7, #12]
200009d6:	699b      	ldr	r3, [r3, #24]
200009d8:	f04f 0200 	mov.w	r2, #0
200009dc:	60da      	str	r2, [r3, #12]
        stat_ctrl = this_i2c->hw_reg->STATUS;
200009de:	68fb      	ldr	r3, [r7, #12]
200009e0:	695b      	ldr	r3, [r3, #20]
200009e2:	791b      	ldrb	r3, [r3, #4]
200009e4:	74fb      	strb	r3, [r7, #19]
        stat_ctrl = stat_ctrl;  /* Avoids Lint warning */
200009e6:	7cfb      	ldrb	r3, [r7, #19]
200009e8:	b2db      	uxtb	r3, r3
200009ea:	74fb      	strb	r3, [r7, #19]
        NVIC_ClearPendingIRQ( this_i2c->irqn );
200009ec:	68fb      	ldr	r3, [r7, #12]
200009ee:	8a5b      	ldrh	r3, [r3, #18]
200009f0:	b21b      	sxth	r3, r3
200009f2:	4618      	mov	r0, r3
200009f4:	f7ff fec0 	bl	20000778 <NVIC_ClearPendingIRQ>
    }

    /* Enable the interrupt. ( Re-enable) */
    NVIC_EnableIRQ( this_i2c->irqn );
200009f8:	68fb      	ldr	r3, [r7, #12]
200009fa:	8a5b      	ldrh	r3, [r3, #18]
200009fc:	b21b      	sxth	r3, r3
200009fe:	4618      	mov	r0, r3
20000a00:	f7ff fe80 	bl	20000704 <NVIC_EnableIRQ>

    restore_interrupts( primask );
20000a04:	6978      	ldr	r0, [r7, #20]
20000a06:	f000 fd45 	bl	20001494 <restore_interrupts>
}
20000a0a:	f107 0718 	add.w	r7, r7, #24
20000a0e:	46bd      	mov	sp, r7
20000a10:	bd80      	pop	{r7, pc}
20000a12:	bf00      	nop

20000a14 <MSS_I2C_read>:
    uint8_t serial_addr,
    uint8_t * read_buffer,
    uint16_t read_size,
    uint8_t options
)
{
20000a14:	b580      	push	{r7, lr}
20000a16:	b086      	sub	sp, #24
20000a18:	af00      	add	r7, sp, #0
20000a1a:	60f8      	str	r0, [r7, #12]
20000a1c:	607a      	str	r2, [r7, #4]
20000a1e:	460a      	mov	r2, r1
20000a20:	72fa      	strb	r2, [r7, #11]
20000a22:	807b      	strh	r3, [r7, #2]
    uint32_t primask;
    volatile uint8_t stat_ctrl;

    ASSERT((this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1));
20000a24:	68fa      	ldr	r2, [r7, #12]
20000a26:	f241 6394 	movw	r3, #5780	; 0x1694
20000a2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000a2e:	429a      	cmp	r2, r3
20000a30:	d007      	beq.n	20000a42 <MSS_I2C_read+0x2e>
20000a32:	68fa      	ldr	r2, [r7, #12]
20000a34:	f241 7308 	movw	r3, #5896	; 0x1708
20000a38:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000a3c:	429a      	cmp	r2, r3
20000a3e:	d000      	beq.n	20000a42 <MSS_I2C_read+0x2e>
20000a40:	be00      	bkpt	0x0000

    primask = disable_interrupts();
20000a42:	f000 fd15 	bl	20001470 <disable_interrupts>
20000a46:	4603      	mov	r3, r0
20000a48:	617b      	str	r3, [r7, #20]
    
    /* Update the transaction only when there is no transaction going on I2C */
    if( this_i2c->transaction == NO_TRANSACTION)
20000a4a:	68fb      	ldr	r3, [r7, #12]
20000a4c:	7a1b      	ldrb	r3, [r3, #8]
20000a4e:	2b00      	cmp	r3, #0
20000a50:	d103      	bne.n	20000a5a <MSS_I2C_read+0x46>
    {
      this_i2c->transaction = MASTER_READ_TRANSACTION;
20000a52:	68fb      	ldr	r3, [r7, #12]
20000a54:	f04f 0202 	mov.w	r2, #2
20000a58:	721a      	strb	r2, [r3, #8]
    }

    /* Update the Pending transaction information so that transaction can restarted */
    this_i2c->pending_transaction = MASTER_READ_TRANSACTION ;
20000a5a:	68fb      	ldr	r3, [r7, #12]
20000a5c:	f04f 0202 	mov.w	r2, #2
20000a60:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

    /* Update target address */
    this_i2c->target_addr = (uint_fast8_t)serial_addr << 1u;
20000a64:	7afb      	ldrb	r3, [r7, #11]
20000a66:	ea4f 0243 	mov.w	r2, r3, lsl #1
20000a6a:	68fb      	ldr	r3, [r7, #12]
20000a6c:	605a      	str	r2, [r3, #4]

    this_i2c->dir = READ_DIR;
20000a6e:	68fb      	ldr	r3, [r7, #12]
20000a70:	f04f 0201 	mov.w	r2, #1
20000a74:	62da      	str	r2, [r3, #44]	; 0x2c

    this_i2c->master_rx_buffer = read_buffer;
20000a76:	68fb      	ldr	r3, [r7, #12]
20000a78:	687a      	ldr	r2, [r7, #4]
20000a7a:	631a      	str	r2, [r3, #48]	; 0x30
    this_i2c->master_rx_size = read_size;
20000a7c:	887a      	ldrh	r2, [r7, #2]
20000a7e:	68fb      	ldr	r3, [r7, #12]
20000a80:	635a      	str	r2, [r3, #52]	; 0x34
    this_i2c->master_rx_idx = 0u;
20000a82:	68fb      	ldr	r3, [r7, #12]
20000a84:	f04f 0200 	mov.w	r2, #0
20000a88:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Set I2C status in progress */
    this_i2c->master_status = MSS_I2C_IN_PROGRESS;
20000a8a:	68fb      	ldr	r3, [r7, #12]
20000a8c:	f04f 0201 	mov.w	r2, #1
20000a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    this_i2c->options = options;
20000a94:	68fb      	ldr	r3, [r7, #12]
20000a96:	f897 2020 	ldrb.w	r2, [r7, #32]
20000a9a:	741a      	strb	r2, [r3, #16]

    if(MSS_I2C_IN_PROGRESS == this_i2c->slave_status)
20000a9c:	68fb      	ldr	r3, [r7, #12]
20000a9e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
20000aa2:	b2db      	uxtb	r3, r3
20000aa4:	2b01      	cmp	r3, #1
20000aa6:	d105      	bne.n	20000ab4 <MSS_I2C_read+0xa0>
    {
        this_i2c->is_transaction_pending = 1u;
20000aa8:	68fb      	ldr	r3, [r7, #12]
20000aaa:	f04f 0201 	mov.w	r2, #1
20000aae:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
20000ab2:	e004      	b.n	20000abe <MSS_I2C_read+0xaa>
    }
    else
    {
        this_i2c->hw_reg_bit->CTRL_STA = 0x01u;
20000ab4:	68fb      	ldr	r3, [r7, #12]
20000ab6:	699b      	ldr	r3, [r3, #24]
20000ab8:	f04f 0201 	mov.w	r2, #1
20000abc:	615a      	str	r2, [r3, #20]
    /*
     * Clear interrupts if required (depends on repeated starts).
     * Since the Bus is on hold, only then prior status needs to
     * be cleared.
     */
    if ( MSS_I2C_HOLD_BUS == this_i2c->bus_status )
20000abe:	68fb      	ldr	r3, [r7, #12]
20000ac0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
20000ac4:	2b01      	cmp	r3, #1
20000ac6:	d111      	bne.n	20000aec <MSS_I2C_read+0xd8>
    {
        this_i2c->hw_reg_bit->CTRL_SI = 0u;
20000ac8:	68fb      	ldr	r3, [r7, #12]
20000aca:	699b      	ldr	r3, [r3, #24]
20000acc:	f04f 0200 	mov.w	r2, #0
20000ad0:	60da      	str	r2, [r3, #12]
        stat_ctrl = this_i2c->hw_reg->STATUS;
20000ad2:	68fb      	ldr	r3, [r7, #12]
20000ad4:	695b      	ldr	r3, [r3, #20]
20000ad6:	791b      	ldrb	r3, [r3, #4]
20000ad8:	74fb      	strb	r3, [r7, #19]
        stat_ctrl = stat_ctrl;  /* Avoids Lint warning */
20000ada:	7cfb      	ldrb	r3, [r7, #19]
20000adc:	b2db      	uxtb	r3, r3
20000ade:	74fb      	strb	r3, [r7, #19]
        NVIC_ClearPendingIRQ( this_i2c->irqn );
20000ae0:	68fb      	ldr	r3, [r7, #12]
20000ae2:	8a5b      	ldrh	r3, [r3, #18]
20000ae4:	b21b      	sxth	r3, r3
20000ae6:	4618      	mov	r0, r3
20000ae8:	f7ff fe46 	bl	20000778 <NVIC_ClearPendingIRQ>
    }
    
    /* Enable the interrupt. ( Re-enable) */
    NVIC_EnableIRQ( this_i2c->irqn );
20000aec:	68fb      	ldr	r3, [r7, #12]
20000aee:	8a5b      	ldrh	r3, [r3, #18]
20000af0:	b21b      	sxth	r3, r3
20000af2:	4618      	mov	r0, r3
20000af4:	f7ff fe06 	bl	20000704 <NVIC_EnableIRQ>
    restore_interrupts( primask );
20000af8:	6978      	ldr	r0, [r7, #20]
20000afa:	f000 fccb 	bl	20001494 <restore_interrupts>
}
20000afe:	f107 0718 	add.w	r7, r7, #24
20000b02:	46bd      	mov	sp, r7
20000b04:	bd80      	pop	{r7, pc}
20000b06:	bf00      	nop

20000b08 <MSS_I2C_wait_complete>:
mss_i2c_status_t MSS_I2C_wait_complete
(
    mss_i2c_instance_t * this_i2c,
    uint32_t timeout_ms
)
{
20000b08:	b480      	push	{r7}
20000b0a:	b085      	sub	sp, #20
20000b0c:	af00      	add	r7, sp, #0
20000b0e:	6078      	str	r0, [r7, #4]
20000b10:	6039      	str	r1, [r7, #0]
	mss_i2c_status_t i2c_status;
    
    ASSERT( (this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1) );
20000b12:	687a      	ldr	r2, [r7, #4]
20000b14:	f241 6394 	movw	r3, #5780	; 0x1694
20000b18:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000b1c:	429a      	cmp	r2, r3
20000b1e:	d007      	beq.n	20000b30 <MSS_I2C_wait_complete+0x28>
20000b20:	687a      	ldr	r2, [r7, #4]
20000b22:	f241 7308 	movw	r3, #5896	; 0x1708
20000b26:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000b2a:	429a      	cmp	r2, r3
20000b2c:	d000      	beq.n	20000b30 <MSS_I2C_wait_complete+0x28>
20000b2e:	be00      	bkpt	0x0000
    
    this_i2c->master_timeout_ms = timeout_ms;
20000b30:	687b      	ldr	r3, [r7, #4]
20000b32:	683a      	ldr	r2, [r7, #0]
20000b34:	641a      	str	r2, [r3, #64]	; 0x40

    /* Run the loop until state returns I2C_FAILED  or I2C_SUCESS*/
    do {
        i2c_status = this_i2c->master_status;
20000b36:	687b      	ldr	r3, [r7, #4]
20000b38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
20000b3c:	73fb      	strb	r3, [r7, #15]
    } while(MSS_I2C_IN_PROGRESS == i2c_status);
20000b3e:	7bfb      	ldrb	r3, [r7, #15]
20000b40:	2b01      	cmp	r3, #1
20000b42:	d0f8      	beq.n	20000b36 <MSS_I2C_wait_complete+0x2e>

    return i2c_status;
20000b44:	7bfb      	ldrb	r3, [r7, #15]
}
20000b46:	4618      	mov	r0, r3
20000b48:	f107 0714 	add.w	r7, r7, #20
20000b4c:	46bd      	mov	sp, r7
20000b4e:	bc80      	pop	{r7}
20000b50:	4770      	bx	lr
20000b52:	bf00      	nop

20000b54 <enable_slave_if_required>:
 */
static void enable_slave_if_required
(
    mss_i2c_instance_t * this_i2c
)
{
20000b54:	b480      	push	{r7}
20000b56:	b083      	sub	sp, #12
20000b58:	af00      	add	r7, sp, #0
20000b5a:	6078      	str	r0, [r7, #4]
    if( this_i2c->is_slave_enabled )
20000b5c:	687b      	ldr	r3, [r7, #4]
20000b5e:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
20000b62:	2b00      	cmp	r3, #0
20000b64:	d004      	beq.n	20000b70 <enable_slave_if_required+0x1c>
    {
        this_i2c->hw_reg_bit->CTRL_AA = 1u;
20000b66:	687b      	ldr	r3, [r7, #4]
20000b68:	699b      	ldr	r3, [r3, #24]
20000b6a:	f04f 0201 	mov.w	r2, #1
20000b6e:	609a      	str	r2, [r3, #8]
    }
}
20000b70:	f107 070c 	add.w	r7, r7, #12
20000b74:	46bd      	mov	sp, r7
20000b76:	bc80      	pop	{r7}
20000b78:	4770      	bx	lr
20000b7a:	bf00      	nop

20000b7c <mss_i2c_isr>:
 */
static void mss_i2c_isr
(
    mss_i2c_instance_t * this_i2c
)
{
20000b7c:	b580      	push	{r7, lr}
20000b7e:	b084      	sub	sp, #16
20000b80:	af00      	add	r7, sp, #0
20000b82:	6078      	str	r0, [r7, #4]
    volatile uint8_t status;
    uint8_t data;
    uint8_t hold_bus;
    uint8_t clear_irq = 1u;
20000b84:	f04f 0301 	mov.w	r3, #1
20000b88:	73bb      	strb	r3, [r7, #14]
    ASSERT( (this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1) );
20000b8a:	687a      	ldr	r2, [r7, #4]
20000b8c:	f241 6394 	movw	r3, #5780	; 0x1694
20000b90:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000b94:	429a      	cmp	r2, r3
20000b96:	d007      	beq.n	20000ba8 <mss_i2c_isr+0x2c>
20000b98:	687a      	ldr	r2, [r7, #4]
20000b9a:	f241 7308 	movw	r3, #5896	; 0x1708
20000b9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000ba2:	429a      	cmp	r2, r3
20000ba4:	d000      	beq.n	20000ba8 <mss_i2c_isr+0x2c>
20000ba6:	be00      	bkpt	0x0000

    status = this_i2c->hw_reg->STATUS;
20000ba8:	687b      	ldr	r3, [r7, #4]
20000baa:	695b      	ldr	r3, [r3, #20]
20000bac:	791b      	ldrb	r3, [r3, #4]
20000bae:	72fb      	strb	r3, [r7, #11]

    switch( status )
20000bb0:	7afb      	ldrb	r3, [r7, #11]
20000bb2:	b2db      	uxtb	r3, r3
20000bb4:	f1a3 0308 	sub.w	r3, r3, #8
20000bb8:	2bd0      	cmp	r3, #208	; 0xd0
20000bba:	f200 841c 	bhi.w	200013f6 <mss_i2c_isr+0x87a>
20000bbe:	a201      	add	r2, pc, #4	; (adr r2, 20000bc4 <mss_i2c_isr+0x48>)
20000bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20000bc4:	20000f09 	.word	0x20000f09
20000bc8:	200013f7 	.word	0x200013f7
20000bcc:	200013f7 	.word	0x200013f7
20000bd0:	200013f7 	.word	0x200013f7
20000bd4:	200013f7 	.word	0x200013f7
20000bd8:	200013f7 	.word	0x200013f7
20000bdc:	200013f7 	.word	0x200013f7
20000be0:	200013f7 	.word	0x200013f7
20000be4:	20000f09 	.word	0x20000f09
20000be8:	200013f7 	.word	0x200013f7
20000bec:	200013f7 	.word	0x200013f7
20000bf0:	200013f7 	.word	0x200013f7
20000bf4:	200013f7 	.word	0x200013f7
20000bf8:	200013f7 	.word	0x200013f7
20000bfc:	200013f7 	.word	0x200013f7
20000c00:	200013f7 	.word	0x200013f7
20000c04:	20000fad 	.word	0x20000fad
20000c08:	200013f7 	.word	0x200013f7
20000c0c:	200013f7 	.word	0x200013f7
20000c10:	200013f7 	.word	0x200013f7
20000c14:	200013f7 	.word	0x200013f7
20000c18:	200013f7 	.word	0x200013f7
20000c1c:	200013f7 	.word	0x200013f7
20000c20:	200013f7 	.word	0x200013f7
20000c24:	20000f89 	.word	0x20000f89
20000c28:	200013f7 	.word	0x200013f7
20000c2c:	200013f7 	.word	0x200013f7
20000c30:	200013f7 	.word	0x200013f7
20000c34:	200013f7 	.word	0x200013f7
20000c38:	200013f7 	.word	0x200013f7
20000c3c:	200013f7 	.word	0x200013f7
20000c40:	200013f7 	.word	0x200013f7
20000c44:	20000fad 	.word	0x20000fad
20000c48:	200013f7 	.word	0x200013f7
20000c4c:	200013f7 	.word	0x200013f7
20000c50:	200013f7 	.word	0x200013f7
20000c54:	200013f7 	.word	0x200013f7
20000c58:	200013f7 	.word	0x200013f7
20000c5c:	200013f7 	.word	0x200013f7
20000c60:	200013f7 	.word	0x200013f7
20000c64:	20001041 	.word	0x20001041
20000c68:	200013f7 	.word	0x200013f7
20000c6c:	200013f7 	.word	0x200013f7
20000c70:	200013f7 	.word	0x200013f7
20000c74:	200013f7 	.word	0x200013f7
20000c78:	200013f7 	.word	0x200013f7
20000c7c:	200013f7 	.word	0x200013f7
20000c80:	200013f7 	.word	0x200013f7
20000c84:	20000f7d 	.word	0x20000f7d
20000c88:	200013f7 	.word	0x200013f7
20000c8c:	200013f7 	.word	0x200013f7
20000c90:	200013f7 	.word	0x200013f7
20000c94:	200013f7 	.word	0x200013f7
20000c98:	200013f7 	.word	0x200013f7
20000c9c:	200013f7 	.word	0x200013f7
20000ca0:	200013f7 	.word	0x200013f7
20000ca4:	20001065 	.word	0x20001065
20000ca8:	200013f7 	.word	0x200013f7
20000cac:	200013f7 	.word	0x200013f7
20000cb0:	200013f7 	.word	0x200013f7
20000cb4:	200013f7 	.word	0x200013f7
20000cb8:	200013f7 	.word	0x200013f7
20000cbc:	200013f7 	.word	0x200013f7
20000cc0:	200013f7 	.word	0x200013f7
20000cc4:	200010b5 	.word	0x200010b5
20000cc8:	200013f7 	.word	0x200013f7
20000ccc:	200013f7 	.word	0x200013f7
20000cd0:	200013f7 	.word	0x200013f7
20000cd4:	200013f7 	.word	0x200013f7
20000cd8:	200013f7 	.word	0x200013f7
20000cdc:	200013f7 	.word	0x200013f7
20000ce0:	200013f7 	.word	0x200013f7
20000ce4:	200010d9 	.word	0x200010d9
20000ce8:	200013f7 	.word	0x200013f7
20000cec:	200013f7 	.word	0x200013f7
20000cf0:	200013f7 	.word	0x200013f7
20000cf4:	200013f7 	.word	0x200013f7
20000cf8:	200013f7 	.word	0x200013f7
20000cfc:	200013f7 	.word	0x200013f7
20000d00:	200013f7 	.word	0x200013f7
20000d04:	20001113 	.word	0x20001113
20000d08:	200013f7 	.word	0x200013f7
20000d0c:	200013f7 	.word	0x200013f7
20000d10:	200013f7 	.word	0x200013f7
20000d14:	200013f7 	.word	0x200013f7
20000d18:	200013f7 	.word	0x200013f7
20000d1c:	200013f7 	.word	0x200013f7
20000d20:	200013f7 	.word	0x200013f7
20000d24:	200011b5 	.word	0x200011b5
20000d28:	200013f7 	.word	0x200013f7
20000d2c:	200013f7 	.word	0x200013f7
20000d30:	200013f7 	.word	0x200013f7
20000d34:	200013f7 	.word	0x200013f7
20000d38:	200013f7 	.word	0x200013f7
20000d3c:	200013f7 	.word	0x200013f7
20000d40:	200013f7 	.word	0x200013f7
20000d44:	200011ab 	.word	0x200011ab
20000d48:	200013f7 	.word	0x200013f7
20000d4c:	200013f7 	.word	0x200013f7
20000d50:	200013f7 	.word	0x200013f7
20000d54:	200013f7 	.word	0x200013f7
20000d58:	200013f7 	.word	0x200013f7
20000d5c:	200013f7 	.word	0x200013f7
20000d60:	200013f7 	.word	0x200013f7
20000d64:	200011b5 	.word	0x200011b5
20000d68:	200013f7 	.word	0x200013f7
20000d6c:	200013f7 	.word	0x200013f7
20000d70:	200013f7 	.word	0x200013f7
20000d74:	200013f7 	.word	0x200013f7
20000d78:	200013f7 	.word	0x200013f7
20000d7c:	200013f7 	.word	0x200013f7
20000d80:	200013f7 	.word	0x200013f7
20000d84:	200011ab 	.word	0x200011ab
20000d88:	200013f7 	.word	0x200013f7
20000d8c:	200013f7 	.word	0x200013f7
20000d90:	200013f7 	.word	0x200013f7
20000d94:	200013f7 	.word	0x200013f7
20000d98:	200013f7 	.word	0x200013f7
20000d9c:	200013f7 	.word	0x200013f7
20000da0:	200013f7 	.word	0x200013f7
20000da4:	200011f7 	.word	0x200011f7
20000da8:	200013f7 	.word	0x200013f7
20000dac:	200013f7 	.word	0x200013f7
20000db0:	200013f7 	.word	0x200013f7
20000db4:	200013f7 	.word	0x200013f7
20000db8:	200013f7 	.word	0x200013f7
20000dbc:	200013f7 	.word	0x200013f7
20000dc0:	200013f7 	.word	0x200013f7
20000dc4:	20001177 	.word	0x20001177
20000dc8:	200013f7 	.word	0x200013f7
20000dcc:	200013f7 	.word	0x200013f7
20000dd0:	200013f7 	.word	0x200013f7
20000dd4:	200013f7 	.word	0x200013f7
20000dd8:	200013f7 	.word	0x200013f7
20000ddc:	200013f7 	.word	0x200013f7
20000de0:	200013f7 	.word	0x200013f7
20000de4:	200011f7 	.word	0x200011f7
20000de8:	200013f7 	.word	0x200013f7
20000dec:	200013f7 	.word	0x200013f7
20000df0:	200013f7 	.word	0x200013f7
20000df4:	200013f7 	.word	0x200013f7
20000df8:	200013f7 	.word	0x200013f7
20000dfc:	200013f7 	.word	0x200013f7
20000e00:	200013f7 	.word	0x200013f7
20000e04:	20001177 	.word	0x20001177
20000e08:	200013f7 	.word	0x200013f7
20000e0c:	200013f7 	.word	0x200013f7
20000e10:	200013f7 	.word	0x200013f7
20000e14:	200013f7 	.word	0x200013f7
20000e18:	200013f7 	.word	0x200013f7
20000e1c:	200013f7 	.word	0x200013f7
20000e20:	200013f7 	.word	0x200013f7
20000e24:	20001253 	.word	0x20001253
20000e28:	200013f7 	.word	0x200013f7
20000e2c:	200013f7 	.word	0x200013f7
20000e30:	200013f7 	.word	0x200013f7
20000e34:	200013f7 	.word	0x200013f7
20000e38:	200013f7 	.word	0x200013f7
20000e3c:	200013f7 	.word	0x200013f7
20000e40:	200013f7 	.word	0x200013f7
20000e44:	2000132b 	.word	0x2000132b
20000e48:	200013f7 	.word	0x200013f7
20000e4c:	200013f7 	.word	0x200013f7
20000e50:	200013f7 	.word	0x200013f7
20000e54:	200013f7 	.word	0x200013f7
20000e58:	200013f7 	.word	0x200013f7
20000e5c:	200013f7 	.word	0x200013f7
20000e60:	200013f7 	.word	0x200013f7
20000e64:	2000132b 	.word	0x2000132b
20000e68:	200013f7 	.word	0x200013f7
20000e6c:	200013f7 	.word	0x200013f7
20000e70:	200013f7 	.word	0x200013f7
20000e74:	200013f7 	.word	0x200013f7
20000e78:	200013f7 	.word	0x200013f7
20000e7c:	200013f7 	.word	0x200013f7
20000e80:	200013f7 	.word	0x200013f7
20000e84:	2000132b 	.word	0x2000132b
20000e88:	200013f7 	.word	0x200013f7
20000e8c:	200013f7 	.word	0x200013f7
20000e90:	200013f7 	.word	0x200013f7
20000e94:	200013f7 	.word	0x200013f7
20000e98:	200013f7 	.word	0x200013f7
20000e9c:	200013f7 	.word	0x200013f7
20000ea0:	200013f7 	.word	0x200013f7
20000ea4:	200013bd 	.word	0x200013bd
20000ea8:	200013f7 	.word	0x200013f7
20000eac:	200013f7 	.word	0x200013f7
20000eb0:	200013f7 	.word	0x200013f7
20000eb4:	200013f7 	.word	0x200013f7
20000eb8:	200013f7 	.word	0x200013f7
20000ebc:	200013f7 	.word	0x200013f7
20000ec0:	200013f7 	.word	0x200013f7
20000ec4:	200013bd 	.word	0x200013bd
20000ec8:	200013f7 	.word	0x200013f7
20000ecc:	200013f7 	.word	0x200013f7
20000ed0:	200013f7 	.word	0x200013f7
20000ed4:	200013f7 	.word	0x200013f7
20000ed8:	200013f7 	.word	0x200013f7
20000edc:	200013f7 	.word	0x200013f7
20000ee0:	200013f7 	.word	0x200013f7
20000ee4:	200013f7 	.word	0x200013f7
20000ee8:	200013f7 	.word	0x200013f7
20000eec:	200013f7 	.word	0x200013f7
20000ef0:	200013f7 	.word	0x200013f7
20000ef4:	200013f7 	.word	0x200013f7
20000ef8:	200013f7 	.word	0x200013f7
20000efc:	200013f7 	.word	0x200013f7
20000f00:	200013f7 	.word	0x200013f7
20000f04:	200012fd 	.word	0x200012fd
    {
        /************** MASTER TRANSMITTER / RECEIVER *******************/
      
        case ST_START: /* start has been xmt'd */
        case ST_RESTART: /* repeated start has been xmt'd */
            this_i2c->hw_reg_bit->CTRL_STA = 0u;
20000f08:	687b      	ldr	r3, [r7, #4]
20000f0a:	699b      	ldr	r3, [r3, #24]
20000f0c:	f04f 0200 	mov.w	r2, #0
20000f10:	615a      	str	r2, [r3, #20]
            this_i2c->hw_reg->DATA = (uint8_t)this_i2c->target_addr;
20000f12:	687b      	ldr	r3, [r7, #4]
20000f14:	695b      	ldr	r3, [r3, #20]
20000f16:	687a      	ldr	r2, [r7, #4]
20000f18:	6852      	ldr	r2, [r2, #4]
20000f1a:	b2d2      	uxtb	r2, r2
20000f1c:	721a      	strb	r2, [r3, #8]
            this_i2c->hw_reg_bit->DATA_DIR = this_i2c->dir;
20000f1e:	687b      	ldr	r3, [r7, #4]
20000f20:	699b      	ldr	r3, [r3, #24]
20000f22:	687a      	ldr	r2, [r7, #4]
20000f24:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
20000f26:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
            if ( this_i2c->dir == WRITE_DIR )
20000f2a:	687b      	ldr	r3, [r7, #4]
20000f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20000f2e:	2b00      	cmp	r3, #0
20000f30:	d104      	bne.n	20000f3c <mss_i2c_isr+0x3c0>
            {
                this_i2c->master_tx_idx = 0u;
20000f32:	687b      	ldr	r3, [r7, #4]
20000f34:	f04f 0200 	mov.w	r2, #0
20000f38:	629a      	str	r2, [r3, #40]	; 0x28
20000f3a:	e007      	b.n	20000f4c <mss_i2c_isr+0x3d0>
            }
            else if ( this_i2c->dir == READ_DIR)
20000f3c:	687b      	ldr	r3, [r7, #4]
20000f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20000f40:	2b01      	cmp	r3, #1
20000f42:	d103      	bne.n	20000f4c <mss_i2c_isr+0x3d0>
            {
                this_i2c->master_rx_idx = 0u;
20000f44:	687b      	ldr	r3, [r7, #4]
20000f46:	f04f 0200 	mov.w	r2, #0
20000f4a:	639a      	str	r2, [r3, #56]	; 0x38
            /*
             * Clear the pending transaction. This condition will be true if the slave 
             * has acquired the bus to carry out pending master transaction which 
             * it had received during its slave transmission or reception mode. 
             */
            if(this_i2c->is_transaction_pending)
20000f4c:	687b      	ldr	r3, [r7, #4]
20000f4e:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
20000f52:	2b00      	cmp	r3, #0
20000f54:	d004      	beq.n	20000f60 <mss_i2c_isr+0x3e4>
            {
                this_i2c->is_transaction_pending = 0u;
20000f56:	687b      	ldr	r3, [r7, #4]
20000f58:	f04f 0200 	mov.w	r2, #0
20000f5c:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71

            /*
             * Make sure to update proper transaction after master START
             * or RESTART
             */
            if(this_i2c->transaction != this_i2c->pending_transaction)
20000f60:	687b      	ldr	r3, [r7, #4]
20000f62:	7a1a      	ldrb	r2, [r3, #8]
20000f64:	687b      	ldr	r3, [r7, #4]
20000f66:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
20000f6a:	429a      	cmp	r2, r3
20000f6c:	f000 8267 	beq.w	2000143e <mss_i2c_isr+0x8c2>
            {
                this_i2c->transaction = this_i2c->pending_transaction;
20000f70:	687b      	ldr	r3, [r7, #4]
20000f72:	f893 2072 	ldrb.w	r2, [r3, #114]	; 0x72
20000f76:	687b      	ldr	r3, [r7, #4]
20000f78:	721a      	strb	r2, [r3, #8]
            }
            break;
20000f7a:	e269      	b.n	20001450 <mss_i2c_isr+0x8d4>
            
        case ST_LOST_ARB:
            /* Set start bit.  Let's keep trying!  Don't give up! */
            this_i2c->hw_reg_bit->CTRL_STA = 0x01u;
20000f7c:	687b      	ldr	r3, [r7, #4]
20000f7e:	699b      	ldr	r3, [r3, #24]
20000f80:	f04f 0201 	mov.w	r2, #1
20000f84:	615a      	str	r2, [r3, #20]
            break;
20000f86:	e263      	b.n	20001450 <mss_i2c_isr+0x8d4>
            
        /******************* MASTER TRANSMITTER *************************/
        case ST_SLAW_NACK:
            /* SLA+W has been transmitted; not ACK has been received - let's stop. */
            this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
20000f88:	687b      	ldr	r3, [r7, #4]
20000f8a:	699b      	ldr	r3, [r3, #24]
20000f8c:	f04f 0201 	mov.w	r2, #1
20000f90:	611a      	str	r2, [r3, #16]
            this_i2c->master_status = MSS_I2C_FAILED;
20000f92:	687b      	ldr	r3, [r7, #4]
20000f94:	f04f 0202 	mov.w	r2, #2
20000f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
            this_i2c->transaction = NO_TRANSACTION;
20000f9c:	687b      	ldr	r3, [r7, #4]
20000f9e:	f04f 0200 	mov.w	r2, #0
20000fa2:	721a      	strb	r2, [r3, #8]
            enable_slave_if_required(this_i2c);
20000fa4:	6878      	ldr	r0, [r7, #4]
20000fa6:	f7ff fdd5 	bl	20000b54 <enable_slave_if_required>
            break;
20000faa:	e251      	b.n	20001450 <mss_i2c_isr+0x8d4>
            
        case ST_SLAW_ACK:
        case ST_TX_DATA_ACK:
            /* data byte has been xmt'd with ACK, time to send stop bit or repeated start. */
            if (this_i2c->master_tx_idx < this_i2c->master_tx_size)
20000fac:	687b      	ldr	r3, [r7, #4]
20000fae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
20000fb0:	687b      	ldr	r3, [r7, #4]
20000fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20000fb4:	429a      	cmp	r2, r3
20000fb6:	d20d      	bcs.n	20000fd4 <mss_i2c_isr+0x458>
            {    
                this_i2c->hw_reg->DATA = this_i2c->master_tx_buffer[this_i2c->master_tx_idx++];
20000fb8:	687b      	ldr	r3, [r7, #4]
20000fba:	695a      	ldr	r2, [r3, #20]
20000fbc:	687b      	ldr	r3, [r7, #4]
20000fbe:	6a19      	ldr	r1, [r3, #32]
20000fc0:	687b      	ldr	r3, [r7, #4]
20000fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20000fc4:	4419      	add	r1, r3
20000fc6:	7809      	ldrb	r1, [r1, #0]
20000fc8:	7211      	strb	r1, [r2, #8]
20000fca:	f103 0201 	add.w	r2, r3, #1
20000fce:	687b      	ldr	r3, [r7, #4]
20000fd0:	629a      	str	r2, [r3, #40]	; 0x28
                    NVIC_DisableIRQ( this_i2c->irqn );
                    clear_irq = 0u;
                }
                this_i2c->master_status = MSS_I2C_SUCCESS;
            }
            break;
20000fd2:	e23d      	b.n	20001450 <mss_i2c_isr+0x8d4>
            /* data byte has been xmt'd with ACK, time to send stop bit or repeated start. */
            if (this_i2c->master_tx_idx < this_i2c->master_tx_size)
            {    
                this_i2c->hw_reg->DATA = this_i2c->master_tx_buffer[this_i2c->master_tx_idx++];
            }
            else if ( this_i2c->transaction == MASTER_RANDOM_READ_TRANSACTION )
20000fd4:	687b      	ldr	r3, [r7, #4]
20000fd6:	7a1b      	ldrb	r3, [r3, #8]
20000fd8:	2b03      	cmp	r3, #3
20000fda:	d109      	bne.n	20000ff0 <mss_i2c_isr+0x474>
            {
                /* We are finished sending the address offset part of a random read transaction.
                 * It is is time to send a restart in order to change direction. */
                 this_i2c->dir = READ_DIR;
20000fdc:	687b      	ldr	r3, [r7, #4]
20000fde:	f04f 0201 	mov.w	r2, #1
20000fe2:	62da      	str	r2, [r3, #44]	; 0x2c
                 this_i2c->hw_reg_bit->CTRL_STA = 0x01u;
20000fe4:	687b      	ldr	r3, [r7, #4]
20000fe6:	699b      	ldr	r3, [r3, #24]
20000fe8:	f04f 0201 	mov.w	r2, #1
20000fec:	615a      	str	r2, [r3, #20]
                    NVIC_DisableIRQ( this_i2c->irqn );
                    clear_irq = 0u;
                }
                this_i2c->master_status = MSS_I2C_SUCCESS;
            }
            break;
20000fee:	e22f      	b.n	20001450 <mss_i2c_isr+0x8d4>
            {
                /*
                 * Set the transaction back to NO_TRANSACTION to allow user to do further
                 * transaction
                 */
                this_i2c->transaction = NO_TRANSACTION;
20000ff0:	687b      	ldr	r3, [r7, #4]
20000ff2:	f04f 0200 	mov.w	r2, #0
20000ff6:	721a      	strb	r2, [r3, #8]
                hold_bus = this_i2c->options & MSS_I2C_HOLD_BUS;
20000ff8:	687b      	ldr	r3, [r7, #4]
20000ffa:	7c1b      	ldrb	r3, [r3, #16]
20000ffc:	f003 0301 	and.w	r3, r3, #1
20001000:	737b      	strb	r3, [r7, #13]

                /* Store the information of current I2C bus status in the bus_status*/
                this_i2c->bus_status  = hold_bus;
20001002:	687b      	ldr	r3, [r7, #4]
20001004:	7b7a      	ldrb	r2, [r7, #13]
20001006:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                if ( hold_bus == 0u )
2000100a:	7b7b      	ldrb	r3, [r7, #13]
2000100c:	2b00      	cmp	r3, #0
2000100e:	d108      	bne.n	20001022 <mss_i2c_isr+0x4a6>
                { 
                    this_i2c->hw_reg_bit->CTRL_STO = 0x01u; /*xmt stop condition */
20001010:	687b      	ldr	r3, [r7, #4]
20001012:	699b      	ldr	r3, [r3, #24]
20001014:	f04f 0201 	mov.w	r2, #1
20001018:	611a      	str	r2, [r3, #16]
                    enable_slave_if_required(this_i2c);
2000101a:	6878      	ldr	r0, [r7, #4]
2000101c:	f7ff fd9a 	bl	20000b54 <enable_slave_if_required>
20001020:	e008      	b.n	20001034 <mss_i2c_isr+0x4b8>
                }
                else
                {
                    NVIC_DisableIRQ( this_i2c->irqn );
20001022:	687b      	ldr	r3, [r7, #4]
20001024:	8a5b      	ldrh	r3, [r3, #18]
20001026:	b21b      	sxth	r3, r3
20001028:	4618      	mov	r0, r3
2000102a:	f7ff fb87 	bl	2000073c <NVIC_DisableIRQ>
                    clear_irq = 0u;
2000102e:	f04f 0300 	mov.w	r3, #0
20001032:	73bb      	strb	r3, [r7, #14]
                }
                this_i2c->master_status = MSS_I2C_SUCCESS;
20001034:	687b      	ldr	r3, [r7, #4]
20001036:	f04f 0200 	mov.w	r2, #0
2000103a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
            }
            break;
2000103e:	e207      	b.n	20001450 <mss_i2c_isr+0x8d4>
            /* data byte SENT, ACK to be received
             * In fact, this means we've received a NACK (This may not be 
             * obvious, but if we've rec'd an ACK then we would be in state 
             * 0x28!) hence, let's send a stop bit
             */
            this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
20001040:	687b      	ldr	r3, [r7, #4]
20001042:	699b      	ldr	r3, [r3, #24]
20001044:	f04f 0201 	mov.w	r2, #1
20001048:	611a      	str	r2, [r3, #16]
            this_i2c->master_status = MSS_I2C_FAILED;
2000104a:	687b      	ldr	r3, [r7, #4]
2000104c:	f04f 0202 	mov.w	r2, #2
20001050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20001054:	687b      	ldr	r3, [r7, #4]
20001056:	f04f 0200 	mov.w	r2, #0
2000105a:	721a      	strb	r2, [r3, #8]
            enable_slave_if_required(this_i2c);
2000105c:	6878      	ldr	r0, [r7, #4]
2000105e:	f7ff fd79 	bl	20000b54 <enable_slave_if_required>

            break;
20001062:	e1f5      	b.n	20001450 <mss_i2c_isr+0x8d4>
      /* STATUS codes 08H, 10H, 38H are all covered in MTX mode */
        case ST_SLAR_ACK: /* SLA+R tx'ed. */
            /* Let's make sure we ACK the first data byte received (set AA bit in CTRL) unless
             * the next byte is the last byte of the read transaction.
             */
            if(this_i2c->master_rx_size > 1u)
20001064:	687b      	ldr	r3, [r7, #4]
20001066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
20001068:	2b01      	cmp	r3, #1
2000106a:	d905      	bls.n	20001078 <mss_i2c_isr+0x4fc>
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
2000106c:	687b      	ldr	r3, [r7, #4]
2000106e:	699b      	ldr	r3, [r3, #24]
20001070:	f04f 0201 	mov.w	r2, #1
20001074:	609a      	str	r2, [r3, #8]
                this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
                this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
                this_i2c->master_status = MSS_I2C_SUCCESS;
                this_i2c->transaction = NO_TRANSACTION;
            }
            break;
20001076:	e1eb      	b.n	20001450 <mss_i2c_isr+0x8d4>
             */
            if(this_i2c->master_rx_size > 1u)
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
            }
            else if(1u == this_i2c->master_rx_size)
20001078:	687b      	ldr	r3, [r7, #4]
2000107a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2000107c:	2b01      	cmp	r3, #1
2000107e:	d105      	bne.n	2000108c <mss_i2c_isr+0x510>
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
20001080:	687b      	ldr	r3, [r7, #4]
20001082:	699b      	ldr	r3, [r3, #24]
20001084:	f04f 0200 	mov.w	r2, #0
20001088:	609a      	str	r2, [r3, #8]
                this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
                this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
                this_i2c->master_status = MSS_I2C_SUCCESS;
                this_i2c->transaction = NO_TRANSACTION;
            }
            break;
2000108a:	e1e1      	b.n	20001450 <mss_i2c_isr+0x8d4>
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
            }
            else /* this_i2c->master_rx_size == 0u */
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
2000108c:	687b      	ldr	r3, [r7, #4]
2000108e:	699b      	ldr	r3, [r3, #24]
20001090:	f04f 0201 	mov.w	r2, #1
20001094:	609a      	str	r2, [r3, #8]
                this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
20001096:	687b      	ldr	r3, [r7, #4]
20001098:	699b      	ldr	r3, [r3, #24]
2000109a:	f04f 0201 	mov.w	r2, #1
2000109e:	611a      	str	r2, [r3, #16]
                this_i2c->master_status = MSS_I2C_SUCCESS;
200010a0:	687b      	ldr	r3, [r7, #4]
200010a2:	f04f 0200 	mov.w	r2, #0
200010a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
                this_i2c->transaction = NO_TRANSACTION;
200010aa:	687b      	ldr	r3, [r7, #4]
200010ac:	f04f 0200 	mov.w	r2, #0
200010b0:	721a      	strb	r2, [r3, #8]
            }
            break;
200010b2:	e1cd      	b.n	20001450 <mss_i2c_isr+0x8d4>
            
        case ST_SLAR_NACK: /* SLA+R tx'ed; let's release the bus (send a stop condition) */
            this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
200010b4:	687b      	ldr	r3, [r7, #4]
200010b6:	699b      	ldr	r3, [r3, #24]
200010b8:	f04f 0201 	mov.w	r2, #1
200010bc:	611a      	str	r2, [r3, #16]
            this_i2c->master_status = MSS_I2C_FAILED;
200010be:	687b      	ldr	r3, [r7, #4]
200010c0:	f04f 0202 	mov.w	r2, #2
200010c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
200010c8:	687b      	ldr	r3, [r7, #4]
200010ca:	f04f 0200 	mov.w	r2, #0
200010ce:	721a      	strb	r2, [r3, #8]
            enable_slave_if_required(this_i2c);
200010d0:	6878      	ldr	r0, [r7, #4]
200010d2:	f7ff fd3f 	bl	20000b54 <enable_slave_if_required>
            break;
200010d6:	e1bb      	b.n	20001450 <mss_i2c_isr+0x8d4>
          
        case ST_RX_DATA_ACK: /* Data byte received, ACK returned */
            /* First, get the data */
            this_i2c->master_rx_buffer[this_i2c->master_rx_idx++] = this_i2c->hw_reg->DATA;
200010d8:	687b      	ldr	r3, [r7, #4]
200010da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
200010dc:	687b      	ldr	r3, [r7, #4]
200010de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
200010e0:	441a      	add	r2, r3
200010e2:	6879      	ldr	r1, [r7, #4]
200010e4:	6949      	ldr	r1, [r1, #20]
200010e6:	7a09      	ldrb	r1, [r1, #8]
200010e8:	b2c9      	uxtb	r1, r1
200010ea:	7011      	strb	r1, [r2, #0]
200010ec:	f103 0201 	add.w	r2, r3, #1
200010f0:	687b      	ldr	r3, [r7, #4]
200010f2:	639a      	str	r2, [r3, #56]	; 0x38

            if( this_i2c->master_rx_idx >= (this_i2c->master_rx_size - 1u))
200010f4:	687b      	ldr	r3, [r7, #4]
200010f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
200010f8:	687b      	ldr	r3, [r7, #4]
200010fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
200010fc:	f103 33ff 	add.w	r3, r3, #4294967295
20001100:	429a      	cmp	r2, r3
20001102:	f0c0 819e 	bcc.w	20001442 <mss_i2c_isr+0x8c6>
            {
                /* If we're at the second last byte, let's set AA to 0 so
                 * we return a NACK at the last byte. */
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
20001106:	687b      	ldr	r3, [r7, #4]
20001108:	699b      	ldr	r3, [r3, #24]
2000110a:	f04f 0200 	mov.w	r2, #0
2000110e:	609a      	str	r2, [r3, #8]
            }
            break;
20001110:	e19e      	b.n	20001450 <mss_i2c_isr+0x8d4>
            
        case ST_RX_DATA_NACK: /* Data byte received, NACK returned */
            /* Get the data, then send a stop condition */
            this_i2c->master_rx_buffer[this_i2c->master_rx_idx] = this_i2c->hw_reg->DATA;
20001112:	687b      	ldr	r3, [r7, #4]
20001114:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20001116:	687b      	ldr	r3, [r7, #4]
20001118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000111a:	4413      	add	r3, r2
2000111c:	687a      	ldr	r2, [r7, #4]
2000111e:	6952      	ldr	r2, [r2, #20]
20001120:	7a12      	ldrb	r2, [r2, #8]
20001122:	b2d2      	uxtb	r2, r2
20001124:	701a      	strb	r2, [r3, #0]
          
            hold_bus = this_i2c->options &  MSS_I2C_HOLD_BUS; 
20001126:	687b      	ldr	r3, [r7, #4]
20001128:	7c1b      	ldrb	r3, [r3, #16]
2000112a:	f003 0301 	and.w	r3, r3, #1
2000112e:	737b      	strb	r3, [r7, #13]

            /* Store the information of current I2C bus status in the bus_status*/
            this_i2c->bus_status  = hold_bus;
20001130:	687b      	ldr	r3, [r7, #4]
20001132:	7b7a      	ldrb	r2, [r7, #13]
20001134:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
            if ( hold_bus == 0u )
20001138:	7b7b      	ldrb	r3, [r7, #13]
2000113a:	2b00      	cmp	r3, #0
2000113c:	d108      	bne.n	20001150 <mss_i2c_isr+0x5d4>
            { 
                this_i2c->hw_reg_bit->CTRL_STO = 0x01u;  /*xmt stop condition */
2000113e:	687b      	ldr	r3, [r7, #4]
20001140:	699b      	ldr	r3, [r3, #24]
20001142:	f04f 0201 	mov.w	r2, #1
20001146:	611a      	str	r2, [r3, #16]

                /* Bus is released, now we can start listening to bus, if it is slave */
                   enable_slave_if_required(this_i2c);
20001148:	6878      	ldr	r0, [r7, #4]
2000114a:	f7ff fd03 	bl	20000b54 <enable_slave_if_required>
2000114e:	e008      	b.n	20001162 <mss_i2c_isr+0x5e6>
            }
            else
            {
                NVIC_DisableIRQ( this_i2c->irqn );
20001150:	687b      	ldr	r3, [r7, #4]
20001152:	8a5b      	ldrh	r3, [r3, #18]
20001154:	b21b      	sxth	r3, r3
20001156:	4618      	mov	r0, r3
20001158:	f7ff faf0 	bl	2000073c <NVIC_DisableIRQ>
                clear_irq = 0u;
2000115c:	f04f 0300 	mov.w	r3, #0
20001160:	73bb      	strb	r3, [r7, #14]

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20001162:	687b      	ldr	r3, [r7, #4]
20001164:	f04f 0200 	mov.w	r2, #0
20001168:	721a      	strb	r2, [r3, #8]
            this_i2c->master_status = MSS_I2C_SUCCESS;
2000116a:	687b      	ldr	r3, [r7, #4]
2000116c:	f04f 0200 	mov.w	r2, #0
20001170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
            break;
20001174:	e16c      	b.n	20001450 <mss_i2c_isr+0x8d4>
        
        /******************** SLAVE RECEIVER **************************/
        case ST_GCA_NACK: /* NACK after, GCA addressing */
        case ST_SLA_NACK: /* Re-enable AA (assert ack) bit for future transmissions */
            this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
20001176:	687b      	ldr	r3, [r7, #4]
20001178:	699b      	ldr	r3, [r3, #24]
2000117a:	f04f 0201 	mov.w	r2, #1
2000117e:	609a      	str	r2, [r3, #8]
            
            this_i2c->transaction = NO_TRANSACTION;
20001180:	687b      	ldr	r3, [r7, #4]
20001182:	f04f 0200 	mov.w	r2, #0
20001186:	721a      	strb	r2, [r3, #8]
            this_i2c->slave_status = MSS_I2C_SUCCESS;
20001188:	687b      	ldr	r3, [r7, #4]
2000118a:	f04f 0200 	mov.w	r2, #0
2000118e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
            
            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
20001192:	687b      	ldr	r3, [r7, #4]
20001194:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
20001198:	2b00      	cmp	r3, #0
2000119a:	f000 8154 	beq.w	20001446 <mss_i2c_isr+0x8ca>
            {
                this_i2c->hw_reg_bit->CTRL_STA = 1u ;
2000119e:	687b      	ldr	r3, [r7, #4]
200011a0:	699b      	ldr	r3, [r3, #24]
200011a2:	f04f 0201 	mov.w	r2, #1
200011a6:	615a      	str	r2, [r3, #20]
            }
            break;
200011a8:	e152      	b.n	20001450 <mss_i2c_isr+0x8d4>
        case ST_SLV_LA: /* Arbitr. lost (SLA rec'd) */
            /*
             *  We lost arbitration and either the GCE or our address was the
             *  one received so pend the master operation we were starting.
             */
            this_i2c->is_transaction_pending = 1u;
200011aa:	687b      	ldr	r3, [r7, #4]
200011ac:	f04f 0201 	mov.w	r2, #1
200011b0:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
            /* Fall through to normal ST processing as we are now in slave mode */

        case ST_GCA: /* General call address received, ACK returned */
        case ST_SLAVE_SLAW: /* SLA+W received, ACK returned */

            this_i2c->transaction = WRITE_SLAVE_TRANSACTION;
200011b4:	687b      	ldr	r3, [r7, #4]
200011b6:	f04f 0204 	mov.w	r2, #4
200011ba:	721a      	strb	r2, [r3, #8]
            this_i2c->slave_rx_idx = 0u;
200011bc:	687b      	ldr	r3, [r7, #4]
200011be:	f04f 0200 	mov.w	r2, #0
200011c2:	659a      	str	r2, [r3, #88]	; 0x58
            this_i2c->random_read_addr = 0u;
200011c4:	687b      	ldr	r3, [r7, #4]
200011c6:	f04f 0200 	mov.w	r2, #0
200011ca:	60da      	str	r2, [r3, #12]

             /* If Start Bit is set, clear it, but store that information since it is because of
              * pending transaction
              */
            if(this_i2c->hw_reg_bit->CTRL_STA)
200011cc:	687b      	ldr	r3, [r7, #4]
200011ce:	699b      	ldr	r3, [r3, #24]
200011d0:	695b      	ldr	r3, [r3, #20]
200011d2:	2b00      	cmp	r3, #0
200011d4:	d009      	beq.n	200011ea <mss_i2c_isr+0x66e>
            {
                this_i2c->hw_reg_bit->CTRL_STA = 0u ;
200011d6:	687b      	ldr	r3, [r7, #4]
200011d8:	699b      	ldr	r3, [r3, #24]
200011da:	f04f 0200 	mov.w	r2, #0
200011de:	615a      	str	r2, [r3, #20]
                this_i2c->is_transaction_pending = 1u;
200011e0:	687b      	ldr	r3, [r7, #4]
200011e2:	f04f 0201 	mov.w	r2, #1
200011e6:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
            }
            this_i2c->slave_status = MSS_I2C_IN_PROGRESS;
200011ea:	687b      	ldr	r3, [r7, #4]
200011ec:	f04f 0201 	mov.w	r2, #1
200011f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
#ifdef MSS_I2C_INCLUDE_SLA_IN_RX_PAYLOAD
            /* Fall through to put address as first byte in payload buffer */
#else
            /* Only break from this case if the slave address must NOT be included at the
             * beginning of the received write data. */
            break;
200011f4:	e12c      	b.n	20001450 <mss_i2c_isr+0x8d4>
#endif            
        case ST_GCA_ACK: /* DATA received; ACK sent after GCA */
        case ST_RDATA: /* DATA received; must clear DATA register */
            if((this_i2c->slave_rx_buffer != (uint8_t *)0)
200011f6:	687b      	ldr	r3, [r7, #4]
200011f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
200011fa:	2b00      	cmp	r3, #0
200011fc:	d01c      	beq.n	20001238 <mss_i2c_isr+0x6bc>
               && (this_i2c->slave_rx_idx < this_i2c->slave_rx_size))
200011fe:	687b      	ldr	r3, [r7, #4]
20001200:	6d9a      	ldr	r2, [r3, #88]	; 0x58
20001202:	687b      	ldr	r3, [r7, #4]
20001204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
             * beginning of the received write data. */
            break;
#endif            
        case ST_GCA_ACK: /* DATA received; ACK sent after GCA */
        case ST_RDATA: /* DATA received; must clear DATA register */
            if((this_i2c->slave_rx_buffer != (uint8_t *)0)
20001206:	429a      	cmp	r2, r3
20001208:	d216      	bcs.n	20001238 <mss_i2c_isr+0x6bc>
               && (this_i2c->slave_rx_idx < this_i2c->slave_rx_size))
            {
                data = this_i2c->hw_reg->DATA;
2000120a:	687b      	ldr	r3, [r7, #4]
2000120c:	695b      	ldr	r3, [r3, #20]
2000120e:	7a1b      	ldrb	r3, [r3, #8]
20001210:	733b      	strb	r3, [r7, #12]
                this_i2c->slave_rx_buffer[this_i2c->slave_rx_idx++] = data;
20001212:	687b      	ldr	r3, [r7, #4]
20001214:	6d1a      	ldr	r2, [r3, #80]	; 0x50
20001216:	687b      	ldr	r3, [r7, #4]
20001218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2000121a:	441a      	add	r2, r3
2000121c:	7b39      	ldrb	r1, [r7, #12]
2000121e:	7011      	strb	r1, [r2, #0]
20001220:	f103 0201 	add.w	r2, r3, #1
20001224:	687b      	ldr	r3, [r7, #4]
20001226:	659a      	str	r2, [r3, #88]	; 0x58
                {
                    /* Ignore the slave address byte in the random read address
                       computation in the case where INCLUDE_SLA_IN_RX_PAYLOAD
                       is defined. */
#endif
                    this_i2c->random_read_addr = (this_i2c->random_read_addr << 8) + data;
20001228:	687b      	ldr	r3, [r7, #4]
2000122a:	68db      	ldr	r3, [r3, #12]
2000122c:	ea4f 2203 	mov.w	r2, r3, lsl #8
20001230:	7b3b      	ldrb	r3, [r7, #12]
20001232:	441a      	add	r2, r3
20001234:	687b      	ldr	r3, [r7, #4]
20001236:	60da      	str	r2, [r3, #12]
#ifdef MSS_I2C_INCLUDE_SLA_IN_RX_PAYLOAD
                }
#endif
            }
            
            if (this_i2c->slave_rx_idx >= this_i2c->slave_rx_size)
20001238:	687b      	ldr	r3, [r7, #4]
2000123a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
2000123c:	687b      	ldr	r3, [r7, #4]
2000123e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20001240:	429a      	cmp	r2, r3
20001242:	f0c0 8102 	bcc.w	2000144a <mss_i2c_isr+0x8ce>
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0u;   /* send a NACK when done (next reception) */
20001246:	687b      	ldr	r3, [r7, #4]
20001248:	699b      	ldr	r3, [r3, #24]
2000124a:	f04f 0200 	mov.w	r2, #0
2000124e:	609a      	str	r2, [r3, #8]
            }
            break;
20001250:	e0fe      	b.n	20001450 <mss_i2c_isr+0x8d4>
            /* STOP or repeated START occurred. */
            /* We cannot be sure if the transaction has actually completed as
             * this hardware state reports that either a STOP or repeated START
             * condition has occurred. We assume that this is a repeated START
             * if the transaction was a write from the master to this point.*/
            if ( this_i2c->transaction == WRITE_SLAVE_TRANSACTION )
20001252:	687b      	ldr	r3, [r7, #4]
20001254:	7a1b      	ldrb	r3, [r3, #8]
20001256:	2b04      	cmp	r3, #4
20001258:	d135      	bne.n	200012c6 <mss_i2c_isr+0x74a>
            {
                if ( this_i2c->slave_rx_idx == this_i2c->slave_mem_offset_length )
2000125a:	687b      	ldr	r3, [r7, #4]
2000125c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
2000125e:	687b      	ldr	r3, [r7, #4]
20001260:	6e1b      	ldr	r3, [r3, #96]	; 0x60
20001262:	429a      	cmp	r2, r3
20001264:	d103      	bne.n	2000126e <mss_i2c_isr+0x6f2>
                {
                    this_i2c->slave_tx_idx = this_i2c->random_read_addr;
20001266:	687b      	ldr	r3, [r7, #4]
20001268:	68da      	ldr	r2, [r3, #12]
2000126a:	687b      	ldr	r3, [r7, #4]
2000126c:	64da      	str	r2, [r3, #76]	; 0x4c
                }
                {
                    /* Call the slave's write transaction handler if it exists. */
                    if ( this_i2c->slave_write_handler != 0u )
2000126e:	687b      	ldr	r3, [r7, #4]
20001270:	6e5b      	ldr	r3, [r3, #100]	; 0x64
20001272:	2b00      	cmp	r3, #0
20001274:	d021      	beq.n	200012ba <mss_i2c_isr+0x73e>
                    {
                        mss_i2c_slave_handler_ret_t h_ret;
                        h_ret = this_i2c->slave_write_handler( this_i2c, this_i2c->slave_rx_buffer, (uint16_t)this_i2c->slave_rx_idx );
20001276:	687b      	ldr	r3, [r7, #4]
20001278:	6e5b      	ldr	r3, [r3, #100]	; 0x64
2000127a:	687a      	ldr	r2, [r7, #4]
2000127c:	6d11      	ldr	r1, [r2, #80]	; 0x50
2000127e:	687a      	ldr	r2, [r7, #4]
20001280:	6d92      	ldr	r2, [r2, #88]	; 0x58
20001282:	b292      	uxth	r2, r2
20001284:	6878      	ldr	r0, [r7, #4]
20001286:	4798      	blx	r3
20001288:	4603      	mov	r3, r0
2000128a:	73fb      	strb	r3, [r7, #15]
                        if ( MSS_I2C_REENABLE_SLAVE_RX == h_ret )
2000128c:	7bfb      	ldrb	r3, [r7, #15]
2000128e:	2b00      	cmp	r3, #0
20001290:	d108      	bne.n	200012a4 <mss_i2c_isr+0x728>
                        {
                            /* There is a small risk that the write handler could
                             * call MSS_I2C_disable_slave() but return
                             * MSS_I2C_REENABLE_SLAVE_RX in error so we only
                             * enable ACKs if still in slave mode. */
                             enable_slave_if_required(this_i2c);
20001292:	6878      	ldr	r0, [r7, #4]
20001294:	f7ff fc5e 	bl	20000b54 <enable_slave_if_required>
                             this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
20001298:	687b      	ldr	r3, [r7, #4]
2000129a:	699b      	ldr	r3, [r3, #24]
2000129c:	f04f 0201 	mov.w	r2, #1
200012a0:	609a      	str	r2, [r3, #8]
                        }
                    }
                    else
                    {
                        /* Re-enable address acknowledge in case we were ready to nack the next received byte. */
                        this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
200012a2:	e017      	b.n	200012d4 <mss_i2c_isr+0x758>
                             enable_slave_if_required(this_i2c);
                             this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
                        }
                        else
                        {
                            this_i2c->hw_reg_bit->CTRL_AA = 0u;
200012a4:	687b      	ldr	r3, [r7, #4]
200012a6:	699b      	ldr	r3, [r3, #24]
200012a8:	f04f 0200 	mov.w	r2, #0
200012ac:	609a      	str	r2, [r3, #8]
                            /* Clear slave mode flag as well otherwise in mixed
                             * master/slave applications, the AA bit will get set by
                             * subsequent master operations. */
                            this_i2c->is_slave_enabled = 0u;
200012ae:	687b      	ldr	r3, [r7, #4]
200012b0:	f04f 0200 	mov.w	r2, #0
200012b4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                        }
                    }
                    else
                    {
                        /* Re-enable address acknowledge in case we were ready to nack the next received byte. */
                        this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
200012b8:	e00c      	b.n	200012d4 <mss_i2c_isr+0x758>
200012ba:	687b      	ldr	r3, [r7, #4]
200012bc:	699b      	ldr	r3, [r3, #24]
200012be:	f04f 0201 	mov.w	r2, #1
200012c2:	609a      	str	r2, [r3, #8]
200012c4:	e006      	b.n	200012d4 <mss_i2c_isr+0x758>
            {
                /*
                 * Reset slave_tx_idx so that a subsequent read will result in the slave's
                 * transmit buffer being sent from the first byte.
                 */
                this_i2c->slave_tx_idx = 0u;
200012c6:	687b      	ldr	r3, [r7, #4]
200012c8:	f04f 0200 	mov.w	r2, #0
200012cc:	64da      	str	r2, [r3, #76]	; 0x4c
                /*
                 * See if we need to re-enable acknowledgement as some error conditions, such
                 * as a master prematurely ending a transfer, can see us get here with AA set
                 * to 0 which will disable slave operation if we are not careful.
                 */
                enable_slave_if_required(this_i2c);
200012ce:	6878      	ldr	r0, [r7, #4]
200012d0:	f7ff fc40 	bl	20000b54 <enable_slave_if_required>
            }

            /* Mark any previous master write transaction as complete. */
            this_i2c->slave_status = MSS_I2C_SUCCESS;
200012d4:	687b      	ldr	r3, [r7, #4]
200012d6:	f04f 0200 	mov.w	r2, #0
200012da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
200012de:	687b      	ldr	r3, [r7, #4]
200012e0:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
200012e4:	2b00      	cmp	r3, #0
200012e6:	d004      	beq.n	200012f2 <mss_i2c_isr+0x776>
            {
                this_i2c->hw_reg_bit->CTRL_STA = 1u ;
200012e8:	687b      	ldr	r3, [r7, #4]
200012ea:	699b      	ldr	r3, [r3, #24]
200012ec:	f04f 0201 	mov.w	r2, #1
200012f0:	615a      	str	r2, [r3, #20]

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
200012f2:	687b      	ldr	r3, [r7, #4]
200012f4:	f04f 0200 	mov.w	r2, #0
200012f8:	721a      	strb	r2, [r3, #8]
            break;
200012fa:	e0a9      	b.n	20001450 <mss_i2c_isr+0x8d4>
        case ST_SLV_RST: /* SMBUS ONLY: timeout state. must clear interrupt */
            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction.
             */
            this_i2c->transaction = NO_TRANSACTION;
200012fc:	687b      	ldr	r3, [r7, #4]
200012fe:	f04f 0200 	mov.w	r2, #0
20001302:	721a      	strb	r2, [r3, #8]
            /*
             * Reset slave_tx_idx so that a subsequent read will result in the slave's
             * transmit buffer being sent from the first byte.
             */
            this_i2c->slave_tx_idx = 0u;
20001304:	687b      	ldr	r3, [r7, #4]
20001306:	f04f 0200 	mov.w	r2, #0
2000130a:	64da      	str	r2, [r3, #76]	; 0x4c
            /*
             * Clear status to I2C_FAILED only if there was an operation in progress.
             */
            if(MSS_I2C_IN_PROGRESS == this_i2c->slave_status)
2000130c:	687b      	ldr	r3, [r7, #4]
2000130e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
20001312:	b2db      	uxtb	r3, r3
20001314:	2b01      	cmp	r3, #1
20001316:	d104      	bne.n	20001322 <mss_i2c_isr+0x7a6>
            {
                this_i2c->slave_status = MSS_I2C_FAILED;
20001318:	687b      	ldr	r3, [r7, #4]
2000131a:	f04f 0202 	mov.w	r2, #2
2000131e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
            }

            enable_slave_if_required(this_i2c); /* Make sure AA is set correctly */
20001322:	6878      	ldr	r0, [r7, #4]
20001324:	f7ff fc16 	bl	20000b54 <enable_slave_if_required>

            break;
20001328:	e092      	b.n	20001450 <mss_i2c_isr+0x8d4>
            
        /****************** SLAVE TRANSMITTER **************************/
        case ST_SLAVE_SLAR_ACK: /* SLA+R received, ACK returned */
        case ST_SLARW_LA:   /* Arbitration lost, SLA+R received, ACK returned */
        case ST_RACK: /* Data tx'ed, ACK received */
            if ( status == ST_SLAVE_SLAR_ACK )
2000132a:	7afb      	ldrb	r3, [r7, #11]
2000132c:	b2db      	uxtb	r3, r3
2000132e:	2ba8      	cmp	r3, #168	; 0xa8
20001330:	d11b      	bne.n	2000136a <mss_i2c_isr+0x7ee>
            {
                this_i2c->transaction = READ_SLAVE_TRANSACTION;
20001332:	687b      	ldr	r3, [r7, #4]
20001334:	f04f 0205 	mov.w	r2, #5
20001338:	721a      	strb	r2, [r3, #8]
                this_i2c->random_read_addr = 0u;
2000133a:	687b      	ldr	r3, [r7, #4]
2000133c:	f04f 0200 	mov.w	r2, #0
20001340:	60da      	str	r2, [r3, #12]

                this_i2c->slave_status = MSS_I2C_IN_PROGRESS;
20001342:	687b      	ldr	r3, [r7, #4]
20001344:	f04f 0201 	mov.w	r2, #1
20001348:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

                /* If Start Bit is set, clear it, but store that information since it is because of
                 * pending transaction
                 */
                if(this_i2c->hw_reg_bit->CTRL_STA)
2000134c:	687b      	ldr	r3, [r7, #4]
2000134e:	699b      	ldr	r3, [r3, #24]
20001350:	695b      	ldr	r3, [r3, #20]
20001352:	2b00      	cmp	r3, #0
20001354:	d009      	beq.n	2000136a <mss_i2c_isr+0x7ee>
                {
                    this_i2c->hw_reg_bit->CTRL_STA = 0u ;
20001356:	687b      	ldr	r3, [r7, #4]
20001358:	699b      	ldr	r3, [r3, #24]
2000135a:	f04f 0200 	mov.w	r2, #0
2000135e:	615a      	str	r2, [r3, #20]
                    this_i2c->is_transaction_pending = 1u;
20001360:	687b      	ldr	r3, [r7, #4]
20001362:	f04f 0201 	mov.w	r2, #1
20001366:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                }
            }
            if (this_i2c->slave_tx_idx >= this_i2c->slave_tx_size)
2000136a:	687b      	ldr	r3, [r7, #4]
2000136c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
2000136e:	687b      	ldr	r3, [r7, #4]
20001370:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20001372:	429a      	cmp	r2, r3
20001374:	d305      	bcc.n	20001382 <mss_i2c_isr+0x806>
            {
                /* Ensure 0xFF is returned to the master when the slave specifies
                 * an empty transmit buffer. */
                this_i2c->hw_reg->DATA = 0xFFu;
20001376:	687b      	ldr	r3, [r7, #4]
20001378:	695b      	ldr	r3, [r3, #20]
2000137a:	f04f 32ff 	mov.w	r2, #4294967295
2000137e:	721a      	strb	r2, [r3, #8]
20001380:	e00c      	b.n	2000139c <mss_i2c_isr+0x820>
            }
            else
            {
                /* Load the data the data byte to be sent to the master. */
                this_i2c->hw_reg->DATA = this_i2c->slave_tx_buffer[this_i2c->slave_tx_idx++];
20001382:	687b      	ldr	r3, [r7, #4]
20001384:	695a      	ldr	r2, [r3, #20]
20001386:	687b      	ldr	r3, [r7, #4]
20001388:	6c59      	ldr	r1, [r3, #68]	; 0x44
2000138a:	687b      	ldr	r3, [r7, #4]
2000138c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2000138e:	4419      	add	r1, r3
20001390:	7809      	ldrb	r1, [r1, #0]
20001392:	7211      	strb	r1, [r2, #8]
20001394:	f103 0201 	add.w	r2, r3, #1
20001398:	687b      	ldr	r3, [r7, #4]
2000139a:	64da      	str	r2, [r3, #76]	; 0x4c
            }
            /* Determine if this is the last data byte to send to the master. */
            if (this_i2c->slave_tx_idx >= this_i2c->slave_tx_size) /* last byte? */
2000139c:	687b      	ldr	r3, [r7, #4]
2000139e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
200013a0:	687b      	ldr	r3, [r7, #4]
200013a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
200013a4:	429a      	cmp	r2, r3
200013a6:	d352      	bcc.n	2000144e <mss_i2c_isr+0x8d2>
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
200013a8:	687b      	ldr	r3, [r7, #4]
200013aa:	699b      	ldr	r3, [r3, #24]
200013ac:	f04f 0200 	mov.w	r2, #0
200013b0:	609a      	str	r2, [r3, #8]
                /* Next read transaction will result in slave's transmit buffer
                 * being sent from the first byte. */
                this_i2c->slave_tx_idx = 0u;
200013b2:	687b      	ldr	r3, [r7, #4]
200013b4:	f04f 0200 	mov.w	r2, #0
200013b8:	64da      	str	r2, [r3, #76]	; 0x4c
            }
            break;
200013ba:	e049      	b.n	20001450 <mss_i2c_isr+0x8d4>
        case ST_SLAVE_RNACK:    /* Data byte has been transmitted; not-ACK has been received. */
        case ST_FINAL: /* Last Data byte tx'ed, ACK received */
            /* We assume that the transaction will be stopped by the master.
             * Reset slave_tx_idx so that a subsequent read will result in the slave's
             * transmit buffer being sent from the first byte. */
            this_i2c->slave_tx_idx = 0u;
200013bc:	687b      	ldr	r3, [r7, #4]
200013be:	f04f 0200 	mov.w	r2, #0
200013c2:	64da      	str	r2, [r3, #76]	; 0x4c
            this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
200013c4:	687b      	ldr	r3, [r7, #4]
200013c6:	699b      	ldr	r3, [r3, #24]
200013c8:	f04f 0201 	mov.w	r2, #1
200013cc:	609a      	str	r2, [r3, #8]

            /*  Mark previous state as complete */
            this_i2c->slave_status = MSS_I2C_SUCCESS;
200013ce:	687b      	ldr	r3, [r7, #4]
200013d0:	f04f 0200 	mov.w	r2, #0
200013d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
200013d8:	687b      	ldr	r3, [r7, #4]
200013da:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
200013de:	2b00      	cmp	r3, #0
200013e0:	d004      	beq.n	200013ec <mss_i2c_isr+0x870>
            {
                this_i2c->hw_reg_bit->CTRL_STA = 1u ;
200013e2:	687b      	ldr	r3, [r7, #4]
200013e4:	699b      	ldr	r3, [r3, #24]
200013e6:	f04f 0201 	mov.w	r2, #1
200013ea:	615a      	str	r2, [r3, #20]

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
200013ec:	687b      	ldr	r3, [r7, #4]
200013ee:	f04f 0200 	mov.w	r2, #0
200013f2:	721a      	strb	r2, [r3, #8]
            break;
200013f4:	e02c      	b.n	20001450 <mss_i2c_isr+0x8d4>
        case ST_RESET_ACTIVATED:
        case ST_BUS_ERROR: /* Bus error during MST or selected slave modes */
        default:
            /* Some undefined state has encountered. Clear Start bit to make
             * sure, next good transaction happen */
            this_i2c->hw_reg_bit->CTRL_STA = 0x00u;
200013f6:	687b      	ldr	r3, [r7, #4]
200013f8:	699b      	ldr	r3, [r3, #24]
200013fa:	f04f 0200 	mov.w	r2, #0
200013fe:	615a      	str	r2, [r3, #20]
            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20001400:	687b      	ldr	r3, [r7, #4]
20001402:	f04f 0200 	mov.w	r2, #0
20001406:	721a      	strb	r2, [r3, #8]
            /*
             * Reset slave_tx_idx so that a subsequent read will result in the slave's
             * transmit buffer being sent from the first byte.
             */
            this_i2c->slave_tx_idx = 0u;
20001408:	687b      	ldr	r3, [r7, #4]
2000140a:	f04f 0200 	mov.w	r2, #0
2000140e:	64da      	str	r2, [r3, #76]	; 0x4c
            /*
             * Clear statuses to I2C_FAILED only if there was an operation in progress.
             */
            if(MSS_I2C_IN_PROGRESS == this_i2c->master_status)
20001410:	687b      	ldr	r3, [r7, #4]
20001412:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
20001416:	b2db      	uxtb	r3, r3
20001418:	2b01      	cmp	r3, #1
2000141a:	d104      	bne.n	20001426 <mss_i2c_isr+0x8aa>
            {
                this_i2c->master_status = MSS_I2C_FAILED;
2000141c:	687b      	ldr	r3, [r7, #4]
2000141e:	f04f 0202 	mov.w	r2, #2
20001422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
            }

            if(MSS_I2C_IN_PROGRESS == this_i2c->slave_status)
20001426:	687b      	ldr	r3, [r7, #4]
20001428:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
2000142c:	b2db      	uxtb	r3, r3
2000142e:	2b01      	cmp	r3, #1
20001430:	d10e      	bne.n	20001450 <mss_i2c_isr+0x8d4>
            {
                this_i2c->slave_status = MSS_I2C_FAILED;
20001432:	687b      	ldr	r3, [r7, #4]
20001434:	f04f 0202 	mov.w	r2, #2
20001438:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
2000143c:	e008      	b.n	20001450 <mss_i2c_isr+0x8d4>
             */
            if(this_i2c->transaction != this_i2c->pending_transaction)
            {
                this_i2c->transaction = this_i2c->pending_transaction;
            }
            break;
2000143e:	bf00      	nop
20001440:	e006      	b.n	20001450 <mss_i2c_isr+0x8d4>
            {
                /* If we're at the second last byte, let's set AA to 0 so
                 * we return a NACK at the last byte. */
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
            }
            break;
20001442:	bf00      	nop
20001444:	e004      	b.n	20001450 <mss_i2c_isr+0x8d4>
            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
            {
                this_i2c->hw_reg_bit->CTRL_STA = 1u ;
            }
            break;
20001446:	bf00      	nop
20001448:	e002      	b.n	20001450 <mss_i2c_isr+0x8d4>
            
            if (this_i2c->slave_rx_idx >= this_i2c->slave_rx_size)
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0u;   /* send a NACK when done (next reception) */
            }
            break;
2000144a:	bf00      	nop
2000144c:	e000      	b.n	20001450 <mss_i2c_isr+0x8d4>
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
                /* Next read transaction will result in slave's transmit buffer
                 * being sent from the first byte. */
                this_i2c->slave_tx_idx = 0u;
            }
            break;
2000144e:	bf00      	nop


            break;
    }
    
    if ( clear_irq )
20001450:	7bbb      	ldrb	r3, [r7, #14]
20001452:	2b00      	cmp	r3, #0
20001454:	d004      	beq.n	20001460 <mss_i2c_isr+0x8e4>
    {
        /* clear interrupt. */
        this_i2c->hw_reg_bit->CTRL_SI = 0u;
20001456:	687b      	ldr	r3, [r7, #4]
20001458:	699b      	ldr	r3, [r3, #24]
2000145a:	f04f 0200 	mov.w	r2, #0
2000145e:	60da      	str	r2, [r3, #12]
    }
    
    /* Read the status register to ensure the last I2C registers write took place
     * in a system built around a bus making use of posted writes. */
    status = this_i2c->hw_reg->STATUS;
20001460:	687b      	ldr	r3, [r7, #4]
20001462:	695b      	ldr	r3, [r3, #20]
20001464:	791b      	ldrb	r3, [r3, #4]
20001466:	72fb      	strb	r3, [r7, #11]
}
20001468:	f107 0710 	add.w	r7, r7, #16
2000146c:	46bd      	mov	sp, r7
2000146e:	bd80      	pop	{r7, pc}

20001470 <disable_interrupts>:
}
/*------------------------------------------------------------------------------
 *
 */
static uint32_t disable_interrupts( void )
{
20001470:	b580      	push	{r7, lr}
20001472:	b082      	sub	sp, #8
20001474:	af00      	add	r7, sp, #0
    uint32_t primask;
    primask = __get_PRIMASK();
20001476:	f000 f845 	bl	20001504 <__get_PRIMASK>
2000147a:	4603      	mov	r3, r0
2000147c:	607b      	str	r3, [r7, #4]
    __set_PRIMASK(1u);
2000147e:	f04f 0001 	mov.w	r0, #1
20001482:	f000 f84f 	bl	20001524 <__set_PRIMASK>
    return primask;
20001486:	687b      	ldr	r3, [r7, #4]
}
20001488:	4618      	mov	r0, r3
2000148a:	f107 0708 	add.w	r7, r7, #8
2000148e:	46bd      	mov	sp, r7
20001490:	bd80      	pop	{r7, pc}
20001492:	bf00      	nop

20001494 <restore_interrupts>:

/*------------------------------------------------------------------------------
 *
 */
static void restore_interrupts( uint32_t primask )
{
20001494:	b580      	push	{r7, lr}
20001496:	b082      	sub	sp, #8
20001498:	af00      	add	r7, sp, #0
2000149a:	6078      	str	r0, [r7, #4]
    __set_PRIMASK( primask );
2000149c:	6878      	ldr	r0, [r7, #4]
2000149e:	f000 f841 	bl	20001524 <__set_PRIMASK>
}
200014a2:	f107 0708 	add.w	r7, r7, #8
200014a6:	46bd      	mov	sp, r7
200014a8:	bd80      	pop	{r7, pc}
200014aa:	bf00      	nop

200014ac <I2C0_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void I2C0_IRQHandler( void )
#else
void I2C0_IRQHandler( void )
#endif
{
200014ac:	4668      	mov	r0, sp
200014ae:	f020 0107 	bic.w	r1, r0, #7
200014b2:	468d      	mov	sp, r1
200014b4:	b589      	push	{r0, r3, r7, lr}
200014b6:	af00      	add	r7, sp, #0
    mss_i2c_isr( &g_mss_i2c0 );
200014b8:	f241 6094 	movw	r0, #5780	; 0x1694
200014bc:	f2c2 0000 	movt	r0, #8192	; 0x2000
200014c0:	f7ff fb5c 	bl	20000b7c <mss_i2c_isr>
    NVIC_ClearPendingIRQ( I2C0_IRQn );
200014c4:	f04f 000e 	mov.w	r0, #14
200014c8:	f7ff f956 	bl	20000778 <NVIC_ClearPendingIRQ>
}
200014cc:	46bd      	mov	sp, r7
200014ce:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
200014d2:	4685      	mov	sp, r0
200014d4:	4770      	bx	lr
200014d6:	bf00      	nop

200014d8 <I2C1_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void I2C1_IRQHandler( void )
#else
void I2C1_IRQHandler( void )
#endif
{
200014d8:	4668      	mov	r0, sp
200014da:	f020 0107 	bic.w	r1, r0, #7
200014de:	468d      	mov	sp, r1
200014e0:	b589      	push	{r0, r3, r7, lr}
200014e2:	af00      	add	r7, sp, #0
    mss_i2c_isr( &g_mss_i2c1 );
200014e4:	f241 7008 	movw	r0, #5896	; 0x1708
200014e8:	f2c2 0000 	movt	r0, #8192	; 0x2000
200014ec:	f7ff fb46 	bl	20000b7c <mss_i2c_isr>
    NVIC_ClearPendingIRQ( I2C1_IRQn );
200014f0:	f04f 0011 	mov.w	r0, #17
200014f4:	f7ff f940 	bl	20000778 <NVIC_ClearPendingIRQ>
}
200014f8:	46bd      	mov	sp, r7
200014fa:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
200014fe:	4685      	mov	sp, r0
20001500:	4770      	bx	lr
20001502:	bf00      	nop

20001504 <__get_PRIMASK>:
 * @return PriMask
 *
 * Return state of the priority mask bit from the priority mask register
 */
uint32_t __get_PRIMASK(void)
{
20001504:	b480      	push	{r7}
20001506:	b083      	sub	sp, #12
20001508:	af00      	add	r7, sp, #0
  uint32_t result=0;
2000150a:	f04f 0300 	mov.w	r3, #0
2000150e:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
20001510:	f3ef 8310 	mrs	r3, PRIMASK
20001514:	607b      	str	r3, [r7, #4]
  return(result);
20001516:	687b      	ldr	r3, [r7, #4]
}
20001518:	4618      	mov	r0, r3
2000151a:	f107 070c 	add.w	r7, r7, #12
2000151e:	46bd      	mov	sp, r7
20001520:	bc80      	pop	{r7}
20001522:	4770      	bx	lr

20001524 <__set_PRIMASK>:
 * @param  priMask  PriMask
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
20001524:	b480      	push	{r7}
20001526:	b083      	sub	sp, #12
20001528:	af00      	add	r7, sp, #0
2000152a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
2000152c:	687b      	ldr	r3, [r7, #4]
2000152e:	f383 8810 	msr	PRIMASK, r3
}
20001532:	f107 070c 	add.w	r7, r7, #12
20001536:	46bd      	mov	sp, r7
20001538:	bc80      	pop	{r7}
2000153a:	4770      	bx	lr

2000153c <SystemInit>:

/***************************************************************************//**
 * See system_a2fxxxm3f.h for details.
 */
void SystemInit(void)
{
2000153c:	b480      	push	{r7}
2000153e:	af00      	add	r7, sp, #0
    /*
     * Do not make use of global variables or make any asumptions regarding
     * memory content if modifying this function. The memory content has not been
     * initialised by the time this function is called by the start-up code.
     */
}
20001540:	46bd      	mov	sp, r7
20001542:	bc80      	pop	{r7}
20001544:	4770      	bx	lr
20001546:	bf00      	nop

20001548 <__libc_init_array>:
20001548:	b570      	push	{r4, r5, r6, lr}
2000154a:	f241 6684 	movw	r6, #5764	; 0x1684
2000154e:	f241 6584 	movw	r5, #5764	; 0x1684
20001552:	f2c2 0600 	movt	r6, #8192	; 0x2000
20001556:	f2c2 0500 	movt	r5, #8192	; 0x2000
2000155a:	1b76      	subs	r6, r6, r5
2000155c:	10b6      	asrs	r6, r6, #2
2000155e:	d006      	beq.n	2000156e <__libc_init_array+0x26>
20001560:	2400      	movs	r4, #0
20001562:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
20001566:	3401      	adds	r4, #1
20001568:	4798      	blx	r3
2000156a:	42a6      	cmp	r6, r4
2000156c:	d8f9      	bhi.n	20001562 <__libc_init_array+0x1a>
2000156e:	f241 6584 	movw	r5, #5764	; 0x1684
20001572:	f241 6688 	movw	r6, #5768	; 0x1688
20001576:	f2c2 0500 	movt	r5, #8192	; 0x2000
2000157a:	f2c2 0600 	movt	r6, #8192	; 0x2000
2000157e:	1b76      	subs	r6, r6, r5
20001580:	f000 f874 	bl	2000166c <_init>
20001584:	10b6      	asrs	r6, r6, #2
20001586:	d006      	beq.n	20001596 <__libc_init_array+0x4e>
20001588:	2400      	movs	r4, #0
2000158a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
2000158e:	3401      	adds	r4, #1
20001590:	4798      	blx	r3
20001592:	42a6      	cmp	r6, r4
20001594:	d8f9      	bhi.n	2000158a <__libc_init_array+0x42>
20001596:	bd70      	pop	{r4, r5, r6, pc}

20001598 <memset>:
20001598:	2a03      	cmp	r2, #3
2000159a:	b2c9      	uxtb	r1, r1
2000159c:	b430      	push	{r4, r5}
2000159e:	d807      	bhi.n	200015b0 <memset+0x18>
200015a0:	b122      	cbz	r2, 200015ac <memset+0x14>
200015a2:	2300      	movs	r3, #0
200015a4:	54c1      	strb	r1, [r0, r3]
200015a6:	3301      	adds	r3, #1
200015a8:	4293      	cmp	r3, r2
200015aa:	d1fb      	bne.n	200015a4 <memset+0xc>
200015ac:	bc30      	pop	{r4, r5}
200015ae:	4770      	bx	lr
200015b0:	eb00 0c02 	add.w	ip, r0, r2
200015b4:	4603      	mov	r3, r0
200015b6:	e001      	b.n	200015bc <memset+0x24>
200015b8:	f803 1c01 	strb.w	r1, [r3, #-1]
200015bc:	f003 0403 	and.w	r4, r3, #3
200015c0:	461a      	mov	r2, r3
200015c2:	3301      	adds	r3, #1
200015c4:	2c00      	cmp	r4, #0
200015c6:	d1f7      	bne.n	200015b8 <memset+0x20>
200015c8:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
200015cc:	ebc2 040c 	rsb	r4, r2, ip
200015d0:	fb03 f301 	mul.w	r3, r3, r1
200015d4:	e01f      	b.n	20001616 <memset+0x7e>
200015d6:	f842 3c40 	str.w	r3, [r2, #-64]
200015da:	f842 3c3c 	str.w	r3, [r2, #-60]
200015de:	f842 3c38 	str.w	r3, [r2, #-56]
200015e2:	f842 3c34 	str.w	r3, [r2, #-52]
200015e6:	f842 3c30 	str.w	r3, [r2, #-48]
200015ea:	f842 3c2c 	str.w	r3, [r2, #-44]
200015ee:	f842 3c28 	str.w	r3, [r2, #-40]
200015f2:	f842 3c24 	str.w	r3, [r2, #-36]
200015f6:	f842 3c20 	str.w	r3, [r2, #-32]
200015fa:	f842 3c1c 	str.w	r3, [r2, #-28]
200015fe:	f842 3c18 	str.w	r3, [r2, #-24]
20001602:	f842 3c14 	str.w	r3, [r2, #-20]
20001606:	f842 3c10 	str.w	r3, [r2, #-16]
2000160a:	f842 3c0c 	str.w	r3, [r2, #-12]
2000160e:	f842 3c08 	str.w	r3, [r2, #-8]
20001612:	f842 3c04 	str.w	r3, [r2, #-4]
20001616:	4615      	mov	r5, r2
20001618:	3240      	adds	r2, #64	; 0x40
2000161a:	2c3f      	cmp	r4, #63	; 0x3f
2000161c:	f1a4 0440 	sub.w	r4, r4, #64	; 0x40
20001620:	dcd9      	bgt.n	200015d6 <memset+0x3e>
20001622:	462a      	mov	r2, r5
20001624:	ebc5 040c 	rsb	r4, r5, ip
20001628:	e007      	b.n	2000163a <memset+0xa2>
2000162a:	f842 3c10 	str.w	r3, [r2, #-16]
2000162e:	f842 3c0c 	str.w	r3, [r2, #-12]
20001632:	f842 3c08 	str.w	r3, [r2, #-8]
20001636:	f842 3c04 	str.w	r3, [r2, #-4]
2000163a:	4615      	mov	r5, r2
2000163c:	3210      	adds	r2, #16
2000163e:	2c0f      	cmp	r4, #15
20001640:	f1a4 0410 	sub.w	r4, r4, #16
20001644:	dcf1      	bgt.n	2000162a <memset+0x92>
20001646:	462a      	mov	r2, r5
20001648:	ebc5 050c 	rsb	r5, r5, ip
2000164c:	e001      	b.n	20001652 <memset+0xba>
2000164e:	f842 3c04 	str.w	r3, [r2, #-4]
20001652:	4614      	mov	r4, r2
20001654:	3204      	adds	r2, #4
20001656:	2d03      	cmp	r5, #3
20001658:	f1a5 0504 	sub.w	r5, r5, #4
2000165c:	dcf7      	bgt.n	2000164e <memset+0xb6>
2000165e:	e001      	b.n	20001664 <memset+0xcc>
20001660:	f804 1b01 	strb.w	r1, [r4], #1
20001664:	4564      	cmp	r4, ip
20001666:	d3fb      	bcc.n	20001660 <memset+0xc8>
20001668:	e7a0      	b.n	200015ac <memset+0x14>
2000166a:	bf00      	nop

2000166c <_init>:
2000166c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000166e:	bf00      	nop
20001670:	bcf8      	pop	{r3, r4, r5, r6, r7}
20001672:	bc08      	pop	{r3}
20001674:	469e      	mov	lr, r3
20001676:	4770      	bx	lr

20001678 <_fini>:
20001678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000167a:	bf00      	nop
2000167c:	bcf8      	pop	{r3, r4, r5, r6, r7}
2000167e:	bc08      	pop	{r3}
20001680:	469e      	mov	lr, r3
20001682:	4770      	bx	lr

20001684 <__frame_dummy_init_array_entry>:
20001684:	0485 2000                                   ... 

20001688 <__do_global_dtors_aux_fini_array_entry>:
20001688:	0471 2000                                   q.. 
