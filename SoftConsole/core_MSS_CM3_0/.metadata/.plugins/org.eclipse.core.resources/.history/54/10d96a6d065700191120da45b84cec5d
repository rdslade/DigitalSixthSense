// LINK TO GITHUB ARDUINO CODE: https://github.com/adafruit/Adafruit_DRV2605_Library
// NEED TO PORT ARDUINO CODE, motor_control.h has the functions arduino implements, may not need all of them

#include "drivers/mss_i2c/mss_i2c.h"

//int main()
//{
//    MSS_I2C_init( &g_mss_i2c0, MOTOR_CONTROL_ADDR, MSS_I2C_PCLK_DIV_256 );
//
//    uint8_t setup_buffer[3] = {1, 2, 7};
//
//    MSS_I2C_write( &g_mss_i2c0, TFMINI_ADDR, setup_buffer,
//					sizeof(setup_buffer), MSS_I2C_RELEASE_BUS );
//
//    uint8_t status = MSS_I2C_wait_complete( &g_mss_i2c0, MSS_I2C_NO_TIMEOUT );
//
//
//    printf("d", status);
//}

uint8_t readRegister8(uint8_t reg){
	MSS_I2C_read( &g_mss_i2c0, DRV2605_ADDR, reg, 1,
	                      MSS_I2C_RELEASE_BUS );
}

uint8_t writeRegister8(uint8_t reg){
	MSS_I2C_write( &g_mss_i2c0, DRV2605_ADDR, reg, 1,
	                      MSS_I2C_RELEASE_BUS );
}

int init() {
  uint8_t id = readRegister8(DRV2605_REG_STATUS);
  //Serial.print("Status 0x"); Serial.println(id, HEX);

  writeRegister8(DRV2605_REG_MODE, 0x00); // out of standby

  writeRegister8(DRV2605_REG_RTPIN, 0x00); // no real-time-playback

  writeRegister8(DRV2605_REG_WAVESEQ1, 1); // strong click
  writeRegister8(DRV2605_REG_WAVESEQ2, 0); // end sequence

  writeRegister8(DRV2605_REG_OVERDRIVE, 0); // no overdrive

  writeRegister8(DRV2605_REG_SUSTAINPOS, 0);
  writeRegister8(DRV2605_REG_SUSTAINNEG, 0);
  writeRegister8(DRV2605_REG_BREAK, 0);
  writeRegister8(DRV2605_REG_AUDIOMAX, 0x64);

  // ERM open loop

  // turn off N_ERM_LRA
  writeRegister8(DRV2605_REG_FEEDBACK, readRegister8(DRV2605_REG_FEEDBACK) & 0x7F);
  // turn on ERM_OPEN_LOOP
  writeRegister8(DRV2605_REG_CONTROL3, readRegister8(DRV2605_REG_CONTROL3) | 0x20);

  return 1;
}

void setWaveform(uint8_t slot, uint8_t w) {
  writeRegister8(DRV2605_REG_WAVESEQ1+slot, w);
}

void selectLibrary(uint8_t lib) {
  writeRegister8(DRV2605_REG_LIBRARY, lib);
}

/**************************************************************************/
/*!
  @brief Start playback of the waveforms (start moving!).
*/
/**************************************************************************/
void go() {
  writeRegister8(DRV2605_REG_GO, 1);
}

/**************************************************************************/
/*!
  @brief Stop playback.
*/
/**************************************************************************/
void stop() {
  writeRegister8(DRV2605_REG_GO, 0);
}

/**************************************************************************/
/*!
  @brief Set the device mode.
  @param mode Mode value, see datasheet section 7.6.2: http://www.adafruit.com/datasheets/DRV2605.pdf
    0: Internal trigger, call go() to start playback\n
    1: External trigger, rising edge on IN pin starts playback\n
    2: External trigger, playback follows the state of IN pin\n
    3: PWM/analog input\n
    4: Audio\n
    5: Real-time playback\n
    6: Diagnostics\n
    7: Auto calibration
*/
/**************************************************************************/
void setMode(uint8_t mode) {
  writeRegister8(DRV2605_REG_MODE, mode);
}

/**************************************************************************/
/*!
  @brief Set the realtime value when in RTP mode, used to directly drive the haptic motor.
  @param rtp 8-bit drive value.
*/
/**************************************************************************/
void setRealtimeValue(uint8_t rtp) {
  writeRegister8(DRV2605_REG_RTPIN, rtp);
}



